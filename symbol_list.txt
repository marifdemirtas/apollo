namespace audio
	function AudioComponent::~AudioComponent()
	function AudioComponent::Name() const
	function AudioComponent::Init()
	function AudioComponent::Proc(const std::shared_ptr<AudioData>&)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
namespace audio
	function AudioInfo::Insert(const AudioData &)
	function AudioInfo::InsertChannelData(const std::size_t, const ChannelData &, const MicrophoneConfig &)
	function AudioInfo::GetSignals(const int)
namespace audio
	function MessageProcess::OnMicrophone(const AudioData &, const std::string &, AudioInfo *, DirectionDetection *, MovingDetection *, SirenDetection *, AudioDetection *)
namespace audio
	function DirectionDetection::DirectionDetection()
	function DirectionDetection::~DirectionDetection()
	function DirectionDetection::EstimateSoundSource(std::vector<std::vector<double>>&&, const std::string &, const int, const double)
	function DirectionDetection::EstimateDirection(std::vector<std::vector<double>>&&, const int, const double)
	function DirectionDetection::LoadExtrinsics(const std::string &, Eigen::Matrix4d *)
	function DirectionDetection::GccPhat(const torch::Tensor &, const torch::Tensor &, int, double, int)
	function DirectionDetection::ConjugateTensor(torch::Tensor *)
	function DirectionDetection::ComplexMultiply(const torch::Tensor &, const torch::Tensor &)
	function DirectionDetection::ComplexAbsolute(const torch::Tensor &)
namespace audio
	function MovingDetection::Detect(const std::vector<std::vector<double>>&)
	function MovingDetection::DetectSingleChannel(const std::size_t, const std::vector<double>&)
	function MovingDetection::AnalyzePower(const std::deque<SignalStat>&)
	function MovingDetection::AnalyzeTopFrequence(const std::deque<SignalStat>&)
	function MovingDetection::fft1d(const std::vector<double>&)
	function MovingDetection::GetSignalStat(const std::vector<std::complex<double>>&, const int)
namespace audio
	function SirenDetection::SirenDetection()
	function SirenDetection::Evaluate(const std::vector<std::vector<double>>&)
	function SirenDetection::LoadModel()
namespace audio
	function GetRecordFileNames(const boost::filesystem::path &, std::vector<std::string>*)
	function ProcessSingleRecordFile(const AudioConf &, const std::string &, const std::string &, AudioInfo *, DirectionDetection *, MovingDetection *, SirenDetection *)
	function ProcessFolder()
function main(int, char * [])
namespace bridge
	function BridgeBuffer<T>::BridgeBuffer()
	function BridgeBuffer<T>::BridgeBuffer(size_t)
	function BridgeBuffer<T>::~BridgeBuffer()
	function BridgeBuffer<T>::operator T*()
	function BridgeBuffer<T>::reset(size_t)
	function BridgeBuffer<T>::write(size_t, const T *, size_t)
	function BRIDGE_IMPL(char)
	function BRIDGE_IMPL(int)
	function BRIDGE_IMPL(double)
constant BRIDGE_IMPL(type)
variable DEFINE_double
namespace bridge
	function BridgeHeader::Serialize(char *, size_t)
	function BridgeHeader::Diserialize(const char *, size_t)
	function BridgeHeader::IsAvailable(const char *)
	function BridgeHeader::SerializeHeaderFlag(char *, size_t)
	function BridgeHeader::SerializeHeaderSize(char *, size_t)
namespace bridge
	function GetProtoSize(const char *, size_t)
namespace bridge
	function UDPBridgeMultiReceiverComponent::UDPBridgeMultiReceiverComponent()
	function UDPBridgeMultiReceiverComponent::Init()
	function UDPBridgeMultiReceiverComponent::InitSession(uint16_t)
	function UDPBridgeMultiReceiverComponent::MsgDispatcher()
	function UDPBridgeMultiReceiverComponent::CreateBridgeProtoBuf(const BridgeHeader &)
	function UDPBridgeMultiReceiverComponent::IsProtoExist(const BridgeHeader &)
	function UDPBridgeMultiReceiverComponent::IsTimeout(double)
	function UDPBridgeMultiReceiverComponent::MsgHandle(int)
	function UDPBridgeMultiReceiverComponent::RemoveInvalidBuf(uint32_t, const std::string &)
namespace bridge
	function UDPBridgeReceiverComponent<T>::UDPBridgeReceiverComponent()
	function UDPBridgeReceiverComponent<T>::~UDPBridgeReceiverComponent()
	function UDPBridgeReceiverComponent<T>::Init()
	function UDPBridgeReceiverComponent<T>::InitSession(uint16_t)
	function UDPBridgeReceiverComponent<T>::MsgDispatcher()
	function UDPBridgeReceiverComponent<T>::CreateBridgeProtoBuf(const BridgeHeader &)
	function UDPBridgeReceiverComponent<T>::IsProtoExist(const BridgeHeader &)
	function UDPBridgeReceiverComponent<T>::IsTimeout(double)
	function UDPBridgeReceiverComponent<T>::MsgHandle(int)
	function UDPBridgeReceiverComponent<T>::RemoveInvalidBuf(uint32_t)
	function BRIDGE_RECV_IMPL(canbus::Chassis)
constant BRIDGE_RECV_IMPL(pb_msg)
namespace bridge
	function UDPBridgeSenderComponent<T>::Init()
	function UDPBridgeSenderComponent<T>::Proc(const std::shared_ptr<T>&)
	function BRIDGE_IMPL(LocalizationEstimate)
	function BRIDGE_IMPL(planning::ADCTrajectory)
constant BRIDGE_IMPL(pb_msg)
namespace apollo
	namespace canbus
		function CanbusComponent::Name() const
		function CanbusComponent::CanbusComponent()
		function CanbusComponent::Init()
		function CanbusComponent::Clear()
		function CanbusComponent::PublishChassis()
		function CanbusComponent::PublishChassisDetail()
		function CanbusComponent::Proc()
		function CanbusComponent::OnControlCommand(const ControlCommand &)
		function CanbusComponent::OnGuardianCommand(const GuardianCommand &)
		function CanbusComponent::OnError(const std::string &)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_double
variable DEFINE_int64
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_bool
variable DEFINE_double
variable DEFINE_double
variable DEFINE_bool
namespace `anonymous-namespace'
	variable KEYCODE_O
	variable KEYCODE_UP1
	variable KEYCODE_UP2
	variable KEYCODE_DN1
	variable KEYCODE_DN2
	variable KEYCODE_LF1
	variable KEYCODE_LF2
	variable KEYCODE_RT1
	variable KEYCODE_RT2
	variable KEYCODE_PKBK
	variable KEYCODE_SETT1
	variable KEYCODE_SETT2
	variable KEYCODE_SETG1
	variable KEYCODE_SETG2
	variable KEYCODE_SETB1
	variable KEYCODE_SETB2
	variable KEYCODE_ZERO
	variable KEYCODE_SETQ1
	variable KEYCODE_SETQ2
	variable KEYCODE_MODE
	variable KEYCODE_ESTOP
	variable KEYCODE_HELP
	variable KEYCODE_HELP2
	class Teleop
		method Teleop()
		method PrintKeycode()
		method KeyboardLoopThreadFunc()
		method control_command()
		method GetGear(int32_t)
		method GetPadMessage(PadMessage *, int32_t)
		method GetCommand(double, double)
		method Send()
		method ResetControlCommand()
		method OnChassis(const Chassis &)
		method Start()
		method Stop()
		method IsRunning() const
		field keyboard_thread_
		field chassis_reader_
		field control_command_writer_
		field control_command_
		field is_running_
		field node_
function main(int32_t, char **)
namespace canbus
	function AbstractVehicleFactory::SetVehicleParameter(const VehicleParameter &)
namespace canbus
	namespace ch
		namespace `anonymous-namespace'
			variable kMaxFailAttempt
			variable CHECK_RESPONSE_STEER_UNIT_FLAG
			variable CHECK_RESPONSE_SPEED_UNIT_FLAG
		function ChController::Init(const VehicleParameter &, CanSender<::apollo::canbus::ChassisDetail>* const, MessageManager<::apollo::canbus::ChassisDetail>* const)
		function ChController::~ChController()
		function ChController::Start()
		function ChController::Stop()
		function ChController::chassis()
		function ChController::Emergency()
		function ChController::EnableAutoMode()
		function ChController::DisableAutoMode()
		function ChController::EnableSteeringOnlyMode()
		function ChController::EnableSpeedOnlyMode()
		function ChController::Gear(Chassis::GearPosition)
		function ChController::Brake(double)
		function ChController::Throttle(double)
		function ChController::Acceleration(double)
		function ChController::Steer(double)
		function ChController::Steer(double, double)
		function ChController::SetEpbBreak(const ControlCommand &)
		function ChController::SetBeam(const ControlCommand &)
		function ChController::SetHorn(const ControlCommand &)
		function ChController::SetTurningSignal(const ControlCommand &)
		function ChController::ResetProtocol()
		function ChController::CheckChassisError()
		function ChController::SecurityDogThreadFunc()
		function ChController::CheckResponse(const int32_t, bool)
		function ChController::set_chassis_error_mask(const int32_t)
		function ChController::chassis_error_mask()
		function ChController::chassis_error_code()
		function ChController::set_chassis_error_code(const Chassis::ErrorCode &)
namespace canbus
	namespace ch
		function ChMessageManager::ChMessageManager()
		function ChMessageManager::~ChMessageManager()
namespace canbus
	function ChVehicleFactory::CreateVehicleController()
	function ChVehicleFactory::CreateMessageManager()
namespace canbus
	namespace ch
		variable Brakecommand111::ID
		function Brakecommand111::Brakecommand111()
		function Brakecommand111::GetPeriod() const
		function Brakecommand111::UpdateData(uint8_t *)
		function Brakecommand111::Reset()
		function Brakecommand111::set_brake_pedal_en_ctrl(Brake_command_111::Brake_pedal_en_ctrlType)
		function Brakecommand111::set_p_brake_pedal_en_ctrl(uint8_t *, Brake_command_111::Brake_pedal_en_ctrlType)
		function Brakecommand111::set_brake_pedal_cmd(int)
		function Brakecommand111::set_p_brake_pedal_cmd(uint8_t *, int)
namespace canbus
	namespace ch
		function Brakestatus511::Brakestatus511()
		variable Brakestatus511::ID
		function Brakestatus511::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakestatus511::brake_pedal_en_sts(const std::uint8_t *, int32_t) const
		function Brakestatus511::brake_pedal_sts(const std::uint8_t *, int32_t) const
		function Brakestatus511::brake_err(const std::uint8_t *, int32_t) const
		function Brakestatus511::emergency_btn_env(const std::uint8_t *, int32_t) const
		function Brakestatus511::front_bump_env(const std::uint8_t *, int32_t) const
		function Brakestatus511::back_bump_env(const std::uint8_t *, int32_t) const
		function Brakestatus511::overspd_env(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ch
		variable Controlcommand115::ID
		function Controlcommand115::Controlcommand115()
		function Controlcommand115::GetPeriod() const
		function Controlcommand115::UpdateData(uint8_t *)
		function Controlcommand115::Reset()
		function Controlcommand115::set_ctrl_cmd(Control_command_115::Ctrl_cmdType)
		function Controlcommand115::set_p_ctrl_cmd(uint8_t *, Control_command_115::Ctrl_cmdType)
namespace canbus
	namespace ch
		function Ecustatus1515::Ecustatus1515()
		variable Ecustatus1515::ID
		function Ecustatus1515::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Ecustatus1515::speed(const std::uint8_t *, int32_t) const
		function Ecustatus1515::acc_speed(const std::uint8_t *, int32_t) const
		function Ecustatus1515::ctrl_sts(const std::uint8_t *, int32_t) const
		function Ecustatus1515::chassis_sts(const std::uint8_t *, int32_t) const
		function Ecustatus1515::chassis_err(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ch
		function Ecustatus2516::Ecustatus2516()
		variable Ecustatus2516::ID
		function Ecustatus2516::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Ecustatus2516::battery_soc(const std::uint8_t *, int32_t) const
		function Ecustatus2516::battery_capacity(const std::uint8_t *, int32_t) const
		function Ecustatus2516::battery_voltage(const std::uint8_t *, int32_t) const
		function Ecustatus2516::battery_current(const std::uint8_t *, int32_t) const
		function Ecustatus2516::battery_temperature(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ch
		function Ecustatus3517::Ecustatus3517()
		variable Ecustatus3517::ID
		function Ecustatus3517::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Ecustatus3517::ultrasound_dist_1(const std::uint8_t *, int32_t) const
		function Ecustatus3517::ultrasound_dist_2(const std::uint8_t *, int32_t) const
		function Ecustatus3517::ultrasound_dist_3(const std::uint8_t *, int32_t) const
		function Ecustatus3517::ultrasound_dist_4(const std::uint8_t *, int32_t) const
		function Ecustatus3517::ultrasound_dist_5(const std::uint8_t *, int32_t) const
		function Ecustatus3517::ultrasound_dist_6(const std::uint8_t *, int32_t) const
		function Ecustatus3517::ultrasound_dist_7(const std::uint8_t *, int32_t) const
		function Ecustatus3517::ultrasound_dist_8(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ch
		variable Gearcommand114::ID
		function Gearcommand114::Gearcommand114()
		function Gearcommand114::GetPeriod() const
		function Gearcommand114::UpdateData(uint8_t *)
		function Gearcommand114::Reset()
		function Gearcommand114::set_gear_cmd(Gear_command_114::Gear_cmdType)
		function Gearcommand114::set_p_gear_cmd(uint8_t *, Gear_command_114::Gear_cmdType)
namespace canbus
	namespace ch
		function Gearstatus514::Gearstatus514()
		variable Gearstatus514::ID
		function Gearstatus514::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Gearstatus514::gear_sts(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ch
		variable Steercommand112::ID
		function Steercommand112::Steercommand112()
		function Steercommand112::GetPeriod() const
		function Steercommand112::UpdateData(uint8_t *)
		function Steercommand112::Reset()
		function Steercommand112::set_steer_angle_en_ctrl(Steer_command_112::Steer_angle_en_ctrlType)
		function Steercommand112::set_p_steer_angle_en_ctrl(uint8_t *, Steer_command_112::Steer_angle_en_ctrlType)
		function Steercommand112::set_steer_angle_cmd(double)
		function Steercommand112::set_p_steer_angle_cmd(uint8_t *, double)
namespace canbus
	namespace ch
		function Steerstatus512::Steerstatus512()
		variable Steerstatus512::ID
		function Steerstatus512::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steerstatus512::steer_angle_en_sts(const std::uint8_t *, int32_t) const
		function Steerstatus512::steer_angle_sts(const std::uint8_t *, int32_t) const
		function Steerstatus512::steer_err(const std::uint8_t *, int32_t) const
		function Steerstatus512::sensor_err(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ch
		variable Throttlecommand110::ID
		function Throttlecommand110::Throttlecommand110()
		function Throttlecommand110::GetPeriod() const
		function Throttlecommand110::UpdateData(uint8_t *)
		function Throttlecommand110::Reset()
		function Throttlecommand110::set_throttle_pedal_en_ctrl(Throttle_command_110::Throttle_pedal_en_ctrlType)
		function Throttlecommand110::set_p_throttle_pedal_en_ctrl(uint8_t *, Throttle_command_110::Throttle_pedal_en_ctrlType)
		function Throttlecommand110::set_throttle_pedal_cmd(int)
		function Throttlecommand110::set_p_throttle_pedal_cmd(uint8_t *, int)
namespace canbus
	namespace ch
		function Throttlestatus510::Throttlestatus510()
		variable Throttlestatus510::ID
		function Throttlestatus510::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Throttlestatus510::throttle_pedal_en_sts(const std::uint8_t *, int32_t) const
		function Throttlestatus510::throttle_pedal_sts(const std::uint8_t *, int32_t) const
		function Throttlestatus510::drive_motor_err(const std::uint8_t *, int32_t) const
		function Throttlestatus510::battery_bms_err(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ch
		variable Turnsignalcommand113::ID
		function Turnsignalcommand113::Turnsignalcommand113()
		function Turnsignalcommand113::GetPeriod() const
		function Turnsignalcommand113::UpdateData(uint8_t *)
		function Turnsignalcommand113::Reset()
		function Turnsignalcommand113::set_turn_signal_cmd(Turnsignal_command_113::Turn_signal_cmdType)
		function Turnsignalcommand113::set_p_turn_signal_cmd(uint8_t *, Turnsignal_command_113::Turn_signal_cmdType)
namespace canbus
	namespace ch
		function Turnsignalstatus513::Turnsignalstatus513()
		variable Turnsignalstatus513::ID
		function Turnsignalstatus513::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Turnsignalstatus513::turn_signal_sts(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		namespace `anonymous-namespace'
			variable kMaxFailAttempt
			variable CHECK_RESPONSE_STEER_UNIT_FLAG
			variable CHECK_RESPONSE_SPEED_UNIT_FLAG
		function DevkitController::Init(const VehicleParameter &, CanSender<::apollo::canbus::ChassisDetail>* const, MessageManager<::apollo::canbus::ChassisDetail>* const)
		function DevkitController::~DevkitController()
		function DevkitController::Start()
		function DevkitController::Stop()
		function DevkitController::chassis()
		function DevkitController::Emergency()
		function DevkitController::EnableAutoMode()
		function DevkitController::DisableAutoMode()
		function DevkitController::EnableSteeringOnlyMode()
		function DevkitController::EnableSpeedOnlyMode()
		function DevkitController::Gear(Chassis::GearPosition)
		function DevkitController::Brake(double)
		function DevkitController::Throttle(double)
		function DevkitController::Acceleration(double)
		function DevkitController::Steer(double)
		function DevkitController::Steer(double, double)
		function DevkitController::SetEpbBreak(const ControlCommand &)
		function DevkitController::SetBeam(const ControlCommand &)
		function DevkitController::SetHorn(const ControlCommand &)
		function DevkitController::SetTurningSignal(const ControlCommand &)
		function DevkitController::ResetProtocol()
		function DevkitController::CheckChassisError()
		function DevkitController::SecurityDogThreadFunc()
		function DevkitController::CheckResponse(const int32_t, bool)
		function DevkitController::set_chassis_error_mask(const int32_t)
		function DevkitController::chassis_error_mask()
		function DevkitController::chassis_error_code()
		function DevkitController::set_chassis_error_code(const Chassis::ErrorCode &)
namespace canbus
	namespace devkit
		function DevkitMessageManager::DevkitMessageManager()
		function DevkitMessageManager::~DevkitMessageManager()
namespace canbus
	function DevkitVehicleFactory::CreateVehicleController()
	function DevkitVehicleFactory::CreateMessageManager()
namespace canbus
	namespace devkit
		function Bmsreport512::Bmsreport512()
		variable Bmsreport512::ID
		function Bmsreport512::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Bmsreport512::battery_current(const std::uint8_t *, int32_t) const
		function Bmsreport512::battery_voltage(const std::uint8_t *, int32_t) const
		function Bmsreport512::battery_soc(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		variable Brakecommand101::ID
		function Brakecommand101::Brakecommand101()
		function Brakecommand101::GetPeriod() const
		function Brakecommand101::UpdateData(uint8_t *)
		function Brakecommand101::Reset()
		function Brakecommand101::set_aeb_en_ctrl(Brake_command_101::Aeb_en_ctrlType)
		function Brakecommand101::set_p_aeb_en_ctrl(uint8_t *, Brake_command_101::Aeb_en_ctrlType)
		function Brakecommand101::set_brake_dec(double)
		function Brakecommand101::set_p_brake_dec(uint8_t *, double)
		function Brakecommand101::set_checksum_101(int)
		function Brakecommand101::set_p_checksum_101(uint8_t *, int)
		function Brakecommand101::set_brake_pedal_target(double)
		function Brakecommand101::set_p_brake_pedal_target(uint8_t *, double)
		function Brakecommand101::set_brake_en_ctrl(Brake_command_101::Brake_en_ctrlType)
		function Brakecommand101::set_p_brake_en_ctrl(uint8_t *, Brake_command_101::Brake_en_ctrlType)
namespace canbus
	namespace devkit
		function Brakereport501::Brakereport501()
		variable Brakereport501::ID
		function Brakereport501::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakereport501::brake_pedal_actual(const std::uint8_t *, int32_t) const
		function Brakereport501::brake_flt2(const std::uint8_t *, int32_t) const
		function Brakereport501::brake_flt1(const std::uint8_t *, int32_t) const
		function Brakereport501::brake_en_state(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		variable Gearcommand103::ID
		function Gearcommand103::Gearcommand103()
		function Gearcommand103::GetPeriod() const
		function Gearcommand103::UpdateData(uint8_t *)
		function Gearcommand103::Reset()
		function Gearcommand103::set_gear_target(Gear_command_103::Gear_targetType)
		function Gearcommand103::set_p_gear_target(uint8_t *, Gear_command_103::Gear_targetType)
		function Gearcommand103::set_gear_en_ctrl(Gear_command_103::Gear_en_ctrlType)
		function Gearcommand103::set_p_gear_en_ctrl(uint8_t *, Gear_command_103::Gear_en_ctrlType)
		function Gearcommand103::set_checksum_103(int)
		function Gearcommand103::set_p_checksum_103(uint8_t *, int)
namespace canbus
	namespace devkit
		function Gearreport503::Gearreport503()
		variable Gearreport503::ID
		function Gearreport503::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Gearreport503::gear_flt(const std::uint8_t *, int32_t) const
		function Gearreport503::gear_actual(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		variable Parkcommand104::ID
		function Parkcommand104::Parkcommand104()
		function Parkcommand104::GetPeriod() const
		function Parkcommand104::UpdateData(uint8_t *)
		function Parkcommand104::Reset()
		function Parkcommand104::set_checksum_104(int)
		function Parkcommand104::set_p_checksum_104(uint8_t *, int)
		function Parkcommand104::set_park_target(Park_command_104::Park_targetType)
		function Parkcommand104::set_p_park_target(uint8_t *, Park_command_104::Park_targetType)
		function Parkcommand104::set_park_en_ctrl(Park_command_104::Park_en_ctrlType)
		function Parkcommand104::set_p_park_en_ctrl(uint8_t *, Park_command_104::Park_en_ctrlType)
namespace canbus
	namespace devkit
		function Parkreport504::Parkreport504()
		variable Parkreport504::ID
		function Parkreport504::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Parkreport504::parking_actual(const std::uint8_t *, int32_t) const
		function Parkreport504::park_flt(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		variable Steeringcommand102::ID
		function Steeringcommand102::Steeringcommand102()
		function Steeringcommand102::GetPeriod() const
		function Steeringcommand102::UpdateData(uint8_t *)
		function Steeringcommand102::Reset()
		function Steeringcommand102::set_steer_en_ctrl(Steering_command_102::Steer_en_ctrlType)
		function Steeringcommand102::set_p_steer_en_ctrl(uint8_t *, Steering_command_102::Steer_en_ctrlType)
		function Steeringcommand102::set_steer_angle_target(int)
		function Steeringcommand102::set_p_steer_angle_target(uint8_t *, int)
		function Steeringcommand102::set_steer_angle_spd(int)
		function Steeringcommand102::set_p_steer_angle_spd(uint8_t *, int)
		function Steeringcommand102::set_checksum_102(int)
		function Steeringcommand102::set_p_checksum_102(uint8_t *, int)
namespace canbus
	namespace devkit
		function Steeringreport502::Steeringreport502()
		variable Steeringreport502::ID
		function Steeringreport502::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steeringreport502::steer_angle_spd_actual(const std::uint8_t *, int32_t) const
		function Steeringreport502::steer_flt2(const std::uint8_t *, int32_t) const
		function Steeringreport502::steer_flt1(const std::uint8_t *, int32_t) const
		function Steeringreport502::steer_en_state(const std::uint8_t *, int32_t) const
		function Steeringreport502::steer_angle_actual(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		variable Throttlecommand100::ID
		function Throttlecommand100::Throttlecommand100()
		function Throttlecommand100::GetPeriod() const
		function Throttlecommand100::UpdateData(uint8_t *)
		function Throttlecommand100::Reset()
		function Throttlecommand100::set_throttle_acc(double)
		function Throttlecommand100::set_p_throttle_acc(uint8_t *, double)
		function Throttlecommand100::set_checksum_100(int)
		function Throttlecommand100::set_p_checksum_100(uint8_t *, int)
		function Throttlecommand100::set_throttle_pedal_target(double)
		function Throttlecommand100::set_p_throttle_pedal_target(uint8_t *, double)
		function Throttlecommand100::set_throttle_en_ctrl(Throttle_command_100::Throttle_en_ctrlType)
		function Throttlecommand100::set_p_throttle_en_ctrl(uint8_t *, Throttle_command_100::Throttle_en_ctrlType)
namespace canbus
	namespace devkit
		function Throttlereport500::Throttlereport500()
		variable Throttlereport500::ID
		function Throttlereport500::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Throttlereport500::throttle_pedal_actual(const std::uint8_t *, int32_t) const
		function Throttlereport500::throttle_flt2(const std::uint8_t *, int32_t) const
		function Throttlereport500::throttle_flt1(const std::uint8_t *, int32_t) const
		function Throttlereport500::throttle_en_state(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		function Ultrsensor1507::Ultrsensor1507()
		variable Ultrsensor1507::ID
		function Ultrsensor1507::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Ultrsensor1507::uiuss9_tof_direct(const std::uint8_t *, int32_t) const
		function Ultrsensor1507::uiuss8_tof_direct(const std::uint8_t *, int32_t) const
		function Ultrsensor1507::uiuss11_tof_direct(const std::uint8_t *, int32_t) const
		function Ultrsensor1507::uiuss10_tof_direct(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		function Ultrsensor2508::Ultrsensor2508()
		variable Ultrsensor2508::ID
		function Ultrsensor2508::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Ultrsensor2508::uiuss9_tof_indirect(const std::uint8_t *, int32_t) const
		function Ultrsensor2508::uiuss8_tof_indirect(const std::uint8_t *, int32_t) const
		function Ultrsensor2508::uiuss11_tof_indirect(const std::uint8_t *, int32_t) const
		function Ultrsensor2508::uiuss10_tof_indirect(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		function Ultrsensor3509::Ultrsensor3509()
		variable Ultrsensor3509::ID
		function Ultrsensor3509::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Ultrsensor3509::uiuss5_tof_direct(const std::uint8_t *, int32_t) const
		function Ultrsensor3509::uiuss4_tof_direct(const std::uint8_t *, int32_t) const
		function Ultrsensor3509::uiuss3_tof_direct(const std::uint8_t *, int32_t) const
		function Ultrsensor3509::uiuss2_tof_direct(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		function Ultrsensor4510::Ultrsensor4510()
		variable Ultrsensor4510::ID
		function Ultrsensor4510::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Ultrsensor4510::uiuss5_tof_indirect(const std::uint8_t *, int32_t) const
		function Ultrsensor4510::uiuss4_tof_indirect(const std::uint8_t *, int32_t) const
		function Ultrsensor4510::uiuss3_tof_indirect(const std::uint8_t *, int32_t) const
		function Ultrsensor4510::uiuss2_tof_indirect(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		function Ultrsensor5511::Ultrsensor5511()
		variable Ultrsensor5511::ID
		function Ultrsensor5511::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Ultrsensor5511::uiuss7_tof_direct(const std::uint8_t *, int32_t) const
		function Ultrsensor5511::uiuss6_tof_direct(const std::uint8_t *, int32_t) const
		function Ultrsensor5511::uiuss1_tof_direct(const std::uint8_t *, int32_t) const
		function Ultrsensor5511::uiuss0_tof_direct(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		function Vcureport505::Vcureport505()
		variable Vcureport505::ID
		function Vcureport505::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vcureport505::vehicle_mode_state(const std::uint8_t *, int32_t) const
		function Vcureport505::frontcrash_state(const std::uint8_t *, int32_t) const
		function Vcureport505::backcrash_state(const std::uint8_t *, int32_t) const
		function Vcureport505::aeb_state(const std::uint8_t *, int32_t) const
		function Vcureport505::acc(const std::uint8_t *, int32_t) const
		function Vcureport505::speed(const std::uint8_t *, int32_t) const
namespace canbus
	namespace devkit
		function Wheelspeedreport506::Wheelspeedreport506()
		variable Wheelspeedreport506::ID
		function Wheelspeedreport506::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Wheelspeedreport506::rr(const std::uint8_t *, int32_t) const
		function Wheelspeedreport506::rl(const std::uint8_t *, int32_t) const
		function Wheelspeedreport506::fr(const std::uint8_t *, int32_t) const
		function Wheelspeedreport506::fl(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		namespace `anonymous-namespace'
			variable kMaxFailAttempt
			variable CHECK_RESPONSE_STEER_UNIT_FLAG
			variable CHECK_RESPONSE_SPEED_UNIT_FLAG
		function Ge3Controller::Init(const VehicleParameter &, CanSender<ChassisDetail>* const, MessageManager<::apollo::canbus::ChassisDetail>* const)
		function Ge3Controller::~Ge3Controller()
		function Ge3Controller::Start()
		function Ge3Controller::Stop()
		function Ge3Controller::chassis()
		function Ge3Controller::Emergency()
		function Ge3Controller::EnableAutoMode()
		function Ge3Controller::DisableAutoMode()
		function Ge3Controller::EnableSteeringOnlyMode()
		function Ge3Controller::EnableSpeedOnlyMode()
		function Ge3Controller::Gear(Chassis::GearPosition)
		function Ge3Controller::Brake(double)
		function Ge3Controller::Throttle(double)
		function Ge3Controller::Steer(double)
		function Ge3Controller::Acceleration(double)
		function Ge3Controller::Steer(double, double)
		function Ge3Controller::SetEpbBreak(const ControlCommand &)
		function Ge3Controller::SetBeam(const ControlCommand &)
		function Ge3Controller::SetHorn(const ControlCommand &)
		function Ge3Controller::SetTurningSignal(const ControlCommand &)
		function Ge3Controller::ResetProtocol()
		function Ge3Controller::CheckChassisError()
		function Ge3Controller::SecurityDogThreadFunc()
		function Ge3Controller::CheckResponse(const int32_t, bool)
		function Ge3Controller::set_chassis_error_mask(const int32_t)
		function Ge3Controller::chassis_error_mask()
		function Ge3Controller::chassis_error_code()
		function Ge3Controller::set_chassis_error_code(const Chassis::ErrorCode &)
		function Ge3Controller::CheckSafetyError(const::apollo::canbus::ChassisDetail &)
namespace canbus
	namespace ge3
		function Ge3MessageManager::Ge3MessageManager()
		function Ge3MessageManager::~Ge3MessageManager()
namespace canbus
	function Ge3VehicleFactory::CreateVehicleController()
	function Ge3VehicleFactory::CreateMessageManager()
namespace canbus
	namespace ge3
		variable Pcbcm201::ID
		function Pcbcm201::Pcbcm201()
		function Pcbcm201::GetPeriod() const
		function Pcbcm201::UpdateData(uint8_t *)
		function Pcbcm201::Reset()
		function Pcbcm201::set_pc_reverselampreq(Pc_bcm_201::Pc_reverselampreqType)
		function Pcbcm201::set_p_pc_reverselampreq(uint8_t *, Pc_bcm_201::Pc_reverselampreqType)
		function Pcbcm201::set_pc_lowbeamreq(Pc_bcm_201::Pc_lowbeamreqType)
		function Pcbcm201::set_p_pc_lowbeamreq(uint8_t *, Pc_bcm_201::Pc_lowbeamreqType)
		function Pcbcm201::set_pc_highbeamreq(Pc_bcm_201::Pc_highbeamreqType)
		function Pcbcm201::set_p_pc_highbeamreq(uint8_t *, Pc_bcm_201::Pc_highbeamreqType)
		function Pcbcm201::set_pc_rightturnlampreq(Pc_bcm_201::Pc_rightturnlampreqType)
		function Pcbcm201::set_p_pc_rightturnlampreq(uint8_t *, Pc_bcm_201::Pc_rightturnlampreqType)
		function Pcbcm201::set_pc_leftturnlampreq(Pc_bcm_201::Pc_leftturnlampreqType)
		function Pcbcm201::set_p_pc_leftturnlampreq(uint8_t *, Pc_bcm_201::Pc_leftturnlampreqType)
		function Pcbcm201::set_pc_hornreq(Pc_bcm_201::Pc_hornreqType)
		function Pcbcm201::set_p_pc_hornreq(uint8_t *, Pc_bcm_201::Pc_hornreqType)
		function Pcbcm201::set_pc_hazardlampreq(Pc_bcm_201::Pc_hazardlampreqType)
		function Pcbcm201::set_p_pc_hazardlampreq(uint8_t *, Pc_bcm_201::Pc_hazardlampreqType)
namespace canbus
	namespace ge3
		variable Pcbcs202::ID
		function Pcbcs202::Pcbcs202()
		function Pcbcs202::GetPeriod() const
		function Pcbcs202::UpdateData(uint8_t *)
		function Pcbcs202::Reset()
		function Pcbcs202::set_pc_brkpedreq(double)
		function Pcbcs202::set_p_pc_brkpedreq(uint8_t *, double)
		function Pcbcs202::set_pc_brkpedenable(Pc_bcs_202::Pc_brkpedenableType)
		function Pcbcs202::set_p_pc_brkpedenable(uint8_t *, Pc_bcs_202::Pc_brkpedenableType)
namespace canbus
	namespace ge3
		variable Pcepb203::ID
		function Pcepb203::Pcepb203()
		function Pcepb203::GetPeriod() const
		function Pcepb203::UpdateData(uint8_t *)
		function Pcepb203::Reset()
		function Pcepb203::set_pc_epbreq(Pc_epb_203::Pc_epbreqType)
		function Pcepb203::set_p_pc_epbreq(uint8_t *, Pc_epb_203::Pc_epbreqType)
		function Pcepb203::set_pc_epbenable(Pc_epb_203::Pc_epbenableType)
		function Pcepb203::set_p_pc_epbenable(uint8_t *, Pc_epb_203::Pc_epbenableType)
namespace canbus
	namespace ge3
		variable Pceps204::ID
		function Pceps204::Pceps204()
		function Pceps204::GetPeriod() const
		function Pceps204::UpdateData(uint8_t *)
		function Pceps204::Reset()
		function Pceps204::set_pc_steerspdreq(int)
		function Pceps204::set_p_pc_steerspdreq(uint8_t *, int)
		function Pceps204::set_pc_steerenable(Pc_eps_204::Pc_steerenableType)
		function Pceps204::set_p_pc_steerenable(uint8_t *, Pc_eps_204::Pc_steerenableType)
		function Pceps204::set_pc_steerangreq(double)
		function Pceps204::set_p_pc_steerangreq(uint8_t *, double)
namespace canbus
	namespace ge3
		variable Pcvcu205::ID
		function Pcvcu205::Pcvcu205()
		function Pcvcu205::GetPeriod() const
		function Pcvcu205::UpdateData(uint8_t *)
		function Pcvcu205::Reset()
		function Pcvcu205::set_pc_accpedreq(double)
		function Pcvcu205::set_p_pc_accpedreq(uint8_t *, double)
		function Pcvcu205::set_pc_accpedenable(Pc_vcu_205::Pc_accpedenableType)
		function Pcvcu205::set_p_pc_accpedenable(uint8_t *, Pc_vcu_205::Pc_accpedenableType)
		function Pcvcu205::set_pc_torqreq(double)
		function Pcvcu205::set_p_pc_torqreq(uint8_t *, double)
		function Pcvcu205::set_pc_torqenable(Pc_vcu_205::Pc_torqenableType)
		function Pcvcu205::set_p_pc_torqenable(uint8_t *, Pc_vcu_205::Pc_torqenableType)
		function Pcvcu205::set_pc_gearreq(Pc_vcu_205::Pc_gearreqType)
		function Pcvcu205::set_p_pc_gearreq(uint8_t *, Pc_vcu_205::Pc_gearreqType)
		function Pcvcu205::set_pc_gearenable(Pc_vcu_205::Pc_gearenableType)
		function Pcvcu205::set_p_pc_gearenable(uint8_t *, Pc_vcu_205::Pc_gearenableType)
namespace canbus
	namespace ge3
		function Scu1301::Scu1301()
		variable Scu1301::ID
		function Scu1301::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scu1301::vin16(const std::uint8_t *, int32_t) const
		function Scu1301::scu_stopbutst(const std::uint8_t *, int32_t) const
		function Scu1301::scu_drvmode(const std::uint8_t *, int32_t) const
		function Scu1301::scu_faultst(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		function Scu2302::Scu2302()
		variable Scu2302::ID
		function Scu2302::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scu2302::vin07(const std::uint8_t *, int32_t) const
		function Scu2302::vin06(const std::uint8_t *, int32_t) const
		function Scu2302::vin05(const std::uint8_t *, int32_t) const
		function Scu2302::vin04(const std::uint8_t *, int32_t) const
		function Scu2302::vin03(const std::uint8_t *, int32_t) const
		function Scu2302::vin02(const std::uint8_t *, int32_t) const
		function Scu2302::vin01(const std::uint8_t *, int32_t) const
		function Scu2302::vin00(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		function Scu3303::Scu3303()
		variable Scu3303::ID
		function Scu3303::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scu3303::vin15(const std::uint8_t *, int32_t) const
		function Scu3303::vin14(const std::uint8_t *, int32_t) const
		function Scu3303::vin13(const std::uint8_t *, int32_t) const
		function Scu3303::vin12(const std::uint8_t *, int32_t) const
		function Scu3303::vin11(const std::uint8_t *, int32_t) const
		function Scu3303::vin10(const std::uint8_t *, int32_t) const
		function Scu3303::vin09(const std::uint8_t *, int32_t) const
		function Scu3303::vin08(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		function Scubcm304::Scubcm304()
		variable Scubcm304::ID
		function Scubcm304::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scubcm304::bcm_vehreversest(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_rightturnlampst(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_rearfoglampst(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_parkinglampst(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_lowbeamst(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_leftturnlampst(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_keyst(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_hornst(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_highbeamst(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_hazardlampst(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_frontfoglampst(const std::uint8_t *, int32_t) const
		function Scubcm304::bcm_brakelightswitchst(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		function Scubcs1306::Scubcs1306()
		variable Scubcs1306::ID
		function Scubcs1306::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scubcs1306::bcs_aebavailable(const std::uint8_t *, int32_t) const
		function Scubcs1306::bcs_cddavailable(const std::uint8_t *, int32_t) const
		function Scubcs1306::bcs_brkpedact(const std::uint8_t *, int32_t) const
		function Scubcs1306::bcs_intidx(const std::uint8_t *, int32_t) const
		function Scubcs1306::bcs_vdcfaultst(const std::uint8_t *, int32_t) const
		function Scubcs1306::bcs_vdcactivest(const std::uint8_t *, int32_t) const
		function Scubcs1306::bcs_absfaultst(const std::uint8_t *, int32_t) const
		function Scubcs1306::bcs_absactivest(const std::uint8_t *, int32_t) const
		function Scubcs1306::bcs_faultst(const std::uint8_t *, int32_t) const
		function Scubcs1306::bcs_drvmode(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		function Scubcs2307::Scubcs2307()
		variable Scubcs2307::ID
		function Scubcs2307::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scubcs2307::bcs_vehspdvd(const std::uint8_t *, int32_t) const
		function Scubcs2307::bcs_yawrate(const std::uint8_t *, int32_t) const
		function Scubcs2307::bcs_vehspd(const std::uint8_t *, int32_t) const
		function Scubcs2307::bcs_vehlongaccel(const std::uint8_t *, int32_t) const
		function Scubcs2307::bcs_vehlataccel(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		function Scubcs3308::Scubcs3308()
		variable Scubcs3308::ID
		function Scubcs3308::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scubcs3308::bcs_rrwheelspdvd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_rrwheeldirectionvd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_rlwheelspdvd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_rlwheeldirectionvd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_frwheelspdvd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_frwheeldirectionvd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_flwheelspdvd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_flwheeldirectionvd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_rrwheelspd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_rrwheeldirection(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_rlwheelspd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_rlwheeldirection(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_frwheelspd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_frwheeldirection(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_flwheelspd(const std::uint8_t *, int32_t) const
		function Scubcs3308::bcs_flwheeldirection(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		function Scuepb310::Scuepb310()
		variable Scuepb310::ID
		function Scuepb310::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scuepb310::epb_intidx(const std::uint8_t *, int32_t) const
		function Scuepb310::epb_drvmode(const std::uint8_t *, int32_t) const
		function Scuepb310::epb_sysst(const std::uint8_t *, int32_t) const
		function Scuepb310::epb_faultst(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		function Scueps311::Scueps311()
		variable Scueps311::ID
		function Scueps311::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scueps311::eps_intidx(const std::uint8_t *, int32_t) const
		function Scueps311::eps_steeranglespd(const std::uint8_t *, int32_t) const
		function Scueps311::eps_steerangle(const std::uint8_t *, int32_t) const
		function Scueps311::eps_faultst(const std::uint8_t *, int32_t) const
		function Scueps311::eps_drvmode(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		function Scuvcu1312::Scuvcu1312()
		variable Scuvcu1312::ID
		function Scuvcu1312::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scuvcu1312::vcu_elcsysfault(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_brkpedst(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_intidx(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_gearintidx(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_geardrvmode(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_accpedact(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_brkpedpst(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_vehrng(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_accpedpst(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_vehrdyst(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_faultst(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_drvmode(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_gearpst(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_gearfaultst(const std::uint8_t *, int32_t) const
		function Scuvcu1312::vcu_gearact(const std::uint8_t *, int32_t) const
namespace canbus
	namespace ge3
		function Scuvcu2313::Scuvcu2313()
		variable Scuvcu2313::ID
		function Scuvcu2313::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Scuvcu2313::vcu_torqposmax(const std::uint8_t *, int32_t) const
		function Scuvcu2313::vcu_torqnegmax(const std::uint8_t *, int32_t) const
		function Scuvcu2313::vcu_torqact(const std::uint8_t *, int32_t) const
		function Scuvcu2313::vcu_engspd(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		namespace `anonymous-namespace'
			variable kMaxFailAttempt
			variable CHECK_RESPONSE_STEER_UNIT_FLAG
			variable CHECK_RESPONSE_SPEED_UNIT_FLAG
		function GemController::Init(const VehicleParameter &, CanSender<::apollo::canbus::ChassisDetail>* const, MessageManager<::apollo::canbus::ChassisDetail>* const)
		function GemController::~GemController()
		function GemController::Start()
		function GemController::Stop()
		function GemController::chassis()
		function GemController::Emergency()
		function GemController::EnableAutoMode()
		function GemController::DisableAutoMode()
		function GemController::EnableSteeringOnlyMode()
		function GemController::EnableSpeedOnlyMode()
		function GemController::Gear(Chassis::GearPosition)
		function GemController::Brake(double)
		function GemController::Throttle(double)
		function GemController::Acceleration(double)
		function GemController::Steer(double)
		function GemController::Steer(double, double)
		function GemController::SetEpbBreak(const ControlCommand &)
		function GemController::SetBeam(const ControlCommand &)
		function GemController::SetHorn(const ControlCommand &)
		function GemController::SetTurningSignal(const ControlCommand &)
		function GemController::ResetProtocol()
		function GemController::CheckChassisError()
		function GemController::SecurityDogThreadFunc()
		function GemController::CheckResponse(const int32_t, bool)
		function GemController::set_chassis_error_mask(const int32_t)
		function GemController::chassis_error_mask()
		function GemController::chassis_error_code()
		function GemController::set_chassis_error_code(const Chassis::ErrorCode &)
namespace canbus
	namespace gem
		function GemMessageManager::GemMessageManager()
		function GemMessageManager::~GemMessageManager()
namespace canbus
	function GemVehicleFactory::CreateVehicleController()
	function GemVehicleFactory::CreateMessageManager()
namespace canbus
	namespace gem
		variable Accelcmd67::ID
		function Accelcmd67::Accelcmd67()
		function Accelcmd67::GetPeriod() const
		function Accelcmd67::UpdateData(uint8_t *)
		function Accelcmd67::Reset()
		function Accelcmd67::set_accel_cmd(double)
		function Accelcmd67::set_p_accel_cmd(uint8_t *, double)
namespace canbus
	namespace gem
		function Accelrpt68::Accelrpt68()
		variable Accelrpt68::ID
		function Accelrpt68::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Accelrpt68::manual_input(const std::uint8_t *, int32_t) const
		function Accelrpt68::commanded_value(const std::uint8_t *, int32_t) const
		function Accelrpt68::output_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		variable Brakecmd6b::ID
		function Brakecmd6b::Brakecmd6b()
		function Brakecmd6b::GetPeriod() const
		function Brakecmd6b::UpdateData(uint8_t *)
		function Brakecmd6b::Reset()
		function Brakecmd6b::set_brake_cmd(double)
		function Brakecmd6b::set_p_brake_cmd(uint8_t *, double)
namespace canbus
	namespace gem
		function Brakemotorrpt170::Brakemotorrpt170()
		variable Brakemotorrpt170::ID
		function Brakemotorrpt170::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakemotorrpt170::motor_current(const std::uint8_t *, int32_t) const
		function Brakemotorrpt170::shaft_position(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Brakemotorrpt271::Brakemotorrpt271()
		variable Brakemotorrpt271::ID
		function Brakemotorrpt271::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakemotorrpt271::encoder_temperature(const std::uint8_t *, int32_t) const
		function Brakemotorrpt271::motor_temperature(const std::uint8_t *, int32_t) const
		function Brakemotorrpt271::angular_speed(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Brakemotorrpt372::Brakemotorrpt372()
		variable Brakemotorrpt372::ID
		function Brakemotorrpt372::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakemotorrpt372::torque_output(const std::uint8_t *, int32_t) const
		function Brakemotorrpt372::torque_input(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Brakerpt6c::Brakerpt6c()
		variable Brakerpt6c::ID
		function Brakerpt6c::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakerpt6c::manual_input(const std::uint8_t *, int32_t) const
		function Brakerpt6c::commanded_value(const std::uint8_t *, int32_t) const
		function Brakerpt6c::output_value(const std::uint8_t *, int32_t) const
		function Brakerpt6c::brake_on_off(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Datetimerpt83::Datetimerpt83()
		variable Datetimerpt83::ID
		function Datetimerpt83::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Datetimerpt83::time_second(const std::uint8_t *, int32_t) const
		function Datetimerpt83::time_minute(const std::uint8_t *, int32_t) const
		function Datetimerpt83::time_hour(const std::uint8_t *, int32_t) const
		function Datetimerpt83::date_day(const std::uint8_t *, int32_t) const
		function Datetimerpt83::date_month(const std::uint8_t *, int32_t) const
		function Datetimerpt83::date_year(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		variable Globalcmd69::ID
		function Globalcmd69::Globalcmd69()
		function Globalcmd69::GetPeriod() const
		function Globalcmd69::UpdateData(uint8_t *)
		function Globalcmd69::Reset()
		function Globalcmd69::set_pacmod_enable(Global_cmd_69::Pacmod_enableType)
		function Globalcmd69::set_p_pacmod_enable(uint8_t *, Global_cmd_69::Pacmod_enableType)
		function Globalcmd69::set_clear_override(Global_cmd_69::Clear_overrideType)
		function Globalcmd69::set_p_clear_override(uint8_t *, Global_cmd_69::Clear_overrideType)
		function Globalcmd69::set_ignore_override(Global_cmd_69::Ignore_overrideType)
		function Globalcmd69::set_p_ignore_override(uint8_t *, Global_cmd_69::Ignore_overrideType)
namespace canbus
	namespace gem
		function Globalrpt6a::Globalrpt6a()
		variable Globalrpt6a::ID
		function Globalrpt6a::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Globalrpt6a::pacmod_status(const std::uint8_t *, int32_t) const
		function Globalrpt6a::override_status(const std::uint8_t *, int32_t) const
		function Globalrpt6a::veh_can_timeout(const std::uint8_t *, int32_t) const
		function Globalrpt6a::str_can_timeout(const std::uint8_t *, int32_t) const
		function Globalrpt6a::brk_can_timeout(const std::uint8_t *, int32_t) const
		function Globalrpt6a::usr_can_timeout(const std::uint8_t *, int32_t) const
		function Globalrpt6a::usr_can_read_errors(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		variable Headlightcmd76::ID
		function Headlightcmd76::Headlightcmd76()
		function Headlightcmd76::GetPeriod() const
		function Headlightcmd76::UpdateData(uint8_t *)
		function Headlightcmd76::Reset()
		function Headlightcmd76::set_headlight_cmd(Headlight_cmd_76::Headlight_cmdType)
		function Headlightcmd76::set_p_headlight_cmd(uint8_t *, Headlight_cmd_76::Headlight_cmdType)
namespace canbus
	namespace gem
		function Headlightrpt77::Headlightrpt77()
		variable Headlightrpt77::ID
		function Headlightrpt77::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Headlightrpt77::output_value(const std::uint8_t *, int32_t) const
		function Headlightrpt77::manual_input(const std::uint8_t *, int32_t) const
		function Headlightrpt77::commanded_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		variable Horncmd78::ID
		function Horncmd78::Horncmd78()
		function Horncmd78::GetPeriod() const
		function Horncmd78::UpdateData(uint8_t *)
		function Horncmd78::Reset()
		function Horncmd78::set_horn_cmd(Horn_cmd_78::Horn_cmdType)
		function Horncmd78::set_p_horn_cmd(uint8_t *, Horn_cmd_78::Horn_cmdType)
namespace canbus
	namespace gem
		function Hornrpt79::Hornrpt79()
		variable Hornrpt79::ID
		function Hornrpt79::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Hornrpt79::output_value(const std::uint8_t *, int32_t) const
		function Hornrpt79::commanded_value(const std::uint8_t *, int32_t) const
		function Hornrpt79::manual_input(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Latlonheadingrpt82::Latlonheadingrpt82()
		variable Latlonheadingrpt82::ID
		function Latlonheadingrpt82::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Latlonheadingrpt82::heading(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt82::longitude_seconds(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt82::longitude_minutes(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt82::longitude_degrees(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt82::latitude_seconds(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt82::latitude_minutes(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt82::latitude_degrees(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Parkingbrakestatusrpt80::Parkingbrakestatusrpt80()
		variable Parkingbrakestatusrpt80::ID
		function Parkingbrakestatusrpt80::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Parkingbrakestatusrpt80::parking_brake_enabled(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		variable Shiftcmd65::ID
		function Shiftcmd65::Shiftcmd65()
		function Shiftcmd65::GetPeriod() const
		function Shiftcmd65::UpdateData(uint8_t *)
		function Shiftcmd65::Reset()
		function Shiftcmd65::set_shift_cmd(Shift_cmd_65::Shift_cmdType)
		function Shiftcmd65::set_p_shift_cmd(uint8_t *, Shift_cmd_65::Shift_cmdType)
namespace canbus
	namespace gem
		function Shiftrpt66::Shiftrpt66()
		variable Shiftrpt66::ID
		function Shiftrpt66::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Shiftrpt66::manual_input(const std::uint8_t *, int32_t) const
		function Shiftrpt66::commanded_value(const std::uint8_t *, int32_t) const
		function Shiftrpt66::output_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		variable Steeringcmd6d::ID
		function Steeringcmd6d::Steeringcmd6d()
		function Steeringcmd6d::GetPeriod() const
		function Steeringcmd6d::UpdateData(uint8_t *)
		function Steeringcmd6d::Reset()
		function Steeringcmd6d::set_position_value(double)
		function Steeringcmd6d::set_p_position_value(uint8_t *, double)
		function Steeringcmd6d::set_speed_limit(double)
		function Steeringcmd6d::set_p_speed_limit(uint8_t *, double)
namespace canbus
	namespace gem
		function Steeringmotorrpt173::Steeringmotorrpt173()
		variable Steeringmotorrpt173::ID
		function Steeringmotorrpt173::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steeringmotorrpt173::motor_current(const std::uint8_t *, int32_t) const
		function Steeringmotorrpt173::shaft_position(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Steeringmotorrpt274::Steeringmotorrpt274()
		variable Steeringmotorrpt274::ID
		function Steeringmotorrpt274::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steeringmotorrpt274::encoder_temperature(const std::uint8_t *, int32_t) const
		function Steeringmotorrpt274::motor_temperature(const std::uint8_t *, int32_t) const
		function Steeringmotorrpt274::angular_speed(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Steeringmotorrpt375::Steeringmotorrpt375()
		variable Steeringmotorrpt375::ID
		function Steeringmotorrpt375::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steeringmotorrpt375::torque_output(const std::uint8_t *, int32_t) const
		function Steeringmotorrpt375::torque_input(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Steeringrpt16e::Steeringrpt16e()
		variable Steeringrpt16e::ID
		function Steeringrpt16e::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steeringrpt16e::manual_input(const std::uint8_t *, int32_t) const
		function Steeringrpt16e::commanded_value(const std::uint8_t *, int32_t) const
		function Steeringrpt16e::output_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		variable Turncmd63::ID
		function Turncmd63::Turncmd63()
		function Turncmd63::GetPeriod() const
		function Turncmd63::UpdateData(uint8_t *)
		function Turncmd63::Reset()
		function Turncmd63::set_turn_signal_cmd(Turn_cmd_63::Turn_signal_cmdType)
		function Turncmd63::set_p_turn_signal_cmd(uint8_t *, Turn_cmd_63::Turn_signal_cmdType)
namespace canbus
	namespace gem
		function Turnrpt64::Turnrpt64()
		variable Turnrpt64::ID
		function Turnrpt64::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Turnrpt64::manual_input(const std::uint8_t *, int32_t) const
		function Turnrpt64::commanded_value(const std::uint8_t *, int32_t) const
		function Turnrpt64::output_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Vehiclespeedrpt6f::Vehiclespeedrpt6f()
		variable Vehiclespeedrpt6f::ID
		function Vehiclespeedrpt6f::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vehiclespeedrpt6f::vehicle_speed(const std::uint8_t *, int32_t) const
		function Vehiclespeedrpt6f::vehicle_speed_valid(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Wheelspeedrpt7a::Wheelspeedrpt7a()
		variable Wheelspeedrpt7a::ID
		function Wheelspeedrpt7a::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Wheelspeedrpt7a::wheel_spd_rear_right(const std::uint8_t *, int32_t) const
		function Wheelspeedrpt7a::wheel_spd_rear_left(const std::uint8_t *, int32_t) const
		function Wheelspeedrpt7a::wheel_spd_front_right(const std::uint8_t *, int32_t) const
		function Wheelspeedrpt7a::wheel_spd_front_left(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		variable Wipercmd90::ID
		function Wipercmd90::Wipercmd90()
		function Wipercmd90::GetPeriod() const
		function Wipercmd90::UpdateData(uint8_t *)
		function Wipercmd90::Reset()
		function Wipercmd90::set_wiper_cmd(Wiper_cmd_90::Wiper_cmdType)
		function Wipercmd90::set_p_wiper_cmd(uint8_t *, Wiper_cmd_90::Wiper_cmdType)
namespace canbus
	namespace gem
		function Wiperrpt91::Wiperrpt91()
		variable Wiperrpt91::ID
		function Wiperrpt91::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Wiperrpt91::output_value(const std::uint8_t *, int32_t) const
		function Wiperrpt91::commanded_value(const std::uint8_t *, int32_t) const
		function Wiperrpt91::manual_input(const std::uint8_t *, int32_t) const
namespace canbus
	namespace gem
		function Yawraterpt81::Yawraterpt81()
		variable Yawraterpt81::ID
		function Yawraterpt81::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Yawraterpt81::yaw_rate(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		namespace `anonymous-namespace'
			variable kMaxFailAttempt
			variable CHECK_RESPONSE_STEER_UNIT_FLAG
			variable CHECK_RESPONSE_SPEED_UNIT_FLAG
		function LexusController::Init(const VehicleParameter &, CanSender<::apollo::canbus::ChassisDetail>* const, MessageManager<::apollo::canbus::ChassisDetail>* const)
		function LexusController::~LexusController()
		function LexusController::Start()
		function LexusController::Stop()
		function LexusController::chassis()
		function LexusController::Emergency()
		function LexusController::EnableAutoMode()
		function LexusController::DisableAutoMode()
		function LexusController::EnableSteeringOnlyMode()
		function LexusController::EnableSpeedOnlyMode()
		function LexusController::Gear(Chassis::GearPosition)
		function LexusController::Brake(double)
		function LexusController::Throttle(double)
		function LexusController::Acceleration(double)
		function LexusController::Steer(double)
		function LexusController::Steer(double, double)
		function LexusController::SetEpbBreak(const ControlCommand &)
		function LexusController::SetBeam(const ControlCommand &)
		function LexusController::SetHorn(const ControlCommand &)
		function LexusController::SetTurningSignal(const ControlCommand &)
		function LexusController::ResetProtocol()
		function LexusController::CheckChassisError()
		function LexusController::SecurityDogThreadFunc()
		function LexusController::CheckResponse(const int32_t, bool)
		function LexusController::set_chassis_error_mask(const int32_t)
		function LexusController::chassis_error_mask()
		function LexusController::chassis_error_code()
		function LexusController::set_chassis_error_code(const Chassis::ErrorCode &)
namespace canbus
	namespace lexus
		function LexusMessageManager::LexusMessageManager()
		function LexusMessageManager::~LexusMessageManager()
namespace canbus
	function LexusVehicleFactory::CreateVehicleController()
	function LexusVehicleFactory::CreateMessageManager()
namespace canbus
	namespace lexus
		function Accelauxrpt300::Accelauxrpt300()
		variable Accelauxrpt300::ID
		function Accelauxrpt300::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Accelauxrpt300::user_interaction_is_valid(const std::uint8_t *, int32_t) const
		function Accelauxrpt300::user_interaction(const std::uint8_t *, int32_t) const
		function Accelauxrpt300::raw_pedal_force_is_valid(const std::uint8_t *, int32_t) const
		function Accelauxrpt300::raw_pedal_force(const std::uint8_t *, int32_t) const
		function Accelauxrpt300::raw_pedal_pos_is_valid(const std::uint8_t *, int32_t) const
		function Accelauxrpt300::raw_pedal_pos(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Accelcmd100::ID
		function Accelcmd100::Accelcmd100()
		function Accelcmd100::GetPeriod() const
		function Accelcmd100::UpdateData(uint8_t *)
		function Accelcmd100::Reset()
		function Accelcmd100::set_ignore_overrides(bool)
		function Accelcmd100::set_p_ignore_overrides(uint8_t *, bool)
		function Accelcmd100::set_enable(bool)
		function Accelcmd100::set_p_enable(uint8_t *, bool)
		function Accelcmd100::set_clear_override(bool)
		function Accelcmd100::set_p_clear_override(uint8_t *, bool)
		function Accelcmd100::set_clear_faults(bool)
		function Accelcmd100::set_p_clear_faults(uint8_t *, bool)
		function Accelcmd100::set_accel_cmd(double)
		function Accelcmd100::set_p_accel_cmd(uint8_t *, double)
namespace canbus
	namespace lexus
		function Accelrpt200::Accelrpt200()
		variable Accelrpt200::ID
		function Accelrpt200::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Accelrpt200::vehicle_fault(const std::uint8_t *, int32_t) const
		function Accelrpt200::pacmod_fault(const std::uint8_t *, int32_t) const
		function Accelrpt200::output_reported_fault(const std::uint8_t *, int32_t) const
		function Accelrpt200::input_output_fault(const std::uint8_t *, int32_t) const
		function Accelrpt200::command_output_fault(const std::uint8_t *, int32_t) const
		function Accelrpt200::override_active(const std::uint8_t *, int32_t) const
		function Accelrpt200::enabled(const std::uint8_t *, int32_t) const
		function Accelrpt200::manual_input(const std::uint8_t *, int32_t) const
		function Accelrpt200::commanded_value(const std::uint8_t *, int32_t) const
		function Accelrpt200::output_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Brakeauxrpt304::Brakeauxrpt304()
		variable Brakeauxrpt304::ID
		function Brakeauxrpt304::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakeauxrpt304::brake_on_off_is_valid(const std::uint8_t *, int32_t) const
		function Brakeauxrpt304::brake_on_off(const std::uint8_t *, int32_t) const
		function Brakeauxrpt304::user_interaction_is_valid(const std::uint8_t *, int32_t) const
		function Brakeauxrpt304::user_interaction(const std::uint8_t *, int32_t) const
		function Brakeauxrpt304::raw_brake_pressure_is_valid(const std::uint8_t *, int32_t) const
		function Brakeauxrpt304::raw_brake_pressure(const std::uint8_t *, int32_t) const
		function Brakeauxrpt304::raw_pedal_force_is_valid(const std::uint8_t *, int32_t) const
		function Brakeauxrpt304::raw_pedal_force(const std::uint8_t *, int32_t) const
		function Brakeauxrpt304::raw_pedal_pos_is_valid(const std::uint8_t *, int32_t) const
		function Brakeauxrpt304::raw_pedal_pos(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Brakecmd104::ID
		function Brakecmd104::Brakecmd104()
		function Brakecmd104::GetPeriod() const
		function Brakecmd104::UpdateData(uint8_t *)
		function Brakecmd104::Reset()
		function Brakecmd104::set_ignore_overrides(bool)
		function Brakecmd104::set_p_ignore_overrides(uint8_t *, bool)
		function Brakecmd104::set_enable(bool)
		function Brakecmd104::set_p_enable(uint8_t *, bool)
		function Brakecmd104::set_clear_override(bool)
		function Brakecmd104::set_p_clear_override(uint8_t *, bool)
		function Brakecmd104::set_clear_faults(bool)
		function Brakecmd104::set_p_clear_faults(uint8_t *, bool)
		function Brakecmd104::set_brake_cmd(double)
		function Brakecmd104::set_p_brake_cmd(uint8_t *, double)
namespace canbus
	namespace lexus
		function Brakemotorrpt1401::Brakemotorrpt1401()
		variable Brakemotorrpt1401::ID
		function Brakemotorrpt1401::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakemotorrpt1401::motor_current(const std::uint8_t *, int32_t) const
		function Brakemotorrpt1401::shaft_position(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Brakemotorrpt2402::Brakemotorrpt2402()
		variable Brakemotorrpt2402::ID
		function Brakemotorrpt2402::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakemotorrpt2402::encoder_temperature(const std::uint8_t *, int32_t) const
		function Brakemotorrpt2402::motor_temperature(const std::uint8_t *, int32_t) const
		function Brakemotorrpt2402::angular_speed(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Brakemotorrpt3403::Brakemotorrpt3403()
		variable Brakemotorrpt3403::ID
		function Brakemotorrpt3403::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakemotorrpt3403::torque_output(const std::uint8_t *, int32_t) const
		function Brakemotorrpt3403::torque_input(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Brakerpt204::Brakerpt204()
		variable Brakerpt204::ID
		function Brakerpt204::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakerpt204::command_output_fault(const std::uint8_t *, int32_t) const
		function Brakerpt204::vehicle_fault(const std::uint8_t *, int32_t) const
		function Brakerpt204::pacmod_fault(const std::uint8_t *, int32_t) const
		function Brakerpt204::override_active(const std::uint8_t *, int32_t) const
		function Brakerpt204::output_reported_fault(const std::uint8_t *, int32_t) const
		function Brakerpt204::input_output_fault(const std::uint8_t *, int32_t) const
		function Brakerpt204::enabled(const std::uint8_t *, int32_t) const
		function Brakerpt204::manual_input(const std::uint8_t *, int32_t) const
		function Brakerpt204::commanded_value(const std::uint8_t *, int32_t) const
		function Brakerpt204::output_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Componentrpt20::Componentrpt20()
		variable Componentrpt20::ID
		function Componentrpt20::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Componentrpt20::component_type(const std::uint8_t *, int32_t) const
		function Componentrpt20::component_func(const std::uint8_t *, int32_t) const
		function Componentrpt20::counter(const std::uint8_t *, int32_t) const
		function Componentrpt20::complement(const std::uint8_t *, int32_t) const
		function Componentrpt20::config_fault(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Cruisecontrolbuttonscmd108::ID
		function Cruisecontrolbuttonscmd108::Cruisecontrolbuttonscmd108()
		function Cruisecontrolbuttonscmd108::GetPeriod() const
		function Cruisecontrolbuttonscmd108::UpdateData(uint8_t *)
		function Cruisecontrolbuttonscmd108::Reset()
		function Cruisecontrolbuttonscmd108::set_cruise_control_button(Cruise_control_buttons_cmd_108::Cruise_control_buttonType)
		function Cruisecontrolbuttonscmd108::set_p_cruise_control_button(uint8_t *, Cruise_control_buttons_cmd_108::Cruise_control_buttonType)
		function Cruisecontrolbuttonscmd108::set_ignore_overrides(bool)
		function Cruisecontrolbuttonscmd108::set_p_ignore_overrides(uint8_t *, bool)
		function Cruisecontrolbuttonscmd108::set_clear_override(bool)
		function Cruisecontrolbuttonscmd108::set_p_clear_override(uint8_t *, bool)
		function Cruisecontrolbuttonscmd108::set_enable(bool)
		function Cruisecontrolbuttonscmd108::set_p_enable(uint8_t *, bool)
		function Cruisecontrolbuttonscmd108::set_clear_faults(bool)
		function Cruisecontrolbuttonscmd108::set_p_clear_faults(uint8_t *, bool)
namespace canbus
	namespace lexus
		function Cruisecontrolbuttonsrpt208::Cruisecontrolbuttonsrpt208()
		variable Cruisecontrolbuttonsrpt208::ID
		function Cruisecontrolbuttonsrpt208::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Cruisecontrolbuttonsrpt208::output_value(const std::uint8_t *, int32_t) const
		function Cruisecontrolbuttonsrpt208::manual_input(const std::uint8_t *, int32_t) const
		function Cruisecontrolbuttonsrpt208::commanded_value(const std::uint8_t *, int32_t) const
		function Cruisecontrolbuttonsrpt208::vehicle_fault(const std::uint8_t *, int32_t) const
		function Cruisecontrolbuttonsrpt208::pacmod_fault(const std::uint8_t *, int32_t) const
		function Cruisecontrolbuttonsrpt208::override_active(const std::uint8_t *, int32_t) const
		function Cruisecontrolbuttonsrpt208::output_reported_fault(const std::uint8_t *, int32_t) const
		function Cruisecontrolbuttonsrpt208::input_output_fault(const std::uint8_t *, int32_t) const
		function Cruisecontrolbuttonsrpt208::enabled(const std::uint8_t *, int32_t) const
		function Cruisecontrolbuttonsrpt208::command_output_fault(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Dashcontrolsleftcmd10c::Dashcontrolsleftcmd10c()
		variable Dashcontrolsleftcmd10c::ID
		function Dashcontrolsleftcmd10c::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Dashcontrolsleftcmd10c::ignore_overrides(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftcmd10c::enable(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftcmd10c::clear_override(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftcmd10c::clear_faults(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftcmd10c::dash_controls_button(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Dashcontrolsleftrpt20c::Dashcontrolsleftrpt20c()
		variable Dashcontrolsleftrpt20c::ID
		function Dashcontrolsleftrpt20c::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Dashcontrolsleftrpt20c::output_value(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftrpt20c::commanded_value(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftrpt20c::manual_input(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftrpt20c::vehicle_fault(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftrpt20c::pacmod_fault(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftrpt20c::override_active(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftrpt20c::output_reported_fault(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftrpt20c::input_output_fault(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftrpt20c::enabled(const std::uint8_t *, int32_t) const
		function Dashcontrolsleftrpt20c::command_output_fault(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Dashcontrolsrightcmd110::Dashcontrolsrightcmd110()
		variable Dashcontrolsrightcmd110::ID
		function Dashcontrolsrightcmd110::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Dashcontrolsrightcmd110::ignore_overrides(const std::uint8_t *, int32_t) const
		function Dashcontrolsrightcmd110::enable(const std::uint8_t *, int32_t) const
		function Dashcontrolsrightcmd110::clear_override(const std::uint8_t *, int32_t) const
		function Dashcontrolsrightcmd110::clear_faults(const std::uint8_t *, int32_t) const
		function Dashcontrolsrightcmd110::dash_controls_button(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Dashcontrolsrightrpt210::ID
		function Dashcontrolsrightrpt210::Dashcontrolsrightrpt210()
		function Dashcontrolsrightrpt210::GetPeriod() const
		function Dashcontrolsrightrpt210::UpdateData(uint8_t *)
		function Dashcontrolsrightrpt210::Reset()
		function Dashcontrolsrightrpt210::set_output_value(Dash_controls_right_rpt_210::Output_valueType)
		function Dashcontrolsrightrpt210::set_p_output_value(uint8_t *, Dash_controls_right_rpt_210::Output_valueType)
		function Dashcontrolsrightrpt210::set_commanded_value(Dash_controls_right_rpt_210::Commanded_valueType)
		function Dashcontrolsrightrpt210::set_p_commanded_value(uint8_t *, Dash_controls_right_rpt_210::Commanded_valueType)
		function Dashcontrolsrightrpt210::set_vehicle_fault(bool)
		function Dashcontrolsrightrpt210::set_p_vehicle_fault(uint8_t *, bool)
		function Dashcontrolsrightrpt210::set_pacmod_fault(bool)
		function Dashcontrolsrightrpt210::set_p_pacmod_fault(uint8_t *, bool)
		function Dashcontrolsrightrpt210::set_override_active(bool)
		function Dashcontrolsrightrpt210::set_p_override_active(uint8_t *, bool)
		function Dashcontrolsrightrpt210::set_output_reported_fault(bool)
		function Dashcontrolsrightrpt210::set_p_output_reported_fault(uint8_t *, bool)
		function Dashcontrolsrightrpt210::set_input_output_fault(bool)
		function Dashcontrolsrightrpt210::set_p_input_output_fault(uint8_t *, bool)
		function Dashcontrolsrightrpt210::set_enabled(bool)
		function Dashcontrolsrightrpt210::set_p_enabled(uint8_t *, bool)
		function Dashcontrolsrightrpt210::set_command_output_fault(bool)
		function Dashcontrolsrightrpt210::set_p_command_output_fault(uint8_t *, bool)
		function Dashcontrolsrightrpt210::set_manual_input(Dash_controls_right_rpt_210::Manual_inputType)
		function Dashcontrolsrightrpt210::set_p_manual_input(uint8_t *, Dash_controls_right_rpt_210::Manual_inputType)
namespace canbus
	namespace lexus
		function Datetimerpt40f::Datetimerpt40f()
		variable Datetimerpt40f::ID
		function Datetimerpt40f::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Datetimerpt40f::time_second(const std::uint8_t *, int32_t) const
		function Datetimerpt40f::time_minute(const std::uint8_t *, int32_t) const
		function Datetimerpt40f::time_hour(const std::uint8_t *, int32_t) const
		function Datetimerpt40f::date_day(const std::uint8_t *, int32_t) const
		function Datetimerpt40f::date_month(const std::uint8_t *, int32_t) const
		function Datetimerpt40f::date_year(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Detectedobjectrpt411::Detectedobjectrpt411()
		variable Detectedobjectrpt411::ID
		function Detectedobjectrpt411::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Detectedobjectrpt411::front_object_distance_high_res(const std::uint8_t *, int32_t) const
		function Detectedobjectrpt411::front_object_distance_low_res(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Doorrpt417::Doorrpt417()
		variable Doorrpt417::ID
		function Doorrpt417::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Doorrpt417::fuel_door_open_is_valid(const std::uint8_t *, int32_t) const
		function Doorrpt417::trunk_open_is_valid(const std::uint8_t *, int32_t) const
		function Doorrpt417::hood_open_is_valid(const std::uint8_t *, int32_t) const
		function Doorrpt417::rear_pass_door_open_is_valid(const std::uint8_t *, int32_t) const
		function Doorrpt417::rear_driver_door_open_is_valid(const std::uint8_t *, int32_t) const
		function Doorrpt417::pass_door_open_is_valid(const std::uint8_t *, int32_t) const
		function Doorrpt417::driver_door_open_is_valid(const std::uint8_t *, int32_t) const
		function Doorrpt417::fuel_door_open(const std::uint8_t *, int32_t) const
		function Doorrpt417::trunk_open(const std::uint8_t *, int32_t) const
		function Doorrpt417::hood_open(const std::uint8_t *, int32_t) const
		function Doorrpt417::rear_pass_door_open(const std::uint8_t *, int32_t) const
		function Doorrpt417::rear_driver_door_open(const std::uint8_t *, int32_t) const
		function Doorrpt417::pass_door_open(const std::uint8_t *, int32_t) const
		function Doorrpt417::driver_door_open(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Globalrpt10::Globalrpt10()
		variable Globalrpt10::ID
		function Globalrpt10::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Globalrpt10::config_fault_active(const std::uint8_t *, int32_t) const
		function Globalrpt10::pacmod_subsystem_timeout(const std::uint8_t *, int32_t) const
		function Globalrpt10::pacmod_system_enabled(const std::uint8_t *, int32_t) const
		function Globalrpt10::pacmod_system_override_active(const std::uint8_t *, int32_t) const
		function Globalrpt10::pacmod_system_fault_active(const std::uint8_t *, int32_t) const
		function Globalrpt10::veh_can_timeout(const std::uint8_t *, int32_t) const
		function Globalrpt10::str_can_timeout(const std::uint8_t *, int32_t) const
		function Globalrpt10::brk_can_timeout(const std::uint8_t *, int32_t) const
		function Globalrpt10::usr_can_timeout(const std::uint8_t *, int32_t) const
		function Globalrpt10::usr_can_read_errors(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Hazardlightscmd114::ID
		function Hazardlightscmd114::Hazardlightscmd114()
		function Hazardlightscmd114::GetPeriod() const
		function Hazardlightscmd114::UpdateData(uint8_t *)
		function Hazardlightscmd114::Reset()
		function Hazardlightscmd114::set_hazard_lights_cmd(bool)
		function Hazardlightscmd114::set_p_hazard_lights_cmd(uint8_t *, bool)
		function Hazardlightscmd114::set_ignore_overrides(bool)
		function Hazardlightscmd114::set_p_ignore_overrides(uint8_t *, bool)
		function Hazardlightscmd114::set_clear_override(bool)
		function Hazardlightscmd114::set_p_clear_override(uint8_t *, bool)
		function Hazardlightscmd114::set_enable(bool)
		function Hazardlightscmd114::set_p_enable(uint8_t *, bool)
		function Hazardlightscmd114::set_clear_faults(bool)
		function Hazardlightscmd114::set_p_clear_faults(uint8_t *, bool)
namespace canbus
	namespace lexus
		function Hazardlightsrpt214::Hazardlightsrpt214()
		variable Hazardlightsrpt214::ID
		function Hazardlightsrpt214::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Hazardlightsrpt214::output_value(const std::uint8_t *, int32_t) const
		function Hazardlightsrpt214::commanded_value(const std::uint8_t *, int32_t) const
		function Hazardlightsrpt214::manual_input(const std::uint8_t *, int32_t) const
		function Hazardlightsrpt214::vehicle_fault(const std::uint8_t *, int32_t) const
		function Hazardlightsrpt214::pacmod_fault(const std::uint8_t *, int32_t) const
		function Hazardlightsrpt214::override_active(const std::uint8_t *, int32_t) const
		function Hazardlightsrpt214::output_reported_fault(const std::uint8_t *, int32_t) const
		function Hazardlightsrpt214::input_output_fault(const std::uint8_t *, int32_t) const
		function Hazardlightsrpt214::enabled(const std::uint8_t *, int32_t) const
		function Hazardlightsrpt214::command_output_fault(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Headlightauxrpt318::Headlightauxrpt318()
		variable Headlightauxrpt318::ID
		function Headlightauxrpt318::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Headlightauxrpt318::headlights_mode_is_valid(const std::uint8_t *, int32_t) const
		function Headlightauxrpt318::headlights_mode(const std::uint8_t *, int32_t) const
		function Headlightauxrpt318::fog_lights_on_is_valid(const std::uint8_t *, int32_t) const
		function Headlightauxrpt318::fog_lights_on(const std::uint8_t *, int32_t) const
		function Headlightauxrpt318::headlights_on_bright_is_valid(const std::uint8_t *, int32_t) const
		function Headlightauxrpt318::headlights_on_bright(const std::uint8_t *, int32_t) const
		function Headlightauxrpt318::headlights_on_is_valid(const std::uint8_t *, int32_t) const
		function Headlightauxrpt318::headlights_on(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Headlightcmd118::ID
		function Headlightcmd118::Headlightcmd118()
		function Headlightcmd118::GetPeriod() const
		function Headlightcmd118::UpdateData(uint8_t *)
		function Headlightcmd118::Reset()
		function Headlightcmd118::set_ignore_overrides(bool)
		function Headlightcmd118::set_p_ignore_overrides(uint8_t *, bool)
		function Headlightcmd118::set_enable(bool)
		function Headlightcmd118::set_p_enable(uint8_t *, bool)
		function Headlightcmd118::set_clear_override(bool)
		function Headlightcmd118::set_p_clear_override(uint8_t *, bool)
		function Headlightcmd118::set_clear_faults(bool)
		function Headlightcmd118::set_p_clear_faults(uint8_t *, bool)
		function Headlightcmd118::set_headlight_cmd(Headlight_cmd_118::Headlight_cmdType)
		function Headlightcmd118::set_p_headlight_cmd(uint8_t *, Headlight_cmd_118::Headlight_cmdType)
namespace canbus
	namespace lexus
		function Headlightrpt218::Headlightrpt218()
		variable Headlightrpt218::ID
		function Headlightrpt218::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Headlightrpt218::vehicle_fault(const std::uint8_t *, int32_t) const
		function Headlightrpt218::pacmod_fault(const std::uint8_t *, int32_t) const
		function Headlightrpt218::override_active(const std::uint8_t *, int32_t) const
		function Headlightrpt218::output_reported_fault(const std::uint8_t *, int32_t) const
		function Headlightrpt218::input_output_fault(const std::uint8_t *, int32_t) const
		function Headlightrpt218::enabled(const std::uint8_t *, int32_t) const
		function Headlightrpt218::command_output_fault(const std::uint8_t *, int32_t) const
		function Headlightrpt218::output_value(const std::uint8_t *, int32_t) const
		function Headlightrpt218::manual_input(const std::uint8_t *, int32_t) const
		function Headlightrpt218::commanded_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Horncmd11c::ID
		function Horncmd11c::Horncmd11c()
		function Horncmd11c::GetPeriod() const
		function Horncmd11c::UpdateData(uint8_t *)
		function Horncmd11c::Reset()
		function Horncmd11c::set_ignore_overrides(bool)
		function Horncmd11c::set_p_ignore_overrides(uint8_t *, bool)
		function Horncmd11c::set_enable(bool)
		function Horncmd11c::set_p_enable(uint8_t *, bool)
		function Horncmd11c::set_clear_override(bool)
		function Horncmd11c::set_p_clear_override(uint8_t *, bool)
		function Horncmd11c::set_clear_faults(bool)
		function Horncmd11c::set_p_clear_faults(uint8_t *, bool)
		function Horncmd11c::set_horn_cmd(Horn_cmd_11c::Horn_cmdType)
		function Horncmd11c::set_p_horn_cmd(uint8_t *, Horn_cmd_11c::Horn_cmdType)
namespace canbus
	namespace lexus
		function Hornrpt21c::Hornrpt21c()
		variable Hornrpt21c::ID
		function Hornrpt21c::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Hornrpt21c::vehicle_fault(const std::uint8_t *, int32_t) const
		function Hornrpt21c::pacmod_fault(const std::uint8_t *, int32_t) const
		function Hornrpt21c::override_active(const std::uint8_t *, int32_t) const
		function Hornrpt21c::output_reported_fault(const std::uint8_t *, int32_t) const
		function Hornrpt21c::input_output_fault(const std::uint8_t *, int32_t) const
		function Hornrpt21c::enabled(const std::uint8_t *, int32_t) const
		function Hornrpt21c::command_output_fault(const std::uint8_t *, int32_t) const
		function Hornrpt21c::output_value(const std::uint8_t *, int32_t) const
		function Hornrpt21c::commanded_value(const std::uint8_t *, int32_t) const
		function Hornrpt21c::manual_input(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Interiorlightsrpt416::Interiorlightsrpt416()
		variable Interiorlightsrpt416::ID
		function Interiorlightsrpt416::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Interiorlightsrpt416::dim_level_is_valid(const std::uint8_t *, int32_t) const
		function Interiorlightsrpt416::mood_lights_on_is_valid(const std::uint8_t *, int32_t) const
		function Interiorlightsrpt416::rear_dome_lights_on_is_valid(const std::uint8_t *, int32_t) const
		function Interiorlightsrpt416::front_dome_lights_on_is_valid(const std::uint8_t *, int32_t) const
		function Interiorlightsrpt416::dim_level(const std::uint8_t *, int32_t) const
		function Interiorlightsrpt416::mood_lights_on(const std::uint8_t *, int32_t) const
		function Interiorlightsrpt416::rear_dome_lights_on(const std::uint8_t *, int32_t) const
		function Interiorlightsrpt416::front_dome_lights_on(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Latlonheadingrpt40e::Latlonheadingrpt40e()
		variable Latlonheadingrpt40e::ID
		function Latlonheadingrpt40e::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Latlonheadingrpt40e::heading(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt40e::longitude_seconds(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt40e::longitude_minutes(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt40e::longitude_degrees(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt40e::latitude_seconds(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt40e::latitude_minutes(const std::uint8_t *, int32_t) const
		function Latlonheadingrpt40e::latitude_degrees(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Mediacontrolscmd120::Mediacontrolscmd120()
		variable Mediacontrolscmd120::ID
		function Mediacontrolscmd120::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Mediacontrolscmd120::media_controls_cmd(const std::uint8_t *, int32_t) const
		function Mediacontrolscmd120::ignore_overrides(const std::uint8_t *, int32_t) const
		function Mediacontrolscmd120::clear_override(const std::uint8_t *, int32_t) const
		function Mediacontrolscmd120::clear_faults(const std::uint8_t *, int32_t) const
		function Mediacontrolscmd120::enable(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Mediacontrolsrpt220::Mediacontrolsrpt220()
		variable Mediacontrolsrpt220::ID
		function Mediacontrolsrpt220::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Mediacontrolsrpt220::output_value(const std::uint8_t *, int32_t) const
		function Mediacontrolsrpt220::commanded_value(const std::uint8_t *, int32_t) const
		function Mediacontrolsrpt220::manual_input(const std::uint8_t *, int32_t) const
		function Mediacontrolsrpt220::vehicle_fault(const std::uint8_t *, int32_t) const
		function Mediacontrolsrpt220::pacmod_fault(const std::uint8_t *, int32_t) const
		function Mediacontrolsrpt220::override_active(const std::uint8_t *, int32_t) const
		function Mediacontrolsrpt220::output_reported_fault(const std::uint8_t *, int32_t) const
		function Mediacontrolsrpt220::input_output_fault(const std::uint8_t *, int32_t) const
		function Mediacontrolsrpt220::enabled(const std::uint8_t *, int32_t) const
		function Mediacontrolsrpt220::command_output_fault(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Occupancyrpt415::Occupancyrpt415()
		variable Occupancyrpt415::ID
		function Occupancyrpt415::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Occupancyrpt415::rear_seatbelt_buckled_is_valid(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::pass_seatbelt_buckled_is_valid(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::driver_seatbelt_buckled_is_valid(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::rear_seat_occupied_is_valid(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::pass_seat_occupied_is_valid(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::driver_seat_occupied_is_valid(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::rear_seatbelt_buckled(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::pass_seatbelt_buckled(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::driver_seatbelt_buckled(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::rear_seat_occupied(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::pass_seat_occupied(const std::uint8_t *, int32_t) const
		function Occupancyrpt415::driver_seat_occupied(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Parkingbrakecmd124::ID
		function Parkingbrakecmd124::Parkingbrakecmd124()
		function Parkingbrakecmd124::GetPeriod() const
		function Parkingbrakecmd124::UpdateData(uint8_t *)
		function Parkingbrakecmd124::Reset()
		function Parkingbrakecmd124::set_ignore_overrides(bool)
		function Parkingbrakecmd124::set_p_ignore_overrides(uint8_t *, bool)
		function Parkingbrakecmd124::set_enable(bool)
		function Parkingbrakecmd124::set_p_enable(uint8_t *, bool)
		function Parkingbrakecmd124::set_clear_override(bool)
		function Parkingbrakecmd124::set_p_clear_override(uint8_t *, bool)
		function Parkingbrakecmd124::set_parking_brake_cmd(bool)
		function Parkingbrakecmd124::set_p_parking_brake_cmd(uint8_t *, bool)
		function Parkingbrakecmd124::set_clear_faults(bool)
		function Parkingbrakecmd124::set_p_clear_faults(uint8_t *, bool)
namespace canbus
	namespace lexus
		function Parkingbrakerpt224::Parkingbrakerpt224()
		variable Parkingbrakerpt224::ID
		function Parkingbrakerpt224::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Parkingbrakerpt224::vehicle_fault(const std::uint8_t *, int32_t) const
		function Parkingbrakerpt224::pacmod_fault(const std::uint8_t *, int32_t) const
		function Parkingbrakerpt224::override_active(const std::uint8_t *, int32_t) const
		function Parkingbrakerpt224::output_reported_fault(const std::uint8_t *, int32_t) const
		function Parkingbrakerpt224::input_output_fault(const std::uint8_t *, int32_t) const
		function Parkingbrakerpt224::enabled(const std::uint8_t *, int32_t) const
		function Parkingbrakerpt224::command_output_fault(const std::uint8_t *, int32_t) const
		function Parkingbrakerpt224::output_value(const std::uint8_t *, int32_t) const
		function Parkingbrakerpt224::commanded_value(const std::uint8_t *, int32_t) const
		function Parkingbrakerpt224::manual_input(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Rearlightsrpt418::Rearlightsrpt418()
		variable Rearlightsrpt418::ID
		function Rearlightsrpt418::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Rearlightsrpt418::reverse_lights_on_is_valid(const std::uint8_t *, int32_t) const
		function Rearlightsrpt418::brake_lights_on_is_valid(const std::uint8_t *, int32_t) const
		function Rearlightsrpt418::reverse_lights_on(const std::uint8_t *, int32_t) const
		function Rearlightsrpt418::brake_lights_on(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Shiftauxrpt328::Shiftauxrpt328()
		variable Shiftauxrpt328::ID
		function Shiftauxrpt328::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Shiftauxrpt328::speed_interlock_active_is_valid(const std::uint8_t *, int32_t) const
		function Shiftauxrpt328::speed_interlock_active(const std::uint8_t *, int32_t) const
		function Shiftauxrpt328::brake_interlock_active_is_valid(const std::uint8_t *, int32_t) const
		function Shiftauxrpt328::brake_interlock_active(const std::uint8_t *, int32_t) const
		function Shiftauxrpt328::stay_in_neutral_mode_is_valid(const std::uint8_t *, int32_t) const
		function Shiftauxrpt328::stay_in_neutral_mode(const std::uint8_t *, int32_t) const
		function Shiftauxrpt328::between_gears_is_valid(const std::uint8_t *, int32_t) const
		function Shiftauxrpt328::between_gears(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Shiftcmd128::ID
		function Shiftcmd128::Shiftcmd128()
		function Shiftcmd128::GetPeriod() const
		function Shiftcmd128::UpdateData(uint8_t *)
		function Shiftcmd128::Reset()
		function Shiftcmd128::set_ignore_overrides(bool)
		function Shiftcmd128::set_p_ignore_overrides(uint8_t *, bool)
		function Shiftcmd128::set_enable(bool)
		function Shiftcmd128::set_p_enable(uint8_t *, bool)
		function Shiftcmd128::set_clear_override(bool)
		function Shiftcmd128::set_p_clear_override(uint8_t *, bool)
		function Shiftcmd128::set_clear_faults(bool)
		function Shiftcmd128::set_p_clear_faults(uint8_t *, bool)
		function Shiftcmd128::set_shift_cmd(Shift_cmd_128::Shift_cmdType)
		function Shiftcmd128::set_p_shift_cmd(uint8_t *, Shift_cmd_128::Shift_cmdType)
namespace canbus
	namespace lexus
		function Shiftrpt228::Shiftrpt228()
		variable Shiftrpt228::ID
		function Shiftrpt228::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Shiftrpt228::vehicle_fault(const std::uint8_t *, int32_t) const
		function Shiftrpt228::pacmod_fault(const std::uint8_t *, int32_t) const
		function Shiftrpt228::override_active(const std::uint8_t *, int32_t) const
		function Shiftrpt228::output_reported_fault(const std::uint8_t *, int32_t) const
		function Shiftrpt228::input_output_fault(const std::uint8_t *, int32_t) const
		function Shiftrpt228::enabled(const std::uint8_t *, int32_t) const
		function Shiftrpt228::command_output_fault(const std::uint8_t *, int32_t) const
		function Shiftrpt228::manual_input(const std::uint8_t *, int32_t) const
		function Shiftrpt228::commanded_value(const std::uint8_t *, int32_t) const
		function Shiftrpt228::output_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Steeringauxrpt32c::Steeringauxrpt32c()
		variable Steeringauxrpt32c::ID
		function Steeringauxrpt32c::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steeringauxrpt32c::user_interaction_is_valid(const std::uint8_t *, int32_t) const
		function Steeringauxrpt32c::user_interaction(const std::uint8_t *, int32_t) const
		function Steeringauxrpt32c::rotation_rate_is_valid(const std::uint8_t *, int32_t) const
		function Steeringauxrpt32c::rotation_rate(const std::uint8_t *, int32_t) const
		function Steeringauxrpt32c::raw_torque_is_valid(const std::uint8_t *, int32_t) const
		function Steeringauxrpt32c::raw_torque(const std::uint8_t *, int32_t) const
		function Steeringauxrpt32c::raw_position_is_valid(const std::uint8_t *, int32_t) const
		function Steeringauxrpt32c::raw_position(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Steeringcmd12c::ID
		function Steeringcmd12c::Steeringcmd12c()
		function Steeringcmd12c::GetPeriod() const
		function Steeringcmd12c::UpdateData(uint8_t *)
		function Steeringcmd12c::Reset()
		function Steeringcmd12c::set_ignore_overrides(bool)
		function Steeringcmd12c::set_p_ignore_overrides(uint8_t *, bool)
		function Steeringcmd12c::set_enable(bool)
		function Steeringcmd12c::set_p_enable(uint8_t *, bool)
		function Steeringcmd12c::set_clear_override(bool)
		function Steeringcmd12c::set_p_clear_override(uint8_t *, bool)
		function Steeringcmd12c::set_clear_faults(bool)
		function Steeringcmd12c::set_p_clear_faults(uint8_t *, bool)
		function Steeringcmd12c::set_position(double)
		function Steeringcmd12c::set_p_position(uint8_t *, double)
		function Steeringcmd12c::set_rotation_rate(double)
		function Steeringcmd12c::set_p_rotation_rate(uint8_t *, double)
namespace canbus
	namespace lexus
		function Steeringmotorrpt1404::Steeringmotorrpt1404()
		variable Steeringmotorrpt1404::ID
		function Steeringmotorrpt1404::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steeringmotorrpt1404::motor_current(const std::uint8_t *, int32_t) const
		function Steeringmotorrpt1404::shaft_position(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Steeringmotorrpt2405::Steeringmotorrpt2405()
		variable Steeringmotorrpt2405::ID
		function Steeringmotorrpt2405::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steeringmotorrpt2405::encoder_temperature(const std::uint8_t *, int32_t) const
		function Steeringmotorrpt2405::motor_temperature(const std::uint8_t *, int32_t) const
		function Steeringmotorrpt2405::angular_speed(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Steeringmotorrpt3406::Steeringmotorrpt3406()
		variable Steeringmotorrpt3406::ID
		function Steeringmotorrpt3406::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steeringmotorrpt3406::torque_output(const std::uint8_t *, int32_t) const
		function Steeringmotorrpt3406::torque_input(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Steeringrpt22c::Steeringrpt22c()
		variable Steeringrpt22c::ID
		function Steeringrpt22c::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steeringrpt22c::vehicle_fault(const std::uint8_t *, int32_t) const
		function Steeringrpt22c::pacmod_fault(const std::uint8_t *, int32_t) const
		function Steeringrpt22c::override_active(const std::uint8_t *, int32_t) const
		function Steeringrpt22c::output_reported_fault(const std::uint8_t *, int32_t) const
		function Steeringrpt22c::input_output_fault(const std::uint8_t *, int32_t) const
		function Steeringrpt22c::enabled(const std::uint8_t *, int32_t) const
		function Steeringrpt22c::command_output_fault(const std::uint8_t *, int32_t) const
		function Steeringrpt22c::manual_input(const std::uint8_t *, int32_t) const
		function Steeringrpt22c::commanded_value(const std::uint8_t *, int32_t) const
		function Steeringrpt22c::output_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Turnauxrpt330::Turnauxrpt330()
		variable Turnauxrpt330::ID
		function Turnauxrpt330::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Turnauxrpt330::pass_blinker_bulb_on_is_valid(const std::uint8_t *, int32_t) const
		function Turnauxrpt330::pass_blinker_bulb_on(const std::uint8_t *, int32_t) const
		function Turnauxrpt330::driver_blinker_bulb_on_is_valid(const std::uint8_t *, int32_t) const
		function Turnauxrpt330::driver_blinker_bulb_on(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Turncmd130::ID
		function Turncmd130::Turncmd130()
		function Turncmd130::GetPeriod() const
		function Turncmd130::UpdateData(uint8_t *)
		function Turncmd130::Reset()
		function Turncmd130::set_ignore_overrides(bool)
		function Turncmd130::set_p_ignore_overrides(uint8_t *, bool)
		function Turncmd130::set_enable(bool)
		function Turncmd130::set_p_enable(uint8_t *, bool)
		function Turncmd130::set_clear_override(bool)
		function Turncmd130::set_p_clear_override(uint8_t *, bool)
		function Turncmd130::set_clear_faults(bool)
		function Turncmd130::set_p_clear_faults(uint8_t *, bool)
		function Turncmd130::set_turn_signal_cmd(Turn_cmd_130::Turn_signal_cmdType)
		function Turncmd130::set_p_turn_signal_cmd(uint8_t *, Turn_cmd_130::Turn_signal_cmdType)
namespace canbus
	namespace lexus
		function Turnrpt230::Turnrpt230()
		variable Turnrpt230::ID
		function Turnrpt230::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Turnrpt230::vehicle_fault(const std::uint8_t *, int32_t) const
		function Turnrpt230::pacmod_fault(const std::uint8_t *, int32_t) const
		function Turnrpt230::override_active(const std::uint8_t *, int32_t) const
		function Turnrpt230::output_reported_fault(const std::uint8_t *, int32_t) const
		function Turnrpt230::input_output_fault(const std::uint8_t *, int32_t) const
		function Turnrpt230::enabled(const std::uint8_t *, int32_t) const
		function Turnrpt230::command_output_fault(const std::uint8_t *, int32_t) const
		function Turnrpt230::manual_input(const std::uint8_t *, int32_t) const
		function Turnrpt230::commanded_value(const std::uint8_t *, int32_t) const
		function Turnrpt230::output_value(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Vehdynamicsrpt413::Vehdynamicsrpt413()
		variable Vehdynamicsrpt413::ID
		function Vehdynamicsrpt413::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vehdynamicsrpt413::veh_g_forces(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Vehspecificrpt1412::Vehspecificrpt1412()
		variable Vehspecificrpt1412::ID
		function Vehspecificrpt1412::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vehspecificrpt1412::shift_pos_2(const std::uint8_t *, int32_t) const
		function Vehspecificrpt1412::shift_pos_1(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Vehiclespeedrpt400::Vehiclespeedrpt400()
		variable Vehiclespeedrpt400::ID
		function Vehiclespeedrpt400::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vehiclespeedrpt400::vehicle_speed(const std::uint8_t *, int32_t) const
		function Vehiclespeedrpt400::vehicle_speed_valid(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Vinrpt414::Vinrpt414()
		variable Vinrpt414::ID
		function Vinrpt414::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vinrpt414::veh_serial(const std::uint8_t *, int32_t) const
		function Vinrpt414::veh_my_code(const std::uint8_t *, int32_t) const
		function Vinrpt414::veh_mfg_code(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Wheelspeedrpt407::Wheelspeedrpt407()
		variable Wheelspeedrpt407::ID
		function Wheelspeedrpt407::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Wheelspeedrpt407::wheel_spd_rear_right(const std::uint8_t *, int32_t) const
		function Wheelspeedrpt407::wheel_spd_rear_left(const std::uint8_t *, int32_t) const
		function Wheelspeedrpt407::wheel_spd_front_right(const std::uint8_t *, int32_t) const
		function Wheelspeedrpt407::wheel_spd_front_left(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Wiperauxrpt334::Wiperauxrpt334()
		variable Wiperauxrpt334::ID
		function Wiperauxrpt334::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Wiperauxrpt334::spray_empty_is_valid(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::spray_empty(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::spray_near_empty_is_valid(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::spray_near_empty(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::rear_spraying_is_valid(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::rear_spraying(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::rear_wiping_is_valid(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::rear_wiping(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::front_spraying_is_valid(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::front_spraying(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::front_wiping_is_valid(const std::uint8_t *, int32_t) const
		function Wiperauxrpt334::front_wiping(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		variable Wipercmd134::ID
		function Wipercmd134::Wipercmd134()
		function Wipercmd134::GetPeriod() const
		function Wipercmd134::UpdateData(uint8_t *)
		function Wipercmd134::Reset()
		function Wipercmd134::set_ignore_overrides(bool)
		function Wipercmd134::set_p_ignore_overrides(uint8_t *, bool)
		function Wipercmd134::set_enable(bool)
		function Wipercmd134::set_p_enable(uint8_t *, bool)
		function Wipercmd134::set_clear_override(bool)
		function Wipercmd134::set_p_clear_override(uint8_t *, bool)
		function Wipercmd134::set_wiper_cmd(Wiper_cmd_134::Wiper_cmdType)
		function Wipercmd134::set_p_wiper_cmd(uint8_t *, Wiper_cmd_134::Wiper_cmdType)
		function Wipercmd134::set_clear_faults(bool)
		function Wipercmd134::set_p_clear_faults(uint8_t *, bool)
namespace canbus
	namespace lexus
		function Wiperrpt234::Wiperrpt234()
		variable Wiperrpt234::ID
		function Wiperrpt234::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Wiperrpt234::vehicle_fault(const std::uint8_t *, int32_t) const
		function Wiperrpt234::pacmod_fault(const std::uint8_t *, int32_t) const
		function Wiperrpt234::override_active(const std::uint8_t *, int32_t) const
		function Wiperrpt234::output_reported_fault(const std::uint8_t *, int32_t) const
		function Wiperrpt234::input_output_fault(const std::uint8_t *, int32_t) const
		function Wiperrpt234::enabled(const std::uint8_t *, int32_t) const
		function Wiperrpt234::command_output_fault(const std::uint8_t *, int32_t) const
		function Wiperrpt234::output_value(const std::uint8_t *, int32_t) const
		function Wiperrpt234::commanded_value(const std::uint8_t *, int32_t) const
		function Wiperrpt234::manual_input(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lexus
		function Yawraterpt40d::Yawraterpt40d()
		variable Yawraterpt40d::ID
		function Yawraterpt40d::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Yawraterpt40d::yaw_rate(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		namespace `anonymous-namespace'
			variable kMaxFailAttempt
			variable CHECK_RESPONSE_STEER_UNIT_FLAG
			variable CHECK_RESPONSE_SPEED_UNIT_FLAG
		function LincolnController::Init(const VehicleParameter &, CanSender<::apollo::canbus::ChassisDetail>* const, MessageManager<::apollo::canbus::ChassisDetail>* const)
		function LincolnController::Start()
		function LincolnController::Stop()
		function LincolnController::chassis()
		function LincolnController::Emergency()
		function LincolnController::EnableAutoMode()
		function LincolnController::DisableAutoMode()
		function LincolnController::EnableSteeringOnlyMode()
		function LincolnController::EnableSpeedOnlyMode()
		function LincolnController::Gear(Chassis::GearPosition)
		function LincolnController::Brake(double)
		function LincolnController::Throttle(double)
		function LincolnController::Acceleration(double)
		function LincolnController::Steer(double)
		function LincolnController::Steer(double, double)
		function LincolnController::SetEpbBreak(const ControlCommand &)
		function LincolnController::SetBeam(const ControlCommand &)
		function LincolnController::SetHorn(const ControlCommand &)
		function LincolnController::SetTurningSignal(const ControlCommand &)
		function LincolnController::ResetProtocol()
		function LincolnController::CheckChassisError()
		function LincolnController::SecurityDogThreadFunc()
		function LincolnController::CheckResponse(const int32_t, bool)
		function LincolnController::set_chassis_error_mask(const int32_t)
		function LincolnController::chassis_error_mask()
		function LincolnController::chassis_error_code()
		function LincolnController::set_chassis_error_code(const Chassis::ErrorCode &)
		function LincolnController::CheckSafetyError(const::apollo::canbus::ChassisDetail &)
namespace canbus
	namespace lincoln
		function LincolnMessageManager::LincolnMessageManager()
		function LincolnMessageManager::~LincolnMessageManager()
namespace canbus
	function LincolnVehicleFactory::CreateVehicleController()
	function LincolnVehicleFactory::CreateMessageManager()
namespace canbus
	namespace lincoln
		variable Accel6b::ID
		function Accel6b::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Accel6b::lateral_acceleration(const std::uint8_t *, const int32_t) const
		function Accel6b::longitudinal_acceleration(const std::uint8_t *, const int32_t) const
		function Accel6b::vertical_acceleration(const std::uint8_t *, const int32_t) const
		function Accel6b::parse_two_frames(const std::uint8_t, const std::uint8_t) const
namespace canbus
	namespace lincoln
		variable Brake60::ID
		function Brake60::GetPeriod() const
		function Brake60::UpdateData(uint8_t *)
		function Brake60::Reset()
		function Brake60::set_pedal(double)
		function Brake60::enable_boo_cmd()
		function Brake60::disable_boo_cmd()
		function Brake60::set_enable()
		function Brake60::set_disable()
		function Brake60::set_pedal_p(uint8_t *, double)
		function Brake60::set_boo_cmd_p(uint8_t *, bool)
		function Brake60::set_enable_p(uint8_t *, bool)
		function Brake60::set_clear_driver_override_flag_p(uint8_t *, bool)
		function Brake60::set_watchdog_counter_p(uint8_t *, int32_t)
namespace canbus
	namespace lincoln
		variable Brake61::ID
		function Brake61::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brake61::pedal_input(const std::uint8_t *, int32_t) const
		function Brake61::pedal_cmd(const std::uint8_t *, int32_t) const
		function Brake61::pedal_output(const std::uint8_t *, int32_t) const
		function Brake61::parse_two_frames(const std::uint8_t, const std::uint8_t) const
		function Brake61::boo_input(const std::uint8_t *, int32_t) const
		function Brake61::boo_cmd(const std::uint8_t *, int32_t) const
		function Brake61::boo_output(const std::uint8_t *, int32_t) const
		function Brake61::is_watchdog_counter_applying_brakes(const std::uint8_t *, int32_t) const
		function Brake61::watchdog_counter_source(const std::uint8_t *, int32_t) const
		function Brake61::is_enabled(const std::uint8_t *, int32_t) const
		function Brake61::is_driver_override(const std::uint8_t *, int32_t) const
		function Brake61::is_driver_activity(const std::uint8_t *, int32_t) const
		function Brake61::is_watchdog_counter_fault(const std::uint8_t *, int32_t) const
		function Brake61::is_channel_1_fault(const std::uint8_t *, int32_t) const
		function Brake61::is_channel_2_fault(const std::uint8_t *, int32_t) const
		function Brake61::is_boo_switch_fault(const std::uint8_t *, int32_t) const
		function Brake61::is_connector_fault(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Brakeinfo74::ID
		function Brakeinfo74::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Brakeinfo74::braking_torque_request(const std::uint8_t *, int32_t) const
		function Brakeinfo74::hill_start_assist_status(const std::uint8_t *, int32_t) const
		function Brakeinfo74::is_vehicle_stationary(const std::uint8_t *, int32_t) const
		function Brakeinfo74::braking_torque_actual(const std::uint8_t *, int32_t) const
		function Brakeinfo74::hill_start_assist_mode(const std::uint8_t *, int32_t) const
		function Brakeinfo74::parking_brake_status(const std::uint8_t *, int32_t) const
		function Brakeinfo74::wheel_torque_actual(const std::uint8_t *, int32_t) const
		function Brakeinfo74::acceleration_over_ground(const std::uint8_t *, int32_t) const
		function Brakeinfo74::is_abs_active(const std::uint8_t *, int32_t) const
		function Brakeinfo74::is_abs_enabled(const std::uint8_t *, int32_t) const
		function Brakeinfo74::is_stability_control_active(const std::uint8_t *, int32_t) const
		function Brakeinfo74::is_stability_control_enabled(const std::uint8_t *, int32_t) const
		function Brakeinfo74::is_traction_control_active(const std::uint8_t *, int32_t) const
		function Brakeinfo74::is_traction_control_enabled(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Fuellevel72::ID
		function Fuellevel72::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Fuellevel72::fuel_level(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Gear66::ID
		function Gear66::GetPeriod() const
		function Gear66::UpdateData(uint8_t *)
		function Gear66::Reset()
		function Gear66::set_gear_none()
		function Gear66::set_gear_park()
		function Gear66::set_gear_reverse()
		function Gear66::set_gear_neutral()
		function Gear66::set_gear_drive()
		function Gear66::set_gear_low()
		function Gear66::set_gear_p(uint8_t *, int32_t)
		function Gear66::set_clear_driver_override_flag_p(uint8_t *)
namespace canbus
	namespace lincoln
		variable Gear67::ID
		function Gear67::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Gear67::gear_state(const std::uint8_t *, int32_t) const
		function Gear67::is_driver_override(const std::uint8_t *, int32_t) const
		function Gear67::reported_gear_cmd(const std::uint8_t *, int32_t) const
		function Gear67::is_canbus_fault(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Gps6d::ID
		function Gps6d::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Gps6d::latitude(const std::uint8_t *, int32_t) const
		function Gps6d::longitude(const std::uint8_t *, int32_t) const
		function Gps6d::is_valid(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Gps6e::ID
		function Gps6e::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Gps6e::year(const std::uint8_t *, int32_t) const
		function Gps6e::month(const std::uint8_t *, int32_t) const
		function Gps6e::day(const std::uint8_t *, int32_t) const
		function Gps6e::hours(const std::uint8_t *, int32_t) const
		function Gps6e::minutes(const std::uint8_t *, int32_t) const
		function Gps6e::seconds(const std::uint8_t *, int32_t) const
		function Gps6e::compass_direction(const std::uint8_t *, int32_t) const
		function Gps6e::pdop(const std::uint8_t *, int32_t) const
		function Gps6e::is_gps_fault(const std::uint8_t *, int32_t) const
		function Gps6e::is_inferred_position(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Gps6f::ID
		function Gps6f::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Gps6f::altitude(const std::uint8_t *, int32_t) const
		function Gps6f::heading(const std::uint8_t *, int32_t) const
		function Gps6f::speed(const std::uint8_t *, int32_t) const
		function Gps6f::hdop(const std::uint8_t *, int32_t) const
		function Gps6f::vdop(const std::uint8_t *, int32_t) const
		function Gps6f::fix_quality(const std::uint8_t *, int32_t) const
		function Gps6f::num_satellites(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Gyro6c::ID
		function Gyro6c::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Gyro6c::roll_rate(const std::uint8_t *, int32_t) const
		function Gyro6c::yaw_rate(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		namespace `anonymous-namespace'
			function ByteTo<T>(const Byte &)
			function ByteToString(const Byte &)
		variable License7e::ID
		function License7e::License7e()
		function License7e::Parse(const std::uint8_t *, int, ChassisDetail *) const
		function License7e::mux(const std::uint8_t *, int) const
		function License7e::is_ready(const std::uint8_t *, int) const
		function License7e::is_trial(const std::uint8_t *, int) const
		function License7e::is_expired(const std::uint8_t *, int) const
		function License7e::is_feat_base_enabled(const std::uint8_t *, int) const
		function License7e::date0(const std::uint8_t *, int) const
		function License7e::date6(const std::uint8_t *, int) const
		function License7e::mac0(const std::uint8_t *, int) const
		function License7e::vin00(const std::uint8_t *, int) const
		function License7e::vin06(const std::uint8_t *, int) const
		function License7e::vin12(const std::uint8_t *, int) const
		function License7e::is_feat_base_trial(const std::uint8_t *, int) const
		function License7e::date1(const std::uint8_t *, int) const
		function License7e::date7(const std::uint8_t *, int) const
		function License7e::mac1(const std::uint8_t *, int) const
		function License7e::vin01(const std::uint8_t *, int) const
		function License7e::vin07(const std::uint8_t *, int32_t) const
		function License7e::vin13(const std::uint8_t *, int) const
		function License7e::date2(const std::uint8_t *, int) const
		function License7e::date8(const std::uint8_t *, int) const
		function License7e::mac2(const std::uint8_t *, int) const
		function License7e::vin02(const std::uint8_t *, int) const
		function License7e::vin08(const std::uint8_t *, int) const
		function License7e::vin14(const std::uint8_t *, int) const
		function License7e::feat_base_trials_used(const std::uint8_t *, int) const
		function License7e::date3(const std::uint8_t *, int) const
		function License7e::date9(const std::uint8_t *, int) const
		function License7e::mac3(const std::uint8_t *, int) const
		function License7e::vin03(const std::uint8_t *, int) const
		function License7e::vin09(const std::uint8_t *, int) const
		function License7e::vin15(const std::uint8_t *, int) const
		function License7e::date4(const std::uint8_t *, int) const
		function License7e::mac4(const std::uint8_t *, int) const
		function License7e::vin04(const std::uint8_t *, int) const
		function License7e::vin10(const std::uint8_t *, int) const
		function License7e::vin16(const std::uint8_t *, int) const
		function License7e::feat_base_trials_remaining(const std::uint8_t *, int) const
		function License7e::date5(const std::uint8_t *, int) const
		function License7e::mac5(const std::uint8_t *, int) const
		function License7e::vin05(const std::uint8_t *, int) const
		function License7e::vin11(const std::uint8_t *, int) const
namespace canbus
	namespace lincoln
		variable Misc69::ID
		function Misc69::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Misc69::turn_signal_status(const std::uint8_t *, int32_t) const
		function Misc69::high_beam_status(const std::uint8_t *, int32_t) const
		function Misc69::wiper_status(const std::uint8_t *, int32_t) const
		function Misc69::ambient_light_status(const std::uint8_t *, int32_t) const
		function Misc69::is_acc_on_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_acc_off_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_acc_resume_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_acc_cancel_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_acc_on_or_off_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_acc_resume_or_cancel_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_acc_increment_set_speed_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_acc_decrement_set_speed_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_acc_increment_following_gap_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_acc_decrement_following_gap_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_lka_on_or_off_pressed(const std::uint8_t *, int32_t) const
		function Misc69::is_canbus_fault(const std::uint8_t *, int32_t) const
		function Misc69::is_driver_door_open(const std::uint8_t *, int32_t) const
		function Misc69::is_passenger_door_open(const std::uint8_t *, int32_t) const
		function Misc69::is_rear_left_door_open(const std::uint8_t *, int32_t) const
		function Misc69::is_rear_right_door_open(const std::uint8_t *, int32_t) const
		function Misc69::is_hood_open(const std::uint8_t *, int32_t) const
		function Misc69::is_trunk_open(const std::uint8_t *, int32_t) const
		function Misc69::is_passenger_detected(const std::uint8_t *, int32_t) const
		function Misc69::is_passenger_airbag_enabled(const std::uint8_t *, int32_t) const
		function Misc69::is_driver_belt_buckled(const std::uint8_t *, int32_t) const
		function Misc69::is_passenger_belt_buckled(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Steering64::ID
		function Steering64::GetPeriod() const
		function Steering64::UpdateData(uint8_t *)
		function Steering64::Reset()
		function Steering64::set_steering_angle(double)
		function Steering64::set_enable()
		function Steering64::set_disable()
		function Steering64::set_steering_angle_speed(double)
		function Steering64::set_steering_angle_p(uint8_t *, double)
		function Steering64::set_enable_p(uint8_t *, bool)
		function Steering64::set_clear_driver_override_flag_p(uint8_t *, bool)
		function Steering64::set_ignore_driver_override_p(uint8_t *, bool)
		function Steering64::set_steering_angle_speed_p(uint8_t *, double)
		function Steering64::set_watchdog_counter_p(uint8_t *, int32_t)
		function Steering64::set_disable_audible_warning_p(uint8_t *, bool)
namespace canbus
	namespace lincoln
		variable Steering65::ID
		function Steering65::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Steering65::Parse(const std::uint8_t *, int32_t, const timeval &, ChassisDetail *) const
		function Steering65::steering_angle(const std::uint8_t *, int32_t) const
		function Steering65::reported_steering_angle_cmd(const std::uint8_t *, int32_t) const
		function Steering65::vehicle_speed(const std::uint8_t *, int32_t) const
		function Steering65::epas_torque(const std::uint8_t *, int32_t) const
		function Steering65::is_enabled(const std::uint8_t *, int32_t) const
		function Steering65::is_driver_override(const std::uint8_t *, int32_t) const
		function Steering65::is_driver_activity(const std::uint8_t *, int32_t) const
		function Steering65::is_watchdog_counter_fault(const std::uint8_t *, int32_t) const
		function Steering65::is_channel_1_fault(const std::uint8_t *, int32_t) const
		function Steering65::is_channel_2_fault(const std::uint8_t *, int32_t) const
		function Steering65::is_calibration_fault(const std::uint8_t *, int32_t) const
		function Steering65::is_connector_fault(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Surround73::ID
		function Surround73::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Surround73::is_cross_traffic_alert_left(const std::uint8_t *, int32_t) const
		function Surround73::is_cross_traffic_alert_left_enabled(const std::uint8_t *, int32_t) const
		function Surround73::is_blind_spot_left_alert(const std::uint8_t *, int32_t) const
		function Surround73::is_blind_spot_left_alert_enabled(const std::uint8_t *, int32_t) const
		function Surround73::is_cross_traffic_alert_right(const std::uint8_t *, int32_t) const
		function Surround73::is_cross_traffic_alert_right_enabled(const std::uint8_t *, int32_t) const
		function Surround73::is_blind_spot_right_alert(const std::uint8_t *, int32_t) const
		function Surround73::is_blind_spot_right_alert_enabled(const std::uint8_t *, int32_t) const
		function Surround73::sonar00(const std::uint8_t *, int32_t) const
		function Surround73::sonar01(const std::uint8_t *, int32_t) const
		function Surround73::sonar02(const std::uint8_t *, int32_t) const
		function Surround73::sonar03(const std::uint8_t *, int32_t) const
		function Surround73::sonar04(const std::uint8_t *, int32_t) const
		function Surround73::sonar05(const std::uint8_t *, int32_t) const
		function Surround73::sonar06(const std::uint8_t *, int32_t) const
		function Surround73::sonar07(const std::uint8_t *, int32_t) const
		function Surround73::sonar08(const std::uint8_t *, int32_t) const
		function Surround73::sonar09(const std::uint8_t *, int32_t) const
		function Surround73::sonar10(const std::uint8_t *, int32_t) const
		function Surround73::sonar11(const std::uint8_t *, int32_t) const
		function Surround73::sonar_enabled(const std::uint8_t *, int32_t) const
		function Surround73::sonar_fault(const std::uint8_t *, int32_t) const
		function Surround73::sonar_range(const std::int32_t) const
		function Surround73::sonars(const std::uint8_t *, std::uint8_t, int32_t) const
namespace canbus
	namespace lincoln
		variable Throttle62::ID
		function Throttle62::GetPeriod() const
		function Throttle62::UpdateData(uint8_t *)
		function Throttle62::Reset()
		function Throttle62::set_pedal(double)
		function Throttle62::set_enable()
		function Throttle62::set_disable()
		function Throttle62::set_pedal_p(uint8_t *, double)
		function Throttle62::set_enable_p(uint8_t *, bool)
		function Throttle62::set_clear_driver_override_flag_p(uint8_t *, bool)
		function Throttle62::set_ignore_driver_override_p(uint8_t *, bool)
		function Throttle62::set_watchdog_counter_p(uint8_t *, int32_t)
namespace canbus
	namespace lincoln
		variable Throttle63::ID
		function Throttle63::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Throttle63::pedal_input(const std::uint8_t *, int32_t) const
		function Throttle63::pedal_cmd(const std::uint8_t *, int32_t) const
		function Throttle63::pedal_output(const std::uint8_t *, int32_t) const
		function Throttle63::watchdog_counter_source(const std::uint8_t *, int32_t) const
		function Throttle63::is_enabled(const std::uint8_t *, int32_t) const
		function Throttle63::is_driver_override(const std::uint8_t *, int32_t) const
		function Throttle63::is_driver_activity(const std::uint8_t *, int32_t) const
		function Throttle63::is_watchdog_counter_fault(const std::uint8_t *, int32_t) const
		function Throttle63::is_channel_1_fault(const std::uint8_t *, int32_t) const
		function Throttle63::is_channel_2_fault(const std::uint8_t *, int32_t) const
		function Throttle63::is_connector_fault(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Throttleinfo75::ID
		function Throttleinfo75::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Throttleinfo75::engine_rpm(const std::uint8_t *, int32_t) const
		function Throttleinfo75::acc_pedal_percent(const std::uint8_t *, int32_t) const
		function Throttleinfo75::acc_pedal_rate(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Tirepressure71::ID
		function Tirepressure71::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Tirepressure71::front_left_tire(const std::uint8_t *, int32_t) const
		function Tirepressure71::front_right_tire(const std::uint8_t *, int32_t) const
		function Tirepressure71::rear_left_tire(const std::uint8_t *, int32_t) const
		function Tirepressure71::rear_right_tire(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Turnsignal68::ID
		function Turnsignal68::GetPeriod() const
		function Turnsignal68::turn_cmd() const
		function Turnsignal68::UpdateData(uint8_t *)
		function Turnsignal68::Reset()
		function Turnsignal68::set_turn_none()
		function Turnsignal68::set_turn_left()
		function Turnsignal68::set_turn_right()
		function Turnsignal68::set_turn_cmd_p(uint8_t *, int32_t)
namespace canbus
	namespace lincoln
		variable Version7f::ID
		function Version7f::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Version7f::module_name(const std::uint8_t *, int32_t) const
		function Version7f::major_version(const std::uint8_t *, int32_t) const
		function Version7f::minor_version(const std::uint8_t *, int32_t) const
		function Version7f::build_number(const std::uint8_t *, int32_t) const
namespace canbus
	namespace lincoln
		variable Wheelspeed6a::ID
		function Wheelspeed6a::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Wheelspeed6a::Parse(const std::uint8_t *, int32_t, const timeval &, ChassisDetail *) const
		function Wheelspeed6a::front_left_wheel_speed(const std::uint8_t *, int32_t) const
		function Wheelspeed6a::front_right_wheel_speed(const std::uint8_t *, int32_t) const
		function Wheelspeed6a::rear_left_wheel_speed(const std::uint8_t *, int32_t) const
		function Wheelspeed6a::rear_right_wheel_speed(const std::uint8_t *, int32_t) const
		function Wheelspeed6a::parse_two_frames(const std::uint8_t, const std::uint8_t) const
namespace canbus
	namespace neolix_edu
		namespace `anonymous-namespace'
			variable kMaxFailAttempt
			variable CHECK_RESPONSE_STEER_UNIT_FLAG
			variable CHECK_RESPONSE_SPEED_UNIT_FLAG
		function Neolix_eduController::Init(const VehicleParameter &, CanSender<::apollo::canbus::ChassisDetail>* const, MessageManager<::apollo::canbus::ChassisDetail>* const)
		function Neolix_eduController::~Neolix_eduController()
		function Neolix_eduController::Start()
		function Neolix_eduController::Stop()
		function Neolix_eduController::chassis()
		function Neolix_eduController::Emergency()
		function Neolix_eduController::EnableAutoMode()
		function Neolix_eduController::DisableAutoMode()
		function Neolix_eduController::EnableSteeringOnlyMode()
		function Neolix_eduController::EnableSpeedOnlyMode()
		function Neolix_eduController::Gear(Chassis::GearPosition)
		function Neolix_eduController::Brake(double)
		function Neolix_eduController::Throttle(double)
		function Neolix_eduController::Acceleration(double)
		function Neolix_eduController::Steer(double)
		function Neolix_eduController::Steer(double, double)
		function Neolix_eduController::SetEpbBreak(const ControlCommand &)
		function Neolix_eduController::SetBeam(const ControlCommand &)
		function Neolix_eduController::SetHorn(const ControlCommand &)
		function Neolix_eduController::SetTurningSignal(const ControlCommand &)
		function Neolix_eduController::ResetProtocol()
		function Neolix_eduController::CheckChassisError()
		function Neolix_eduController::SecurityDogThreadFunc()
		function Neolix_eduController::CheckResponse(const int32_t, bool)
		function Neolix_eduController::set_chassis_error_mask(const int32_t)
		function Neolix_eduController::chassis_error_mask()
		function Neolix_eduController::chassis_error_code()
		function Neolix_eduController::set_chassis_error_code(const Chassis::ErrorCode &)
namespace canbus
	namespace neolix_edu
		function Neolix_eduMessageManager::Neolix_eduMessageManager()
		function Neolix_eduMessageManager::~Neolix_eduMessageManager()
namespace canbus
	function Neolix_eduVehicleFactory::CreateVehicleController()
	function Neolix_eduVehicleFactory::CreateMessageManager()
namespace canbus
	namespace neolix_edu
		variable Adsbrakecommand46::ID
		function Adsbrakecommand46::Adsbrakecommand46()
		function Adsbrakecommand46::GetPeriod() const
		function Adsbrakecommand46::UpdateData(uint8_t *)
		function Adsbrakecommand46::Reset()
		function Adsbrakecommand46::set_drive_enable(bool)
		function Adsbrakecommand46::set_p_drive_enable(uint8_t *, bool)
		function Adsbrakecommand46::set_auto_brake_command(int)
		function Adsbrakecommand46::set_p_auto_brake_command(uint8_t *, int)
		function Adsbrakecommand46::set_auto_parking_command(bool)
		function Adsbrakecommand46::set_p_auto_parking_command(uint8_t *, bool)
		function Adsbrakecommand46::set_epb_rampauxiliarycommand(bool)
		function Adsbrakecommand46::set_p_epb_rampauxiliarycommand(uint8_t *, bool)
		function Adsbrakecommand46::set_auto_drivercmd_alivecounter(int)
		function Adsbrakecommand46::set_p_auto_drivercmd_alivecounter(uint8_t *, int)
		function Adsbrakecommand46::set_auto_drivercmd_checksum(int)
		function Adsbrakecommand46::set_p_auto_drivercmd_checksum(uint8_t *, int)
namespace canbus
	namespace neolix_edu
		variable Adsdiagnosis628::ID
		function Adsdiagnosis628::Adsdiagnosis628()
		function Adsdiagnosis628::GetPeriod() const
		function Adsdiagnosis628::UpdateData(uint8_t *)
		function Adsdiagnosis628::Reset()
		function Adsdiagnosis628::set_faultrank(int)
		function Adsdiagnosis628::set_p_faultrank(uint8_t *, int)
		function Adsdiagnosis628::set_adas_fault_code(int)
		function Adsdiagnosis628::set_p_adas_fault_code(uint8_t *, int)
		function Adsdiagnosis628::set_adas_softwareversion(int)
		function Adsdiagnosis628::set_p_adas_softwareversion(uint8_t *, int)
		function Adsdiagnosis628::set_adas_hardwareversion(int)
		function Adsdiagnosis628::set_p_adas_hardwareversion(uint8_t *, int)
namespace canbus
	namespace neolix_edu
		variable Adsdrivecommand50::ID
		function Adsdrivecommand50::Adsdrivecommand50()
		function Adsdrivecommand50::GetPeriod() const
		function Adsdrivecommand50::UpdateData(uint8_t *)
		function Adsdrivecommand50::Reset()
		function Adsdrivecommand50::set_drive_enable(bool)
		function Adsdrivecommand50::set_p_drive_enable(uint8_t *, bool)
		function Adsdrivecommand50::set_auto_shift_command(Ads_drive_command_50::Auto_shift_commandType)
		function Adsdrivecommand50::set_p_auto_shift_command(uint8_t *, Ads_drive_command_50::Auto_shift_commandType)
		function Adsdrivecommand50::set_auto_drive_torque(double)
		function Adsdrivecommand50::set_p_auto_drive_torque(uint8_t *, double)
		function Adsdrivecommand50::set_auto_drivercmd_alivecounter(int)
		function Adsdrivecommand50::set_p_auto_drivercmd_alivecounter(uint8_t *, int)
		function Adsdrivecommand50::set_auto_drivercmd_checksum(int)
		function Adsdrivecommand50::set_p_auto_drivercmd_checksum(uint8_t *, int)
namespace canbus
	namespace neolix_edu
		variable Adsepscommand56::ID
		function Adsepscommand56::Adsepscommand56()
		function Adsepscommand56::GetPeriod() const
		function Adsepscommand56::UpdateData(uint8_t *)
		function Adsepscommand56::Reset()
		function Adsepscommand56::set_drive_enable(bool)
		function Adsepscommand56::set_p_drive_enable(uint8_t *, bool)
		function Adsepscommand56::set_auto_target_angle(double)
		function Adsepscommand56::set_p_auto_target_angle(uint8_t *, double)
		function Adsepscommand56::set_auto_drivercmd_alivecounter(int)
		function Adsepscommand56::set_p_auto_drivercmd_alivecounter(uint8_t *, int)
		function Adsepscommand56::set_auto_drivercmd_checksum(int)
		function Adsepscommand56::set_p_auto_drivercmd_checksum(uint8_t *, int)
namespace canbus
	namespace neolix_edu
		variable Adslighthorncommand310::ID
		function Adslighthorncommand310::Adslighthorncommand310()
		function Adslighthorncommand310::GetPeriod() const
		function Adslighthorncommand310::UpdateData(uint8_t *)
		function Adslighthorncommand310::Reset()
		function Adslighthorncommand310::set_turn_right_light_command(bool)
		function Adslighthorncommand310::set_p_turn_right_light_command(uint8_t *, bool)
		function Adslighthorncommand310::set_turn_left_light_command(bool)
		function Adslighthorncommand310::set_p_turn_left_light_command(uint8_t *, bool)
		function Adslighthorncommand310::set_horn_command(bool)
		function Adslighthorncommand310::set_p_horn_command(uint8_t *, bool)
		function Adslighthorncommand310::set_beam_command(int)
		function Adslighthorncommand310::set_p_beam_command(uint8_t *, int)
		function Adslighthorncommand310::set_auto_drivercmd_alivecounter(int)
		function Adslighthorncommand310::set_p_auto_drivercmd_alivecounter(uint8_t *, int)
		function Adslighthorncommand310::set_auto_drivercmd_checksum(int)
		function Adslighthorncommand310::set_p_auto_drivercmd_checksum(uint8_t *, int)
namespace canbus
	namespace neolix_edu
		function Aebdiagnosis1626::Aebdiagnosis1626()
		variable Aebdiagnosis1626::ID
		function Aebdiagnosis1626::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Aebdiagnosis1626::aeb_softwareversion(const std::uint8_t *, int32_t) const
		function Aebdiagnosis1626::aeb_hardwareversion(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Aebdiagresp718::Aebdiagresp718()
		variable Aebdiagresp718::ID
		function Aebdiagresp718::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Aebdiagresp718::aeb_diagresp(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Aebfrontwheelspeed353::Aebfrontwheelspeed353()
		variable Aebfrontwheelspeed353::ID
		function Aebfrontwheelspeed353::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Aebfrontwheelspeed353::vehiclespeedvalid(const std::uint8_t *, int32_t) const
		function Aebfrontwheelspeed353::vehiclespeed(const std::uint8_t *, int32_t) const
		function Aebfrontwheelspeed353::vehiclerealdirect(const std::uint8_t *, int32_t) const
		function Aebfrontwheelspeed353::wheelspeed_fl_valid(const std::uint8_t *, int32_t) const
		function Aebfrontwheelspeed353::wheelspeed_fl(const std::uint8_t *, int32_t) const
		function Aebfrontwheelspeed353::wheelspeed_fr_valid(const std::uint8_t *, int32_t) const
		function Aebfrontwheelspeed353::wheelspeed_fr(const std::uint8_t *, int32_t) const
		function Aebfrontwheelspeed353::wheelspeed_fl_direct(const std::uint8_t *, int32_t) const
		function Aebfrontwheelspeed353::wheelspeed_fr_direct(const std::uint8_t *, int32_t) const
		function Aebfrontwheelspeed353::alivecounter_front(const std::uint8_t *, int32_t) const
		function Aebfrontwheelspeed353::checksum_front(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Aebrearwheelspeed354::Aebrearwheelspeed354()
		variable Aebrearwheelspeed354::ID
		function Aebrearwheelspeed354::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Aebrearwheelspeed354::wheelspeed_rl_valid(const std::uint8_t *, int32_t) const
		function Aebrearwheelspeed354::wheelspeed_rl(const std::uint8_t *, int32_t) const
		function Aebrearwheelspeed354::wheelspeed_rr_valid(const std::uint8_t *, int32_t) const
		function Aebrearwheelspeed354::wheelspeed_rr(const std::uint8_t *, int32_t) const
		function Aebrearwheelspeed354::wheelspeed_rl_direct(const std::uint8_t *, int32_t) const
		function Aebrearwheelspeed354::wheelspeed_rr_direct(const std::uint8_t *, int32_t) const
		function Aebrearwheelspeed354::alivecounter_rear(const std::uint8_t *, int32_t) const
		function Aebrearwheelspeed354::checksum_rear(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Aebsystemstate11::Aebsystemstate11()
		variable Aebsystemstate11::ID
		function Aebsystemstate11::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Aebsystemstate11::aeb_state(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::aeb_brakestate(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::faultrank(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::currenttemperature(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::pas_f1_stop(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::pas_f2_stop(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::pas_f3_stop(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::pas_f4_stop(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::pas_b1_stop(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::pas_b2_stop(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::pas_b3_stop(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::pas_b4_stop(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::aeb_livecounter_rear(const std::uint8_t *, int32_t) const
		function Aebsystemstate11::aeb_cheksum(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Aebwheelimpulse355::Aebwheelimpulse355()
		variable Aebwheelimpulse355::ID
		function Aebwheelimpulse355::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Aebwheelimpulse355::flimpulse(const std::uint8_t *, int32_t) const
		function Aebwheelimpulse355::flimpulsevalid(const std::uint8_t *, int32_t) const
		function Aebwheelimpulse355::frimpulse(const std::uint8_t *, int32_t) const
		function Aebwheelimpulse355::frimpulsevalid(const std::uint8_t *, int32_t) const
		function Aebwheelimpulse355::rlimpulse(const std::uint8_t *, int32_t) const
		function Aebwheelimpulse355::rlimpulsevalid(const std::uint8_t *, int32_t) const
		function Aebwheelimpulse355::rrimpulse(const std::uint8_t *, int32_t) const
		function Aebwheelimpulse355::rrimpulsevalid(const std::uint8_t *, int32_t) const
		function Aebwheelimpulse355::alivecounter(const std::uint8_t *, int32_t) const
		function Aebwheelimpulse355::checksum(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Pas1stdata311::Pas1stdata311()
		variable Pas1stdata311::ID
		function Pas1stdata311::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Pas1stdata311::pasdistance4(const std::uint8_t *, int32_t) const
		function Pas1stdata311::pasdistance3(const std::uint8_t *, int32_t) const
		function Pas1stdata311::pas_f1_status(const std::uint8_t *, int32_t) const
		function Pas1stdata311::pas_f2_status(const std::uint8_t *, int32_t) const
		function Pas1stdata311::pas_f3_status(const std::uint8_t *, int32_t) const
		function Pas1stdata311::pas_f4_status(const std::uint8_t *, int32_t) const
		function Pas1stdata311::pasdistance2(const std::uint8_t *, int32_t) const
		function Pas1stdata311::pasdistance1(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Pas2nddata312::Pas2nddata312()
		variable Pas2nddata312::ID
		function Pas2nddata312::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Pas2nddata312::pas_b1_status(const std::uint8_t *, int32_t) const
		function Pas2nddata312::pas_b2_status(const std::uint8_t *, int32_t) const
		function Pas2nddata312::pas_b3_status(const std::uint8_t *, int32_t) const
		function Pas2nddata312::pas_b4_status(const std::uint8_t *, int32_t) const
		function Pas2nddata312::pasdistance1(const std::uint8_t *, int32_t) const
		function Pas2nddata312::pasdistance2(const std::uint8_t *, int32_t) const
		function Pas2nddata312::pasdistance3(const std::uint8_t *, int32_t) const
		function Pas2nddata312::pasdistance4(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Vcubrakereport47::Vcubrakereport47()
		variable Vcubrakereport47::ID
		function Vcubrakereport47::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vcubrakereport47::brake_enable_resp(const std::uint8_t *, int32_t) const
		function Vcubrakereport47::control_mode_resp(const std::uint8_t *, int32_t) const
		function Vcubrakereport47::vcu_real_brake_valid(const std::uint8_t *, int32_t) const
		function Vcubrakereport47::vcu_real_brake(const std::uint8_t *, int32_t) const
		function Vcubrakereport47::vcu_real_parking_status(const std::uint8_t *, int32_t) const
		function Vcubrakereport47::vcu_real_parking_valid(const std::uint8_t *, int32_t) const
		function Vcubrakereport47::rampauxiliaryindication(const std::uint8_t *, int32_t) const
		function Vcubrakereport47::vehicleslope(const std::uint8_t *, int32_t) const
		function Vcubrakereport47::vcu_brakerept_alivecounter(const std::uint8_t *, int32_t) const
		function Vcubrakereport47::vcu_brakerept_checksum(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Vcudrivereport52::Vcudrivereport52()
		variable Vcudrivereport52::ID
		function Vcudrivereport52::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vcudrivereport52::drive_enable_resp(const std::uint8_t *, int32_t) const
		function Vcudrivereport52::control_mode_resp(const std::uint8_t *, int32_t) const
		function Vcudrivereport52::vcu_real_shift(const std::uint8_t *, int32_t) const
		function Vcudrivereport52::vcu_real_shift_valid(const std::uint8_t *, int32_t) const
		function Vcudrivereport52::vcu_real_torque_valid(const std::uint8_t *, int32_t) const
		function Vcudrivereport52::vcu_real_torque(const std::uint8_t *, int32_t) const
		function Vcudrivereport52::vcu_limitedtorquemode(const std::uint8_t *, int32_t) const
		function Vcudrivereport52::vcu_driverept_alivecounter(const std::uint8_t *, int32_t) const
		function Vcudrivereport52::vcu_driverept_checksum(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Vcuepsreport57::Vcuepsreport57()
		variable Vcuepsreport57::ID
		function Vcuepsreport57::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vcuepsreport57::drive_enable_resp(const std::uint8_t *, int32_t) const
		function Vcuepsreport57::control_mode_resp(const std::uint8_t *, int32_t) const
		function Vcuepsreport57::vcu_eps_report(const std::uint8_t *, int32_t) const
		function Vcuepsreport57::vcu_real_angle(const std::uint8_t *, int32_t) const
		function Vcuepsreport57::vcu_real_angle_valid(const std::uint8_t *, int32_t) const
		function Vcuepsreport57::vcu_target_angle_valid(const std::uint8_t *, int32_t) const
		function Vcuepsreport57::vcu_target_angle(const std::uint8_t *, int32_t) const
		function Vcuepsreport57::vcu_eps_rept_alivecounter(const std::uint8_t *, int32_t) const
		function Vcuepsreport57::vcu_eps_rept_checksum(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Vcunm401::Vcunm401()
		variable Vcunm401::ID
		function Vcunm401::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vcunm401::vcu_sleepcommand(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Vcupowerstatus214::Vcupowerstatus214()
		variable Vcupowerstatus214::ID
		function Vcupowerstatus214::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vcupowerstatus214::vcu_powermode(const std::uint8_t *, int32_t) const
		function Vcupowerstatus214::vcu_powermodevalid(const std::uint8_t *, int32_t) const
		function Vcupowerstatus214::replacebatterystateindication(const std::uint8_t *, int32_t) const
		function Vcupowerstatus214::forbidden_aeb_signal(const std::uint8_t *, const int32_t) const
		function Vcupowerstatus214::bcu_chargedischargecurrent(const std::uint8_t *, const int32_t) const
		function Vcupowerstatus214::bcu_batt_internalvoltage(const std::uint8_t *, const int32_t) const
		function Vcupowerstatus214::vcu_driverinfo_alivecounter(const std::uint8_t *, int32_t) const
		function Vcupowerstatus214::vcu_driverinfo_checksum(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Vcuvehiclefaultresponse201::Vcuvehiclefaultresponse201()
		variable Vcuvehiclefaultresponse201::ID
		function Vcuvehiclefaultresponse201::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vcuvehiclefaultresponse201::vehicle_error_indicationsvcu(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::brake_system_errorehb(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::eps_error(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::motor_error(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::epb_error(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::high_voltage_battery_errorbcu(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::automode_exit_reason_losscommuni(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::automode_exit_reason_reqsignalno(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::automode_exit_reason_low_power(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::automode_exit_reason_highvolt(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::automode_exit_reason_vehicle_flt(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::automode_exit_reason_press_emerg(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::automode_exit_reason_press_remot(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::automode_exit_reason_pdu_control(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::vcu_faultrept_alivecounter(const std::uint8_t *, int32_t) const
		function Vcuvehiclefaultresponse201::vcu_faultrept_checksum(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Vcuvehicleinforesponse502::Vcuvehicleinforesponse502()
		variable Vcuvehicleinforesponse502::ID
		function Vcuvehicleinforesponse502::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vcuvehicleinforesponse502::vehicle_softwareversion_indicati(const std::uint8_t *, int32_t) const
		function Vcuvehicleinforesponse502::project(const std::uint8_t *, int32_t) const
		function Vcuvehicleinforesponse502::manufacturer(const std::uint8_t *, int32_t) const
		function Vcuvehicleinforesponse502::year(const std::uint8_t *, int32_t) const
		function Vcuvehicleinforesponse502::month(const std::uint8_t *, int32_t) const
		function Vcuvehicleinforesponse502::day(const std::uint8_t *, int32_t) const
		function Vcuvehicleinforesponse502::vehicle_serial_number(const std::uint8_t *, int32_t) const
namespace canbus
	namespace neolix_edu
		function Vcuvehiclestatusreport101::Vcuvehiclestatusreport101()
		variable Vcuvehiclestatusreport101::ID
		function Vcuvehiclestatusreport101::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vcuvehiclestatusreport101::drive_enable_resp(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::vcu_highvoltagecircuitstate(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::vcu_dcdc_enabledstates(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::control_mode_resp(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::vcu_vehicle_speed(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::vcu_lowbatterychargingfunctionst(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::vcu_display_soc(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::vcu_motor_speed(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::vcu_motor_direction(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::vcu_motor_speed_valid(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::vcu_statusrept_alivecounter(const std::uint8_t *, int32_t) const
		function Vcuvehiclestatusreport101::vcu_statusrept_checksum(const std::uint8_t *, int32_t) const
namespace canbus
	namespace transit
		variable Adcauxiliarycontrol110::ID
		function Adcauxiliarycontrol110::Adcauxiliarycontrol110()
		function Adcauxiliarycontrol110::GetPeriod() const
		function Adcauxiliarycontrol110::UpdateData(uint8_t *)
		function Adcauxiliarycontrol110::Reset()
		function Adcauxiliarycontrol110::set_adc_auxcontrol_counter(int)
		function Adcauxiliarycontrol110::set_p_adc_auxcontrol_counter(uint8_t *, int)
		function Adcauxiliarycontrol110::set_adc_auxcontrol_checksum(int)
		function Adcauxiliarycontrol110::set_p_adc_auxcontrol_checksum(uint8_t *, int)
		function Adcauxiliarycontrol110::set_adc_cmd_inverter_controlenable(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_inverter_controlenable(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_inverter(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_inverter(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_wiper(int)
		function Adcauxiliarycontrol110::set_p_adc_cmd_wiper(uint8_t *, int)
		function Adcauxiliarycontrol110::set_adc_cmd_pdu_controlenable(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_pdu_controlenable(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_pdu_ch8(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_pdu_ch8(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_pdu_ch7(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_pdu_ch7(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_pdu_ch6(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_pdu_ch6(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_pdu_ch5(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_pdu_ch5(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_pdu_ch4(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_pdu_ch4(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_pdu_ch3(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_pdu_ch3(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_pdu_ch2(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_pdu_ch2(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_pdu_ch1(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_pdu_ch1(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_hazardlights(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_hazardlights(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_highbeam(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_highbeam(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_lowbeam(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_lowbeam(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_horn(bool)
		function Adcauxiliarycontrol110::set_p_adc_cmd_horn(uint8_t *, bool)
		function Adcauxiliarycontrol110::set_adc_cmd_turnsignal(Adc_auxiliarycontrol_110::Adc_cmd_turnsignalType)
		function Adcauxiliarycontrol110::set_p_adc_cmd_turnsignal(uint8_t *, Adc_auxiliarycontrol_110::Adc_cmd_turnsignalType)
namespace canbus
	namespace transit
		variable Adcmotioncontrol110::ID
		function Adcmotioncontrol110::Adcmotioncontrol110()
		function Adcmotioncontrol110::GetPeriod() const
		function Adcmotioncontrol110::UpdateData(uint8_t *)
		function Adcmotioncontrol110::Reset()
		function Adcmotioncontrol110::set_adc_cmd_steerwheelangle(double)
		function Adcmotioncontrol110::set_p_adc_cmd_steerwheelangle(uint8_t *, double)
		function Adcmotioncontrol110::set_adc_cmd_steeringcontrolmode(Adc_motioncontrol1_10::Adc_cmd_steeringcontrolmodeType)
		function Adcmotioncontrol110::set_p_adc_cmd_steeringcontrolmode(uint8_t *, Adc_motioncontrol1_10::Adc_cmd_steeringcontrolmodeType)
		function Adcmotioncontrol110::set_adc_cmd_parkingbrake(bool)
		function Adcmotioncontrol110::set_p_adc_cmd_parkingbrake(uint8_t *, bool)
		function Adcmotioncontrol110::set_adc_cmd_gear(Adc_motioncontrol1_10::Adc_cmd_gearType)
		function Adcmotioncontrol110::set_p_adc_cmd_gear(uint8_t *, Adc_motioncontrol1_10::Adc_cmd_gearType)
		function Adcmotioncontrol110::set_adc_motioncontrol1_checksum(int)
		function Adcmotioncontrol110::set_p_adc_motioncontrol1_checksum(uint8_t *, int)
		function Adcmotioncontrol110::set_adc_cmd_brakepercentage(double)
		function Adcmotioncontrol110::set_p_adc_cmd_brakepercentage(uint8_t *, double)
		function Adcmotioncontrol110::set_adc_cmd_throttleposition(double)
		function Adcmotioncontrol110::set_p_adc_cmd_throttleposition(uint8_t *, double)
		function Adcmotioncontrol110::set_adc_motioncontrol1_counter(int)
		function Adcmotioncontrol110::set_p_adc_motioncontrol1_counter(uint8_t *, int)
		function Adcmotioncontrol110::set_adc_cmd_autonomyrequest(Adc_motioncontrol1_10::Adc_cmd_autonomyrequestType)
		function Adcmotioncontrol110::set_p_adc_cmd_autonomyrequest(uint8_t *, Adc_motioncontrol1_10::Adc_cmd_autonomyrequestType)
		function Adcmotioncontrol110::set_adc_cmd_longitudinalcontrolmode(Adc_motioncontrol1_10::Adc_cmd_longitudinalcontrolmodeType)
		function Adcmotioncontrol110::set_p_adc_cmd_longitudinalcontrolmode(uint8_t *, Adc_motioncontrol1_10::Adc_cmd_longitudinalcontrolmodeType)
namespace canbus
	namespace transit
		variable Adcmotioncontrollimits112::ID
		function Adcmotioncontrollimits112::Adcmotioncontrollimits112()
		function Adcmotioncontrollimits112::GetPeriod() const
		function Adcmotioncontrollimits112::UpdateData(uint8_t *)
		function Adcmotioncontrollimits112::Reset()
		function Adcmotioncontrollimits112::set_adc_cmd_throttlecommandlimit(double)
		function Adcmotioncontrollimits112::set_p_adc_cmd_throttlecommandlimit(uint8_t *, double)
		function Adcmotioncontrollimits112::set_adc_cmd_steeringrate(double)
		function Adcmotioncontrollimits112::set_p_adc_cmd_steeringrate(uint8_t *, double)
		function Adcmotioncontrollimits112::set_adc_cmd_steerwheelanglelimit(double)
		function Adcmotioncontrollimits112::set_p_adc_cmd_steerwheelanglelimit(uint8_t *, double)
namespace canbus
	namespace transit
		function Llcauxiliaryfeedback120::Llcauxiliaryfeedback120()
		variable Llcauxiliaryfeedback120::ID
		function Llcauxiliaryfeedback120::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Llcauxiliaryfeedback120::llc_fbk_inverter(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_pdu_ch8(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_pdu_ch7(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_pdu_ch6(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_pdu_ch5(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_pdu_ch4(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_pdu_ch3(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_pdu_ch2(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_pdu_ch1(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_hazardlights(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_ledgreenon(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_horn(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_buzzeron(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_turnsignal(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_lowbeam(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_highbeam(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_ledredon(const std::uint8_t *, int32_t) const
		function Llcauxiliaryfeedback120::llc_fbk_autonomybuttonpressed(const std::uint8_t *, int32_t) const
namespace canbus
	namespace transit
		variable Llcdiagbrakecontrol721::ID
		function Llcdiagbrakecontrol721::Llcdiagbrakecontrol721()
		function Llcdiagbrakecontrol721::GetPeriod() const
		function Llcdiagbrakecontrol721::UpdateData(uint8_t *)
		function Llcdiagbrakecontrol721::Reset()
		function Llcdiagbrakecontrol721::set_llc_dbg_brakepidcontribution_p(double)
		function Llcdiagbrakecontrol721::set_p_llc_dbg_brakepidcontribution_p(uint8_t *, double)
		function Llcdiagbrakecontrol721::set_llc_dbg_brakepidcontribution_i(double)
		function Llcdiagbrakecontrol721::set_p_llc_dbg_brakepidcontribution_i(uint8_t *, double)
		function Llcdiagbrakecontrol721::set_llc_dbg_brakepidcontribution_d(double)
		function Llcdiagbrakecontrol721::set_p_llc_dbg_brakepidcontribution_d(uint8_t *, double)
		function Llcdiagbrakecontrol721::set_llc_dbg_brakepid_output(double)
		function Llcdiagbrakecontrol721::set_p_llc_dbg_brakepid_output(uint8_t *, double)
		function Llcdiagbrakecontrol721::set_llc_dbg_brakepid_error(int)
		function Llcdiagbrakecontrol721::set_p_llc_dbg_brakepid_error(uint8_t *, int)
		function Llcdiagbrakecontrol721::set_llc_dbg_brakefeedforward(double)
		function Llcdiagbrakecontrol721::set_p_llc_dbg_brakefeedforward(uint8_t *, double)
namespace canbus
	namespace transit
		function Llcdiagfault620::Llcdiagfault620()
		variable Llcdiagfault620::ID
		function Llcdiagfault620::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Llcdiagfault620::llc_disengagecounter_brake(const std::uint8_t *, int32_t) const
		function Llcdiagfault620::llc_disengagecounter_steer(const std::uint8_t *, int32_t) const
		function Llcdiagfault620::llc_disengagecounter_throttle(const std::uint8_t *, int32_t) const
		function Llcdiagfault620::llc_fbk_faultcounter(const std::uint8_t *, int32_t) const
		function Llcdiagfault620::llc_disengagecounter_button(const std::uint8_t *, int32_t) const
		function Llcdiagfault620::llc_fbk_version_year(const std::uint8_t *, int32_t) const
		function Llcdiagfault620::llc_fbk_version_month(const std::uint8_t *, int32_t) const
		function Llcdiagfault620::llc_fbk_version_day(const std::uint8_t *, int32_t) const
		function Llcdiagfault620::llc_fbk_version_hour(const std::uint8_t *, int32_t) const
namespace canbus
	namespace transit
		variable Llcdiagsteeringcontrol722::ID
		function Llcdiagsteeringcontrol722::Llcdiagsteeringcontrol722()
		function Llcdiagsteeringcontrol722::GetPeriod() const
		function Llcdiagsteeringcontrol722::UpdateData(uint8_t *)
		function Llcdiagsteeringcontrol722::Reset()
		function Llcdiagsteeringcontrol722::set_llc_dbg_steeringsensorposition(double)
		function Llcdiagsteeringcontrol722::set_p_llc_dbg_steeringsensorposition(uint8_t *, double)
		function Llcdiagsteeringcontrol722::set_llc_dbg_steeringrackinputtorque(int)
		function Llcdiagsteeringcontrol722::set_p_llc_dbg_steeringrackinputtorque(uint8_t *, int)
		function Llcdiagsteeringcontrol722::set_llc_dbg_steeringmotorposition(double)
		function Llcdiagsteeringcontrol722::set_p_llc_dbg_steeringmotorposition(uint8_t *, double)
namespace canbus
	namespace transit
		function Llcmotioncommandfeedback122::Llcmotioncommandfeedback122()
		variable Llcmotioncommandfeedback122::ID
		function Llcmotioncommandfeedback122::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Llcmotioncommandfeedback122::llc_fbk_steeringanglesetpoint(const std::uint8_t *, int32_t) const
		function Llcmotioncommandfeedback122::llc_fbk_throttlesetpoint(const std::uint8_t *, int32_t) const
		function Llcmotioncommandfeedback122::llc_fbk_brakepercentsetpoint(const std::uint8_t *, int32_t) const
		function Llcmotioncommandfeedback122::llc_motioncommandfeedback1_count(const std::uint8_t *, int32_t) const
		function Llcmotioncommandfeedback122::llc_motioncommandfeedback1_check(const std::uint8_t *, int32_t) const
namespace canbus
	namespace transit
		function Llcmotionfeedback120::Llcmotionfeedback120()
		variable Llcmotionfeedback120::ID
		function Llcmotionfeedback120::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Llcmotionfeedback120::llc_fbk_gear(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_parkingbrake(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_throttleposition(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_brakepercentrear(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_brakepercentfront(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_steeringcontrolmode(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_motionfeedback1_counter(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_motionfeedback1_checksum(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_commandaligned(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_estoppressed(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_adcrequestautonomy(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_allowautonomy(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_longitudinalcontrolmode(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback120::llc_fbk_state(const std::uint8_t *, int32_t) const
namespace canbus
	namespace transit
		function Llcmotionfeedback221::Llcmotionfeedback221()
		variable Llcmotionfeedback221::ID
		function Llcmotionfeedback221::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Llcmotionfeedback221::llc_fbk_vehiclespeed(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback221::llc_motionfeedback2_counter(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback221::llc_motionfeedback2_checksum(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback221::llc_fbk_steeringrate(const std::uint8_t *, int32_t) const
		function Llcmotionfeedback221::llc_fbk_steeringangle(const std::uint8_t *, int32_t) const
namespace canbus
	namespace transit
		function Llcvehiclelimits24::Llcvehiclelimits24()
		variable Llcvehiclelimits24::ID
		function Llcvehiclelimits24::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Llcvehiclelimits24::llc_fbk_maxsteeringangle(const std::uint8_t *, int32_t) const
		function Llcvehiclelimits24::llc_fbk_maxbrakepercent(const std::uint8_t *, int32_t) const
namespace canbus
	namespace transit
		function Llcvehiclestatus25::Llcvehiclestatus25()
		variable Llcvehiclestatus25::ID
		function Llcvehiclestatus25::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Llcvehiclestatus25::llc_fbk_12voltage(const std::uint8_t *, int32_t) const
namespace canbus
	namespace transit
		namespace `anonymous-namespace'
			variable kMaxFailAttempt
			variable CHECK_RESPONSE_STEER_UNIT_FLAG
			variable CHECK_RESPONSE_SPEED_UNIT_FLAG
		function TransitController::Init(const VehicleParameter &, CanSender<::apollo::canbus::ChassisDetail>* const, MessageManager<::apollo::canbus::ChassisDetail>* const)
		function TransitController::~TransitController()
		function TransitController::Start()
		function TransitController::Stop()
		function TransitController::chassis()
		function TransitController::Emergency()
		function TransitController::EnableAutoMode()
		function TransitController::DisableAutoMode()
		function TransitController::EnableSteeringOnlyMode()
		function TransitController::EnableSpeedOnlyMode()
		function TransitController::Gear(Chassis::GearPosition)
		function TransitController::Brake(double)
		function TransitController::Throttle(double)
		function TransitController::Acceleration(double)
		function TransitController::Steer(double)
		function TransitController::Steer(double, double)
		function TransitController::SetEpbBreak(const ControlCommand &)
		function TransitController::SetBeam(const ControlCommand &)
		function TransitController::SetHorn(const ControlCommand &)
		function TransitController::SetTurningSignal(const ControlCommand &)
		function TransitController::ResetProtocol()
		function TransitController::CheckChassisError()
		function TransitController::SecurityDogThreadFunc()
		function TransitController::CheckResponse()
		function TransitController::set_chassis_error_mask(const int32_t)
		function TransitController::chassis_error_mask()
		function TransitController::chassis_error_code()
		function TransitController::set_chassis_error_code(const Chassis::ErrorCode &)
		function TransitController::CheckSafetyError(const::apollo::canbus::ChassisDetail &)
		function TransitController::SetLimits()
namespace canbus
	namespace transit
		function TransitMessageManager::TransitMessageManager()
		function TransitMessageManager::~TransitMessageManager()
namespace canbus
	function TransitVehicleFactory::CreateVehicleController()
	function TransitVehicleFactory::CreateMessageManager()
namespace canbus
	function VehicleController::driving_mode()
	function VehicleController::set_driving_mode(const Chassis::DrivingMode &)
	function VehicleController::SetDrivingMode(const Chassis::DrivingMode &)
	function VehicleController::Update(const ControlCommand &)
namespace canbus
	function VehicleFactory::RegisterVehicleFactory()
	function VehicleFactory::CreateVehicle(const VehicleParameter &)
namespace canbus
	namespace wey
		variable Ads1111::ID
		function Ads1111::Ads1111()
		function Ads1111::GetPeriod() const
		function Ads1111::UpdateData(uint8_t *)
		function Ads1111::Reset()
		function Ads1111::set_ads_dectostop(Ads1_111::Ads_dectostopType)
		function Ads1111::set_p_ads_dectostop(uint8_t *, Ads1_111::Ads_dectostopType)
		function Ads1111::set_ads_mode(Ads1_111::Ads_modeType)
		function Ads1111::set_p_ads_mode(uint8_t *, Ads1_111::Ads_modeType)
		function Ads1111::set_ads_taracce(double)
		function Ads1111::set_p_ads_taracce(uint8_t *, double)
		function Ads1111::set_ads_driveoff_req(Ads1_111::Ads_driveoff_reqType)
		function Ads1111::set_p_ads_driveoff_req(uint8_t *, Ads1_111::Ads_driveoff_reqType)
		function Ads1111::set_ads_aeb_taracce(double)
		function Ads1111::set_p_ads_aeb_taracce(uint8_t *, double)
		function Ads1111::set_ads_aeb_tgtdecel_req(Ads1_111::Ads_aeb_tgtdecel_reqType)
		function Ads1111::set_p_ads_aeb_tgtdecel_req(uint8_t *, Ads1_111::Ads_aeb_tgtdecel_reqType)
namespace canbus
	namespace wey
		variable Ads338e::ID
		function Ads338e::Ads338e()
		function Ads338e::GetPeriod() const
		function Ads338e::UpdateData(uint8_t *)
		function Ads338e::Reset()
		function Ads338e::set_ads_bcm_worksts(Ads3_38e::Ads_bcm_workstsType)
		function Ads338e::set_p_ads_bcm_worksts(uint8_t *, Ads3_38e::Ads_bcm_workstsType)
		function Ads338e::set_ads_bcmworkstsvalid(Ads3_38e::Ads_bcmworkstsvalidType)
		function Ads338e::set_p_ads_bcmworkstsvalid(uint8_t *, Ads3_38e::Ads_bcmworkstsvalidType)
		function Ads338e::set_ads_reqcontrolbcm(Ads3_38e::Ads_reqcontrolbcmType)
		function Ads338e::set_p_ads_reqcontrolbcm(uint8_t *, Ads3_38e::Ads_reqcontrolbcmType)
		function Ads338e::set_highbeamton(Ads3_38e::HighbeamtonType)
		function Ads338e::set_p_highbeamton(uint8_t *, Ads3_38e::HighbeamtonType)
		function Ads338e::set_dippedbeamon(Ads3_38e::DippedbeamonType)
		function Ads338e::set_p_dippedbeamon(uint8_t *, Ads3_38e::DippedbeamonType)
		function Ads338e::set_turnllighton(Ads3_38e::TurnllightonType)
		function Ads338e::set_p_turnllighton(uint8_t *, Ads3_38e::TurnllightonType)
		function Ads338e::set_emergencylighton(Ads3_38e::EmergencylightonType)
		function Ads338e::set_p_emergencylighton(uint8_t *, Ads3_38e::EmergencylightonType)
		function Ads338e::set_ffoglampon(Ads3_38e::FfoglamponType)
		function Ads338e::set_p_ffoglampon(uint8_t *, Ads3_38e::FfoglamponType)
		function Ads338e::set_rfoglampon(Ads3_38e::RfoglamponType)
		function Ads338e::set_p_rfoglampon(uint8_t *, Ads3_38e::RfoglamponType)
		function Ads338e::set_brakelight(Ads3_38e::BrakelightType)
		function Ads338e::set_p_brakelight(uint8_t *, Ads3_38e::BrakelightType)
		function Ads338e::set_hornon(Ads3_38e::HornonType)
		function Ads338e::set_p_hornon(uint8_t *, Ads3_38e::HornonType)
		function Ads338e::set_fwindshieldwiper(Ads3_38e::FwindshieldwiperType)
		function Ads338e::set_p_fwindshieldwiper(uint8_t *, Ads3_38e::FwindshieldwiperType)
		function Ads338e::set_rwindshieldwiper(Ads3_38e::RwindshieldwiperType)
		function Ads338e::set_p_rwindshieldwiper(uint8_t *, Ads3_38e::RwindshieldwiperType)
namespace canbus
	namespace wey
		variable Adseps113::ID
		function Adseps113::Adseps113()
		function Adseps113::GetPeriod() const
		function Adseps113::UpdateData(uint8_t *)
		function Adseps113::Reset()
		function Adseps113::set_ads_epsmode(Ads_eps_113::Ads_epsmodeType)
		function Adseps113::set_p_ads_epsmode(uint8_t *, Ads_eps_113::Ads_epsmodeType)
		function Adseps113::set_ads_reqepstargetangle(double)
		function Adseps113::set_p_ads_reqepstargetangle(uint8_t *, double)
namespace canbus
	namespace wey
		variable Adsreqvin390::ID
		function Adsreqvin390::Adsreqvin390()
		function Adsreqvin390::GetPeriod() const
		function Adsreqvin390::UpdateData(uint8_t *)
		function Adsreqvin390::Reset()
		function Adsreqvin390::set_req_vin_signal(Ads_req_vin_390::Req_vin_signalType)
		function Adsreqvin390::set_p_req_vin_signal(uint8_t *, Ads_req_vin_390::Req_vin_signalType)
namespace canbus
	namespace wey
		variable Adsshifter115::ID
		function Adsshifter115::Adsshifter115()
		function Adsshifter115::GetPeriod() const
		function Adsshifter115::UpdateData(uint8_t *)
		function Adsshifter115::Reset()
		function Adsshifter115::set_ads_shiftmode(Ads_shifter_115::Ads_shiftmodeType)
		function Adsshifter115::set_p_ads_shiftmode(uint8_t *, Ads_shifter_115::Ads_shiftmodeType)
		function Adsshifter115::set_ads_targetgear(Ads_shifter_115::Ads_targetgearType)
		function Adsshifter115::set_p_ads_targetgear(uint8_t *, Ads_shifter_115::Ads_targetgearType)
namespace canbus
	namespace wey
		function Fail241::Fail241()
		variable Fail241::ID
		function Fail241::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Fail241::engfail(const std::uint8_t *, int32_t) const
		function Fail241::espfail(const std::uint8_t *, int32_t) const
		function Fail241::epbfail(const std::uint8_t *, int32_t) const
		function Fail241::shiftfail(const std::uint8_t *, int32_t) const
		function Fail241::epsfail(const std::uint8_t *, int32_t) const
namespace canbus
	namespace wey
		function Fbs1243::Fbs1243()
		variable Fbs1243::ID
		function Fbs1243::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Fbs1243::longitudeacce(const std::uint8_t *, int32_t) const
		function Fbs1243::lateralacce(const std::uint8_t *, int32_t) const
		function Fbs1243::vehdynyawrate(const std::uint8_t *, int32_t) const
		function Fbs1243::flwheelspd(const std::uint8_t *, int32_t) const
		function Fbs1243::frwheeldirection(const std::uint8_t *, int32_t) const
namespace canbus
	namespace wey
		function Fbs2240::Fbs2240()
		variable Fbs2240::ID
		function Fbs2240::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Fbs2240::flwheeldirection(const std::uint8_t *, int32_t) const
		function Fbs2240::frwheelspd(const std::uint8_t *, int32_t) const
		function Fbs2240::rlwheeldrivedirection(const std::uint8_t *, int32_t) const
		function Fbs2240::rlwheelspd(const std::uint8_t *, int32_t) const
		function Fbs2240::rrwheeldirection(const std::uint8_t *, int32_t) const
		function Fbs2240::rrwheelspd(const std::uint8_t *, int32_t) const
		function Fbs2240::vehiclespd(const std::uint8_t *, int32_t) const
namespace canbus
	namespace wey
		function Fbs3237::Fbs3237()
		variable Fbs3237::ID
		function Fbs3237::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Fbs3237::engspd(const std::uint8_t *, int32_t) const
		function Fbs3237::accpedalpos(const std::uint8_t *, int32_t) const
		function Fbs3237::epbswtichposition(const std::uint8_t *, int32_t) const
		function Fbs3237::currentgear(const std::uint8_t *, int32_t) const
		function Fbs3237::eps_streeingmode(const std::uint8_t *, int32_t) const
		function Fbs3237::epsdrvinputtrqvalue(const std::uint8_t *, int32_t) const
		function Fbs3237::epsconsumedcurrvalue(const std::uint8_t *, int32_t) const
		function Fbs3237::epscurrmod(const std::uint8_t *, int32_t) const
namespace canbus
	namespace wey
		function Fbs4235::Fbs4235()
		variable Fbs4235::ID
		function Fbs4235::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Fbs4235::steerwheelangle(const std::uint8_t *, int32_t) const
		function Fbs4235::steerwheelspd(const std::uint8_t *, int32_t) const
namespace canbus
	namespace wey
		function Status310::Status310()
		variable Status310::ID
		function Status310::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Status310::longitudeaccvalid(const std::uint8_t *, int32_t) const
		function Status310::lateralaccevalid(const std::uint8_t *, int32_t) const
		function Status310::vehdynyawratevalid(const std::uint8_t *, int32_t) const
		function Status310::flwheelspdvalid(const std::uint8_t *, int32_t) const
		function Status310::frwheelspdvalid(const std::uint8_t *, int32_t) const
		function Status310::rlwheelspdvalid(const std::uint8_t *, int32_t) const
		function Status310::rrwheelspdvalid(const std::uint8_t *, int32_t) const
		function Status310::vehiclespdvalid(const std::uint8_t *, int32_t) const
		function Status310::longitudedrivingmode(const std::uint8_t *, int32_t) const
		function Status310::engspdvalid(const std::uint8_t *, int32_t) const
		function Status310::accepedaloverride(const std::uint8_t *, int32_t) const
		function Status310::brakepedalstatus(const std::uint8_t *, int32_t) const
		function Status310::espbrakelightsts(const std::uint8_t *, int32_t) const
		function Status310::epbswtpositionvalid(const std::uint8_t *, int32_t) const
		function Status310::epbsts(const std::uint8_t *, int32_t) const
		function Status310::currentgearvalid(const std::uint8_t *, int32_t) const
		function Status310::epstrqsnsrsts(const std::uint8_t *, int32_t) const
		function Status310::eps_interferdetdvalid(const std::uint8_t *, int32_t) const
		function Status310::epshandsdetnsts(const std::uint8_t *, int32_t) const
		function Status310::eps_handsdetnstsvalid(const std::uint8_t *, int32_t) const
		function Status310::steerwheelanglesign(const std::uint8_t *, int32_t) const
		function Status310::steerwheelspdsign(const std::uint8_t *, int32_t) const
		function Status310::driverdoorsts(const std::uint8_t *, int32_t) const
		function Status310::rldoorsts(const std::uint8_t *, int32_t) const
		function Status310::passengerdoorsts(const std::uint8_t *, int32_t) const
		function Status310::rrdoorsts(const std::uint8_t *, int32_t) const
		function Status310::frontfoglmpsts(const std::uint8_t *, int32_t) const
		function Status310::rearfoglmpsts(const std::uint8_t *, int32_t) const
		function Status310::lowbeamsts(const std::uint8_t *, int32_t) const
		function Status310::highbeamsts(const std::uint8_t *, int32_t) const
		function Status310::leftturnlampsts(const std::uint8_t *, int32_t) const
		function Status310::rightturnlampsts(const std::uint8_t *, int32_t) const
		function Status310::bcm_availsts(const std::uint8_t *, int32_t) const
		function Status310::brakelmpsts(const std::uint8_t *, int32_t) const
namespace canbus
	namespace wey
		function Vinresp1391::Vinresp1391()
		variable Vinresp1391::ID
		function Vinresp1391::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vinresp1391::vin07(const std::uint8_t *, int32_t) const
		function Vinresp1391::vin06(const std::uint8_t *, int32_t) const
		function Vinresp1391::vin05(const std::uint8_t *, int32_t) const
		function Vinresp1391::vin04(const std::uint8_t *, int32_t) const
		function Vinresp1391::vin03(const std::uint8_t *, int32_t) const
		function Vinresp1391::vin02(const std::uint8_t *, int32_t) const
		function Vinresp1391::vin00(const std::uint8_t *, int32_t) const
		function Vinresp1391::vin01(const std::uint8_t *, int32_t) const
namespace canbus
	namespace wey
		function Vinresp2392::Vinresp2392()
		variable Vinresp2392::ID
		function Vinresp2392::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vinresp2392::vin15(const std::uint8_t *, int32_t) const
		function Vinresp2392::vin14(const std::uint8_t *, int32_t) const
		function Vinresp2392::vin13(const std::uint8_t *, int32_t) const
		function Vinresp2392::vin12(const std::uint8_t *, int32_t) const
		function Vinresp2392::vin11(const std::uint8_t *, int32_t) const
		function Vinresp2392::vin10(const std::uint8_t *, int32_t) const
		function Vinresp2392::vin09(const std::uint8_t *, int32_t) const
		function Vinresp2392::vin08(const std::uint8_t *, int32_t) const
namespace canbus
	namespace wey
		function Vinresp3393::Vinresp3393()
		variable Vinresp3393::ID
		function Vinresp3393::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vinresp3393::vin16(const std::uint8_t *, int32_t) const
namespace canbus
	namespace wey
		namespace `anonymous-namespace'
			variable kMaxFailAttempt
			variable CHECK_RESPONSE_STEER_UNIT_FLAG
			variable CHECK_RESPONSE_SPEED_UNIT_FLAG
			variable angle_init
		function WeyController::Init(const VehicleParameter &, CanSender<::apollo::canbus::ChassisDetail>* const, MessageManager<::apollo::canbus::ChassisDetail>* const)
		function WeyController::~WeyController()
		function WeyController::Start()
		function WeyController::Stop()
		function WeyController::chassis()
		function WeyController::Emergency()
		function WeyController::EnableAutoMode()
		function WeyController::DisableAutoMode()
		function WeyController::EnableSteeringOnlyMode()
		function WeyController::EnableSpeedOnlyMode()
		function WeyController::Gear(Chassis::GearPosition)
		function WeyController::Brake(double)
		function WeyController::Throttle(double)
		function WeyController::Acceleration(double)
		function WeyController::Steer(double)
		function WeyController::Steer(double, double)
		function WeyController::SetEpbBreak(const ControlCommand &)
		function WeyController::SetBeam(const ControlCommand &)
		function WeyController::SetHorn(const ControlCommand &)
		function WeyController::SetTurningSignal(const ControlCommand &)
		function WeyController::ResetProtocol()
		function WeyController::CheckChassisError()
		function WeyController::SecurityDogThreadFunc()
		function WeyController::CheckResponse(const int32_t, bool)
		function WeyController::set_chassis_error_mask(const int32_t)
		function WeyController::chassis_error_mask()
		function WeyController::chassis_error_code()
		function WeyController::set_chassis_error_code(const Chassis::ErrorCode &)
namespace canbus
	namespace wey
		function WeyMessageManager::WeyMessageManager()
		function WeyMessageManager::~WeyMessageManager()
namespace canbus
	function WeyVehicleFactory::CreateVehicleController()
	function WeyVehicleFactory::CreateMessageManager()
namespace canbus
	namespace zhongyun
		variable Brakecontrola4::ID
		function Brakecontrola4::Brakecontrola4()
		function Brakecontrola4::GetPeriod() const
		function Brakecontrola4::UpdateData(uint8_t *)
		function Brakecontrola4::Reset()
		function Brakecontrola4::set_brake_torque(double)
		function Brakecontrola4::set_p_brake_torque(uint8_t *, double)
		function Brakecontrola4::set_brake_enable_control(Brake_control_a4::Brake_enable_controlType)
		function Brakecontrola4::set_p_brake_enable_control(uint8_t *, Brake_control_a4::Brake_enable_controlType)
namespace canbus
	namespace zhongyun
		function Enablestatefeedbackc3::Enablestatefeedbackc3()
		variable Enablestatefeedbackc3::ID
		function Enablestatefeedbackc3::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Enablestatefeedbackc3::parking_enable_state(const std::uint8_t *, int32_t) const
		function Enablestatefeedbackc3::steering_enable_state(const std::uint8_t *, int32_t) const
		function Enablestatefeedbackc3::gear_enable_actual(const std::uint8_t *, int32_t) const
		function Enablestatefeedbackc3::driven_enable_state(const std::uint8_t *, int32_t) const
		function Enablestatefeedbackc3::brake_enable_state(const std::uint8_t *, int32_t) const
namespace canbus
	namespace zhongyun
		function Errorstatee1::Errorstatee1()
		variable Errorstatee1::ID
		function Errorstatee1::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Errorstatee1::brake_error_code(const std::uint8_t *, int32_t) const
		function Errorstatee1::driven_error_code(const std::uint8_t *, int32_t) const
		function Errorstatee1::steering_error_code(const std::uint8_t *, int32_t) const
		function Errorstatee1::parking_error_code(const std::uint8_t *, int32_t) const
		function Errorstatee1::gear_error_msg(const std::uint8_t *, int32_t) const
namespace canbus
	namespace zhongyun
		variable Gearcontrola1::ID
		function Gearcontrola1::Gearcontrola1()
		function Gearcontrola1::GetPeriod() const
		function Gearcontrola1::UpdateData(uint8_t *)
		function Gearcontrola1::Reset()
		function Gearcontrola1::set_gear_state_target(Gear_control_a1::Gear_state_targetType)
		function Gearcontrola1::set_p_gear_state_target(uint8_t *, Gear_control_a1::Gear_state_targetType)
		function Gearcontrola1::set_gear_enable_control(Gear_control_a1::Gear_enable_controlType)
		function Gearcontrola1::set_p_gear_enable_control(uint8_t *, Gear_control_a1::Gear_enable_controlType)
namespace canbus
	namespace zhongyun
		variable Parkingcontrola5::ID
		function Parkingcontrola5::Parkingcontrola5()
		function Parkingcontrola5::GetPeriod() const
		function Parkingcontrola5::UpdateData(uint8_t *)
		function Parkingcontrola5::Reset()
		function Parkingcontrola5::set_parking_target(Parking_control_a5::Parking_targetType)
		function Parkingcontrola5::set_p_parking_target(uint8_t *, Parking_control_a5::Parking_targetType)
		function Parkingcontrola5::set_parking_enable_control(Parking_control_a5::Parking_enable_controlType)
		function Parkingcontrola5::set_p_parking_enable_control(uint8_t *, Parking_control_a5::Parking_enable_controlType)
namespace canbus
	namespace zhongyun
		variable Steeringcontrola2::ID
		function Steeringcontrola2::Steeringcontrola2()
		function Steeringcontrola2::GetPeriod() const
		function Steeringcontrola2::UpdateData(uint8_t *)
		function Steeringcontrola2::Reset()
		function Steeringcontrola2::set_steering_target(double)
		function Steeringcontrola2::set_p_steering_target(uint8_t *, double)
		function Steeringcontrola2::set_steering_enable_control(Steering_control_a2::Steering_enable_controlType)
		function Steeringcontrola2::set_p_steering_enable_control(uint8_t *, Steering_control_a2::Steering_enable_controlType)
namespace canbus
	namespace zhongyun
		variable Torquecontrola3::ID
		function Torquecontrola3::Torquecontrola3()
		function Torquecontrola3::GetPeriod() const
		function Torquecontrola3::UpdateData(uint8_t *)
		function Torquecontrola3::Reset()
		function Torquecontrola3::set_driven_torque(double)
		function Torquecontrola3::set_p_driven_torque(uint8_t *, double)
		function Torquecontrola3::set_driven_enable_control(Torque_control_a3::Driven_enable_controlType)
		function Torquecontrola3::set_p_driven_enable_control(uint8_t *, Torque_control_a3::Driven_enable_controlType)
namespace canbus
	namespace zhongyun
		function Vehiclestatefeedback2c4::Vehiclestatefeedback2c4()
		variable Vehiclestatefeedback2c4::ID
		function Vehiclestatefeedback2c4::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vehiclestatefeedback2c4::motor_speed(const std::uint8_t *, int32_t) const
		function Vehiclestatefeedback2c4::driven_torque_feedback(const std::uint8_t *, int32_t) const
namespace canbus
	namespace zhongyun
		function Vehiclestatefeedbackc1::Vehiclestatefeedbackc1()
		variable Vehiclestatefeedbackc1::ID
		function Vehiclestatefeedbackc1::Parse(const std::uint8_t *, int32_t, ChassisDetail *) const
		function Vehiclestatefeedbackc1::parking_actual(const std::uint8_t *, int32_t) const
		function Vehiclestatefeedbackc1::brake_torque_feedback(const std::uint8_t *, int32_t) const
		function Vehiclestatefeedbackc1::gear_state_actual(const std::uint8_t *, int32_t) const
		function Vehiclestatefeedbackc1::steering_actual(const std::uint8_t *, int32_t) const
		function Vehiclestatefeedbackc1::speed(const std::uint8_t *, int32_t) const
namespace canbus
	namespace zhongyun
		namespace `anonymous-namespace'
			variable kMaxFailAttempt
			variable CHECK_RESPONSE_STEER_UNIT_FLAG
			variable CHECK_RESPONSE_SPEED_UNIT_FLAG
		function ZhongyunController::Init(const VehicleParameter &, CanSender<::apollo::canbus::ChassisDetail>* const, MessageManager<::apollo::canbus::ChassisDetail>* const)
		function ZhongyunController::~ZhongyunController()
		function ZhongyunController::Start()
		function ZhongyunController::Stop()
		function ZhongyunController::chassis()
		function ZhongyunController::Emergency()
		function ZhongyunController::EnableAutoMode()
		function ZhongyunController::DisableAutoMode()
		function ZhongyunController::EnableSteeringOnlyMode()
		function ZhongyunController::EnableSpeedOnlyMode()
		function ZhongyunController::Gear(Chassis::GearPosition)
		function ZhongyunController::Brake(double)
		function ZhongyunController::Throttle(double)
		function ZhongyunController::Acceleration(double)
		function ZhongyunController::Steer(double)
		function ZhongyunController::Steer(double, double)
		function ZhongyunController::SetEpbBreak(const ControlCommand &)
		function ZhongyunController::SetBeam(const ControlCommand &)
		function ZhongyunController::SetHorn(const ControlCommand &)
		function ZhongyunController::SetTurningSignal(const ControlCommand &)
		function ZhongyunController::ResetProtocol()
		function ZhongyunController::CheckChassisError()
		function ZhongyunController::SecurityDogThreadFunc()
		function ZhongyunController::CheckResponse(const int32_t, bool)
		function ZhongyunController::set_chassis_error_mask(const int32_t)
		function ZhongyunController::chassis_error_mask()
		function ZhongyunController::chassis_error_code()
		function ZhongyunController::set_chassis_error_code(const Chassis::ErrorCode &)
namespace canbus
	namespace zhongyun
		function ZhongyunMessageManager::ZhongyunMessageManager()
		function ZhongyunMessageManager::~ZhongyunMessageManager()
namespace canbus
	function ZhongyunVehicleFactory::CreateVehicleController()
	function ZhongyunVehicleFactory::CreateMessageManager()
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_int32
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_double
variable DEFINE_double
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
namespace common
	variable VehicleConfigHelper::vehicle_config_
	variable VehicleConfigHelper::is_init_
	function VehicleConfigHelper::VehicleConfigHelper()
	function VehicleConfigHelper::Init()
	function VehicleConfigHelper::Init(const std::string &)
	function VehicleConfigHelper::Init(const VehicleConfig &)
	function VehicleConfigHelper::GetConfig()
	function VehicleConfigHelper::MinSafeTurnRadius()
	function VehicleConfigHelper::GetBoundingBox(const common::PathPoint &)
namespace apollo
	namespace common
		function DigitalFilter::DigitalFilter(const std::vector<double>&, const std::vector<double>&)
		function DigitalFilter::set_denominators(const std::vector<double>&)
		function DigitalFilter::set_numerators(const std::vector<double>&)
		function DigitalFilter::set_coefficients(const std::vector<double>&, const std::vector<double>&)
		function DigitalFilter::set_dead_zone(const double)
		function DigitalFilter::Filter(const double)
		function DigitalFilter::reset_values()
		function DigitalFilter::UpdateLast(const double)
		function DigitalFilter::Compute(const std::deque<double>&, const std::vector<double>&, const std::size_t, const std::size_t)
		function DigitalFilter::denominators() const
		function DigitalFilter::numerators() const
		function DigitalFilter::dead_zone() const
		function DigitalFilter::inputs_queue() const
		function DigitalFilter::outputs_queue() const
namespace common
	function LpfCoefficients(const double, const double, std::vector<double>*, std::vector<double>*)
	function LpFirstOrderCoefficients(const double, const double, const double, std::vector<double>*, std::vector<double>*)
namespace common
	interface MF
	interface uint8
	interface TimedValue
	variable kMaxWindowSize
	function MF::MeanFilter(const uint8)
	function MF::GetMin() const
	function MF::GetMax() const
	function MF::Update(const double)
	function MF::ShouldPopOldestCandidate(const uint8) const
	function MF::RemoveEarliest()
	function MF::Insert(const double)
namespace apollo
	namespace common
		namespace `anonymous-namespace'
			class SqliteWraper
				method Callback(void *, int, char **, char **)
				method SqliteWraper()
				method ~SqliteWraper()
				method SQL(std::string_view, std::string *)
				method Release()
				field db_
		function KVDB::Put(std::string_view, std::string_view)
		function KVDB::Delete(std::string_view)
		function KVDB::Get(std::string_view)
variable DEFINE_string
variable DEFINE_string
function main(int32_t, char **)
namespace apollo
	namespace common
		function LatencyRecorder::LatencyRecorder(const std::string &)
		function LatencyRecorder::AppendLatencyRecord(const uint64_t, const Time &, const Time &)
		function LatencyRecorder::CreateWriter()
		function LatencyRecorder::PublishLatencyRecords(const std::shared_ptr<apollo::cyber::Writer<LatencyRecordMap>>&)
namespace common
	namespace math
		function AABox2d::AABox2d(const Vec2d &, const double, const double)
		function AABox2d::AABox2d(const Vec2d &, const Vec2d &)
		function AABox2d::AABox2d(const std::vector<Vec2d>&)
		function AABox2d::GetAllCorners(std::vector<Vec2d>* const) const
		function AABox2d::IsPointIn(const Vec2d &) const
		function AABox2d::IsPointOnBoundary(const Vec2d &) const
		function AABox2d::DistanceTo(const Vec2d &) const
		function AABox2d::DistanceTo(const AABox2d &) const
		function AABox2d::HasOverlap(const AABox2d &) const
		function AABox2d::Shift(const Vec2d &)
		function AABox2d::MergeFrom(const AABox2d &)
		function AABox2d::MergeFrom(const Vec2d &)
		function AABox2d::DebugString() const
namespace common
	namespace math
		function sin(Angle16)
		function cos(Angle16)
		function tan(Angle16)
		function sin(Angle8)
		function cos(Angle8)
		function tan(Angle8)
namespace common
	namespace math
		namespace `anonymous-namespace'
			function PtSegDistance(double, double, double, double, double, double, double)
		function Box2d::Box2d(const Vec2d &, const double, const double, const double)
		function Box2d::Box2d(const LineSegment2d &, const double)
		function Box2d::InitCorners()
		function Box2d::Box2d(const AABox2d &)
		function Box2d::CreateAABox(const Vec2d &, const Vec2d &)
		function Box2d::GetAllCorners(std::vector<Vec2d>* const) const
		function Box2d::GetAllCorners() const
		function Box2d::IsPointIn(const Vec2d &) const
		function Box2d::IsPointOnBoundary(const Vec2d &) const
		function Box2d::DistanceTo(const Vec2d &) const
		function Box2d::HasOverlap(const LineSegment2d &) const
		function Box2d::DistanceTo(const LineSegment2d &) const
		function Box2d::DistanceTo(const Box2d &) const
		function Box2d::HasOverlap(const Box2d &) const
		function Box2d::GetAABox() const
		function Box2d::RotateFromCenter(const double)
		function Box2d::Shift(const Vec2d &)
		function Box2d::LongitudinalExtend(const double)
		function Box2d::LateralExtend(const double)
		function Box2d::DebugString() const
namespace common
	namespace math
		function CartesianFrenetConverter::cartesian_to_frenet(const double, const double, const double, const double, const double, const double, const double, const double, const double, const double, const double, const double, std::array<double,3>* const, std::array<double,3>* const)
		function CartesianFrenetConverter::cartesian_to_frenet(const double, const double, const double, const double, const double, const double, double *, double *)
		function CartesianFrenetConverter::frenet_to_cartesian(const double, const double, const double, const double, const double, const double, const std::array<double,3>&, const std::array<double,3>&, double * const, double * const, double * const, double * const, double * const, double * const)
		function CartesianFrenetConverter::CalculateTheta(const double, const double, const double, const double)
		function CartesianFrenetConverter::CalculateKappa(const double, const double, const double, const double, const double)
		function CartesianFrenetConverter::CalculateCartesianPoint(const double, const Vec2d &, const double)
		function CartesianFrenetConverter::CalculateLateralDerivative(const double, const double, const double, const double)
		function CartesianFrenetConverter::CalculateSecondOrderLateralDerivative(const double, const double, const double, const double, const double, const double)
namespace common
	namespace math
		function IntegrateBySimpson(const std::vector<double>&, const double, const std::size_t)
		function IntegrateByTrapezoidal(const std::vector<double>&, const double, const std::size_t)
namespace common
	namespace math
		namespace `anonymous-namespace'
			function IsWithin(double, double, double)
		function LineSegment2d::LineSegment2d()
		function LineSegment2d::LineSegment2d(const Vec2d &, const Vec2d &)
		function LineSegment2d::rotate(const double)
		function LineSegment2d::length() const
		function LineSegment2d::length_sqr() const
		function LineSegment2d::DistanceTo(const Vec2d &) const
		function LineSegment2d::DistanceTo(const Vec2d &, Vec2d * const) const
		function LineSegment2d::DistanceSquareTo(const Vec2d &) const
		function LineSegment2d::DistanceSquareTo(const Vec2d &, Vec2d * const) const
		function LineSegment2d::IsPointIn(const Vec2d &) const
		function LineSegment2d::ProjectOntoUnit(const Vec2d &) const
		function LineSegment2d::ProductOntoUnit(const Vec2d &) const
		function LineSegment2d::HasIntersect(const LineSegment2d &) const
		function LineSegment2d::GetIntersect(const LineSegment2d &, Vec2d * const) const
		function LineSegment2d::GetPerpendicularFoot(const Vec2d &, Vec2d * const) const
		function LineSegment2d::DebugString() const
namespace common
	namespace math
		function slerp(const double, const double, const double, const double, const double)
		function InterpolateUsingLinearApproximation(const SLPoint &, const SLPoint &, const double)
		function InterpolateUsingLinearApproximation(const PathPoint &, const PathPoint &, const double)
		function InterpolateUsingLinearApproximation(const TrajectoryPoint &, const TrajectoryPoint &, const double)
namespace common
	namespace math
		interface Matrix
		function SolveLQRProblem(const Matrix &, const Matrix &, const Matrix &, const Matrix &, const Matrix &, const double, const uint, Matrix *)
		function SolveLQRProblem(const Matrix &, const Matrix &, const Matrix &, const Matrix &, const double, const uint, Matrix *)
namespace common
	namespace math
		function Sqr(const double)
		function CrossProd(const Vec2d &, const Vec2d &, const Vec2d &)
		function InnerProd(const Vec2d &, const Vec2d &, const Vec2d &)
		function CrossProd(const double, const double, const double, const double)
		function InnerProd(const double, const double, const double, const double)
		function WrapAngle(const double)
		function NormalizeAngle(const double)
		function AngleDiff(const double, const double)
		function RandomInt(const int, const int, unsigned int)
		function RandomDouble(const double, const double, unsigned int)
		function Gaussian(const double, const double, const double)
		function RotateVector2d(const Eigen::Vector2d &, const double)
		function Cartesian2Polar(double, double)
namespace common
	namespace math
		function ContinuousToDiscrete(const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const double, Eigen::MatrixXd *, Eigen::MatrixXd *, Eigen::MatrixXd *, Eigen::MatrixXd *)
namespace common
	namespace math
		function MpcOsqp::MpcOsqp(const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const int, const int, const double)
		function MpcOsqp::CalculateKernel(std::vector<c_float>*, std::vector<c_int>*, std::vector<c_int>*)
		function MpcOsqp::CalculateGradient()
		function MpcOsqp::CalculateEqualityConstraint(std::vector<c_float>*, std::vector<c_int>*, std::vector<c_int>*)
		function MpcOsqp::CalculateConstraintVectors()
		function MpcOsqp::Settings()
		function MpcOsqp::Data()
		function MpcOsqp::FreeData(OSQPData *)
		function MpcOsqp::Solve(std::vector<double>*)
namespace common
	namespace math
		function PathMatcher::MatchToPath(const std::vector<PathPoint>&, const double, const double)
		function PathMatcher::GetPathFrenetCoordinate(const std::vector<PathPoint>&, const double, const double)
		function PathMatcher::MatchToPath(const std::vector<PathPoint>&, const double)
		function PathMatcher::FindProjectionPoint(const PathPoint &, const PathPoint &, const double, const double)
namespace common
	namespace math
		function Polygon2d::Polygon2d(const Box2d &)
		function Polygon2d::Polygon2d(std::vector<Vec2d>)
		function Polygon2d::DistanceTo(const Vec2d &) const
		function Polygon2d::DistanceSquareTo(const Vec2d &) const
		function Polygon2d::DistanceTo(const LineSegment2d &) const
		function Polygon2d::DistanceTo(const Box2d &) const
		function Polygon2d::DistanceTo(const Polygon2d &) const
		function Polygon2d::DistanceToBoundary(const Vec2d &) const
		function Polygon2d::IsPointOnBoundary(const Vec2d &) const
		function Polygon2d::IsPointIn(const Vec2d &) const
		function Polygon2d::HasOverlap(const Polygon2d &) const
		function Polygon2d::Contains(const LineSegment2d &) const
		function Polygon2d::Contains(const Polygon2d &) const
		function Polygon2d::Next(int) const
		function Polygon2d::Prev(int) const
		function Polygon2d::BuildFromPoints()
		function Polygon2d::ComputeConvexHull(const std::vector<Vec2d>&, Polygon2d * const)
		function Polygon2d::ClipConvexHull(const LineSegment2d &, std::vector<Vec2d>* const)
		function Polygon2d::ComputeOverlap(const Polygon2d &, Polygon2d * const) const
		function Polygon2d::ComputeIoU(const Polygon2d &) const
		function Polygon2d::HasOverlap(const LineSegment2d &) const
		function Polygon2d::GetOverlap(const LineSegment2d &, Vec2d * const, Vec2d * const) const
		function Polygon2d::GetAllVertices(std::vector<Vec2d>* const) const
		function Polygon2d::GetAllVertices() const
		function Polygon2d::GetAllOverlaps(const LineSegment2d &) const
		function Polygon2d::ExtremePoints(const double, Vec2d * const, Vec2d * const) const
		function Polygon2d::AABoundingBox() const
		function Polygon2d::BoundingBoxWithHeading(const double) const
		function Polygon2d::MinAreaBoundingBox() const
		function Polygon2d::ExpandByDistance(const double) const
		function Polygon2d::DebugString() const
namespace common
	namespace math
		function QpSolver::QpSolver(const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &)
		function QpSolver::params() const
		function QpSolver::kernel_matrix() const
		function QpSolver::offset() const
		function QpSolver::affine_equality_matrix() const
		function QpSolver::affine_equality_boundary() const
		function QpSolver::affine_inequality_matrix() const
		function QpSolver::affine_inequality_boundary() const
namespace common
	namespace math
		function GoldenSectionSearch(const std::function<double(double)>&, const double, const double, const double)
namespace common
	namespace math
		variable SIN_TABLE
namespace common
	namespace math
		function Vec2d::CreateUnitVec2d(const double)
		function Vec2d::Length() const
		function Vec2d::LengthSquare() const
		function Vec2d::Angle() const
		function Vec2d::Normalize()
		function Vec2d::DistanceTo(const Vec2d &) const
		function Vec2d::DistanceSquareTo(const Vec2d &) const
		function Vec2d::CrossProd(const Vec2d &) const
		function Vec2d::InnerProd(const Vec2d &) const
		function Vec2d::rotate(const double) const
		function Vec2d::SelfRotate(const double)
		function Vec2d::operator+(const Vec2d &) const
		function Vec2d::operator-(const Vec2d &) const
		function Vec2d::operator*(const double) const
		function Vec2d::operator/(const double) const
		function Vec2d::operator+=(const Vec2d &)
		function Vec2d::operator-=(const Vec2d &)
		function Vec2d::operator*=(const double)
		function Vec2d::operator/=(const double)
		function Vec2d::operator==(const Vec2d &) const
		function Vec2d::DebugString() const
		operator operator*(const double, const Vec2d &)
namespace common
	namespace monitor
		function MonitorLogBuffer::MonitorLogBuffer(const MonitorMessageItem::MessageSource &)
		function MonitorLogBuffer::Publish()
		function MonitorLogBuffer::~MonitorLogBuffer()
		function MonitorLogBuffer::AddMonitorMsgItem(const MonitorMessageItem::LogLevel, const std::string &)
namespace apollo
	namespace common
		namespace monitor
			function MonitorLogger::MonitorLogger()
			function MonitorLogger::Publish(const MonitorMessageItem::MessageSource &, const std::vector<MessageItem>&) const
			function MonitorLogger::DoPublish(MonitorMessage *) const
namespace common
	namespace util
		namespace `anonymous-namespace'
			interface Json
			function JsonOption()
		function JsonUtil::ProtoToTypedJson(const std::string &, const google::protobuf::Message &)
		function JsonUtil::GetString(const Json &, const std::string &, std::string *)
		function JsonUtil::GetStringVector(const Json &, const std::string &, std::vector<std::string>*)
		function JsonUtil::GetBoolean(const nlohmann::json &, const std::string &, bool *)
function func_name_simplified(const std::string &)
namespace apollo
	namespace common
		namespace util
			function function_signature(const std::string &, const std::string &)
			function Timer::Start()
			function Timer::End(const std::string &)
namespace common
	namespace util
		namespace `anonymous-namespace'
			variable kBase64Array
			function Base64Piece(const char, const char, const char)
		function EncodeBase64(std::string_view)
namespace common
	namespace util
		operator operator+(const PointENU, const math::Vec2d &)
		function GetWeightedAverageOfTwoPathPoints(const PathPoint &, const PathPoint &, const double, const double)
namespace common
	function VehicleModel::RearCenteredKinematicBicycleModel(const VehicleModelConfig &, const double, const VehicleState &, VehicleState *)
	function VehicleModel::Predict(const double, const VehicleState &)
namespace common
	function VehicleStateProvider::Update(const localization::LocalizationEstimate &, const canbus::Chassis &)
	function VehicleStateProvider::ConstructExceptLinearVelocity(const localization::LocalizationEstimate &)
	function VehicleStateProvider::x() const
	function VehicleStateProvider::y() const
	function VehicleStateProvider::z() const
	function VehicleStateProvider::roll() const
	function VehicleStateProvider::pitch() const
	function VehicleStateProvider::yaw() const
	function VehicleStateProvider::heading() const
	function VehicleStateProvider::kappa() const
	function VehicleStateProvider::linear_velocity() const
	function VehicleStateProvider::angular_velocity() const
	function VehicleStateProvider::linear_acceleration() const
	function VehicleStateProvider::gear() const
	function VehicleStateProvider::steering_percentage() const
	function VehicleStateProvider::timestamp() const
	function VehicleStateProvider::pose() const
	function VehicleStateProvider::original_pose() const
	function VehicleStateProvider::set_linear_velocity(const double)
	function VehicleStateProvider::vehicle_state() const
	function VehicleStateProvider::EstimateFuturePosition(const double) const
	function VehicleStateProvider::ComputeCOMPosition(const double) const
function Client::Client(Node *, Clients *, boost::asio::ip::tcp::socket)
function Client::~Client()
function Client::start()
function Client::stop()
function Client::handle_read(const boost::system::error_code &, std::size_t)
function Client::handle_write(const boost::system::error_code &)
function Client::handle_register_desc()
function Client::handle_add_reader()
function Client::handle_add_writer()
function Client::handle_publish()
function fill_data(std::vector<uint8_t>*, const std::string &, const std::string &)
function Client::publish(const std::string &, const std::string &)
function Client::get32le(size_t) const
function Clients::~Clients()
function Clients::start(std::shared_ptr<Client>)
function Clients::stop(std::shared_ptr<Client>)
function Clients::stop_all()
function Node::Node()
function Node::~Node()
function Node::remove(std::shared_ptr<Client>)
function Node::add_reader(const std::string &, const std::string &, std::shared_ptr<Client>)
function Node::add_writer(const std::string &, const std::string &, std::shared_ptr<Client>)
function Node::publish(const std::string &, const std::string &)
function Server::Server(Node *)
function Server::~Server()
function Server::run()
function Server::stop(const boost::system::error_code &, int)
function Server::begin_accept()
function Server::end_accept(const boost::system::error_code &)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_double
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_double
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
namespace control
	function HysteresisFilter::filter(const double, const double, const double, const double, int *, double *)
namespace control
	variable kDoubleEpsilon
	function Interpolation1D::Init(const DataType &)
	function Interpolation1D::Interpolate(double) const
	function Interpolation1D::ScaledValue(double) const
	function Interpolation1D::ScaledValues(Eigen::VectorXd const &) const
namespace apollo
	namespace control
		function Interpolation2D::Init(const DataType &)
		function Interpolation2D::Interpolate(const KeyType &) const
		function Interpolation2D::InterpolateYz(const std::map<double,double>&, double) const
		function Interpolation2D::InterpolateValue(const double, const double, const double, const double) const
namespace control
	function LeadlagController::Control(const double, const double)
	function LeadlagController::Reset()
	function LeadlagController::Init(const LeadlagConf &, const double)
	function LeadlagController::SetLeadlag(const LeadlagConf &)
	function LeadlagController::TransformC2d(const double)
	function LeadlagController::InnerstateSaturationStatus() const
namespace control
	interface Matrix
	function MracController::Control(const double, const Matrix, const double, const double)
	function MracController::Reset()
	function MracController::ResetStates()
	function MracController::ResetGains()
	function MracController::Init(const MracConf &, const LatencyParam &, const double)
	function MracController::SetReferenceModel(const MracConf &)
	function MracController::SetAdaptionModel(const MracConf &)
	function MracController::BuildReferenceModel()
	function MracController::BuildAdaptionModel()
	function MracController::CheckLyapunovPD(const Matrix, const Matrix) const
	function MracController::EstimateInitialGains(const LatencyParam &)
	function MracController::UpdateReference()
	function MracController::UpdateAdaption(Matrix *, const Matrix, const Matrix)
	function MracController::AntiWindupCompensation(const double, const double)
	function MracController::BoundOutput(const double, const double, double *)
	function MracController::SetInitialReferenceState(const Matrix &)
	function MracController::SetInitialActionState(const Matrix &)
	function MracController::SetInitialCommand(const double)
	function MracController::SetInitialStateAdaptionGain(const Matrix &)
	function MracController::SetInitialInputAdaptionGain(const double)
	function MracController::SetInitialNonlinearAdaptionGain(const double)
	function MracController::SetStateAdaptionRate(const double)
	function MracController::SetInputAdaptionRate(const double)
	function MracController::SetNonlinearAdaptionRate(const double)
	function MracController::StateAdaptionRate() const
	function MracController::InputAdaptionRate() const
	function MracController::NonlinearAdaptionRate() const
	function MracController::ReferenceSaturationStatus() const
	function MracController::ControlSaturationStatus() const
	function MracController::CurrentReferenceState() const
	function MracController::CurrentStateAdaptionGain() const
	function MracController::CurrentInputAdaptionGain() const
	function MracController::CurrentNonlinearAdaptionGain() const
namespace control
	function PIDBCController::Control(const double, const double)
	function PIDBCController::OutputSaturationStatus()
namespace control
	function PIDICController::Control(const double, const double)
	function PIDICController::OutputSaturationStatus()
namespace control
	function PIDController::Control(const double, const double)
	function PIDController::Reset()
	function PIDController::Init(const PidConf &)
	function PIDController::SetPID(const PidConf &)
	function PIDController::IntegratorSaturationStatus() const
	function PIDController::IntegratorHold() const
	function PIDController::SetIntegratorHold(bool)
namespace apollo
	namespace control
		namespace `anonymous-namespace'
			function PointDistanceSquare(const TrajectoryPoint &, const double, const double)
			function TrajectoryPointToPathPoint(const TrajectoryPoint &)
		function TrajectoryAnalyzer::TrajectoryAnalyzer(const planning::ADCTrajectory *)
		function TrajectoryAnalyzer::QueryMatchedPathPoint(const double, const double) const
		function TrajectoryAnalyzer::ToTrajectoryFrame(const double, const double, const double, const double, const PathPoint &, double *, double *, double *, double *) const
		function TrajectoryAnalyzer::QueryNearestPointByAbsoluteTime(const double) const
		function TrajectoryAnalyzer::QueryNearestPointByRelativeTime(const double) const
		function TrajectoryAnalyzer::QueryNearestPointByPosition(const double, const double) const
		function TrajectoryAnalyzer::trajectory_points() const
		function TrajectoryAnalyzer::FindMinDistancePoint(const TrajectoryPoint &, const TrajectoryPoint &, const double, const double) const
		function TrajectoryAnalyzer::TrajectoryTransformToCOM(const double)
		function TrajectoryAnalyzer::ComputeCOMPosition(const double, const PathPoint &) const
namespace control
	function ControlComponent::ControlComponent()
	function ControlComponent::Init()
	function ControlComponent::OnPad(const std::shared_ptr<PadMessage>&)
	function ControlComponent::OnChassis(const std::shared_ptr<Chassis>&)
	function ControlComponent::OnPlanning(const std::shared_ptr<ADCTrajectory>&)
	function ControlComponent::OnLocalization(const std::shared_ptr<LocalizationEstimate>&)
	function ControlComponent::OnMonitor(const common::monitor::MonitorMessage &)
	function ControlComponent::ProduceControlCommand(ControlCommand *)
	function ControlComponent::Proc()
	function ControlComponent::CheckInput(LocalView *)
	function ControlComponent::CheckTimestamp(const LocalView &)
namespace control
	function ControllerAgent::RegisterControllers(const ControlConf *)
	function ControllerAgent::InitializeConf(const ControlConf *)
	function ControllerAgent::Init(std::shared_ptr<DependencyInjector>, const ControlConf *)
	function ControllerAgent::ComputeControlCommand(const localization::LocalizationEstimate *, const canbus::Chassis *, const planning::ADCTrajectory *, control::ControlCommand *)
	function ControllerAgent::Reset()
namespace control
	interface Matrix
	namespace `anonymous-namespace'
		function GetLogFileName()
		function WriteHeaders(std::ofstream &)
	function LatController::LatController()
	function LatController::~LatController()
	function LatController::LoadControlConf(const ControlConf *)
	function LatController::ProcessLogs(const SimpleLateralDebug *, const canbus::Chassis *)
	function LatController::LogInitParameters()
	function LatController::InitializeFilters(const ControlConf *)
	function LatController::Init(std::shared_ptr<DependencyInjector>, const ControlConf *)
	function LatController::CloseLogFile()
	function LatController::LoadLatGainScheduler(const LatControllerConf &)
	function LatController::Stop()
	function LatController::Name() const
	function LatController::ComputeControlCommand(const localization::LocalizationEstimate *, const canbus::Chassis *, const planning::ADCTrajectory *, ControlCommand *)
	function LatController::Reset()
	function LatController::UpdateState(SimpleLateralDebug *)
	function LatController::UpdateMatrix()
	function LatController::UpdateMatrixCompound()
	function LatController::ComputeFeedForward(double) const
	function LatController::ComputeLateralErrors(const double, const double, const double, const double, const double, const double, const TrajectoryAnalyzer &, SimpleLateralDebug *)
	function LatController::UpdateDrivingOrientation()
namespace control
	variable GRA_ACC
	function LonController::LonController()
	function LonController::CloseLogFile()
	function LonController::Stop()
	function LonController::~LonController()
	function LonController::Init(std::shared_ptr<DependencyInjector>, const ControlConf *)
	function LonController::SetDigitalFilterPitchAngle(const LonControllerConf &)
	function LonController::LoadControlCalibrationTable(const LonControllerConf &)
	function LonController::ComputeControlCommand(const localization::LocalizationEstimate *, const canbus::Chassis *, const planning::ADCTrajectory *, control::ControlCommand *)
	function LonController::Reset()
	function LonController::Name() const
	function LonController::ComputeLongitudinalErrors(const TrajectoryAnalyzer *, const double, const double, SimpleLongitudinalDebug *)
	function LonController::SetDigitalFilter(double, double, common::DigitalFilter *)
	function LonController::GetPathRemain(SimpleLongitudinalDebug *)
namespace control
	interface Matrix
	namespace `anonymous-namespace'
		function GetLogFileName()
		function WriteHeaders(std::ofstream &)
	function MPCController::MPCController()
	function MPCController::~MPCController()
	function MPCController::LoadControlConf(const ControlConf *)
	function MPCController::ProcessLogs(const SimpleMPCDebug *, const canbus::Chassis *)
	function MPCController::LogInitParameters()
	function MPCController::InitializeFilters(const ControlConf *)
	function MPCController::Init(std::shared_ptr<DependencyInjector>, const ControlConf *)
	function MPCController::CloseLogFile()
	function MPCController::Wheel2SteerPct(const double)
	function MPCController::Stop()
	function MPCController::Name() const
	function MPCController::LoadMPCGainScheduler(const MPCControllerConf &)
	function MPCController::ComputeControlCommand(const localization::LocalizationEstimate *, const canbus::Chassis *, const planning::ADCTrajectory *, ControlCommand *)
	function MPCController::Reset()
	function MPCController::LoadControlCalibrationTable(const MPCControllerConf &)
	function MPCController::UpdateState(SimpleMPCDebug *)
	function MPCController::UpdateMatrix(SimpleMPCDebug *)
	function MPCController::FeedforwardUpdate(SimpleMPCDebug *)
	function MPCController::ComputeLateralErrors(const double, const double, const double, const double, const double, const double, const TrajectoryAnalyzer &, SimpleMPCDebug *)
	function MPCController::ComputeLongitudinalErrors(const TrajectoryAnalyzer *, SimpleMPCDebug *)
namespace control
	function LatLonControllerSubmodule::LatLonControllerSubmodule()
	function LatLonControllerSubmodule::~LatLonControllerSubmodule()
	function LatLonControllerSubmodule::Name() const
	function LatLonControllerSubmodule::Init()
	function LatLonControllerSubmodule::Proc(const std::shared_ptr<Preprocessor>&)
	function LatLonControllerSubmodule::ProduceControlCoreCommand(const LocalView &, ControlCommand *)
namespace control
	function MPCControllerSubmodule::MPCControllerSubmodule()
	function MPCControllerSubmodule::~MPCControllerSubmodule()
	function MPCControllerSubmodule::Name() const
	function MPCControllerSubmodule::Init()
	function MPCControllerSubmodule::Proc(const std::shared_ptr<Preprocessor>&)
	function MPCControllerSubmodule::ProduceControlCoreCommand(const LocalView &, ControlCommand *)
namespace control
	function PostprocessorSubmodule::Name() const
	function PostprocessorSubmodule::Init()
	function PostprocessorSubmodule::Proc(const std::shared_ptr<ControlCommand>&)
namespace control
	function PreprocessorSubmodule::PreprocessorSubmodule()
	function PreprocessorSubmodule::~PreprocessorSubmodule()
	function PreprocessorSubmodule::Name() const
	function PreprocessorSubmodule::Init()
	function PreprocessorSubmodule::Proc(const std::shared_ptr<LocalView>&)
	function PreprocessorSubmodule::ProducePreprocessorStatus(Preprocessor *)
	function PreprocessorSubmodule::CheckInput(LocalView *)
	function PreprocessorSubmodule::CheckTimestamp(const LocalView &)
function main(int, char **)
namespace data
	function ChannelPool::ChannelPool()
namespace data
	function DriveEventTrigger::DriveEventTrigger()
	function DriveEventTrigger::Pull(const cyber::record::RecordMessage &)
namespace data
	function EmergencyModeTrigger::EmergencyModeTrigger()
	function EmergencyModeTrigger::Pull(const cyber::record::RecordMessage &)
namespace data
	function HardBrakeTrigger::HardBrakeTrigger()
	function HardBrakeTrigger::Pull(const cyber::record::RecordMessage &)
	function HardBrakeTrigger::IsNoisy(const float) const
	function HardBrakeTrigger::IsHardBrake() const
	function HardBrakeTrigger::EnqueueMessage(const float)
namespace data
	function IntervalPool::IntervalPool()
	function IntervalPool::AddInterval(const Interval &)
	function IntervalPool::AddInterval(const uint64_t, const uint64_t)
	function IntervalPool::ReorgIntervals()
	function IntervalPool::MessageFallIntoRange(const uint64_t)
	function IntervalPool::Reset()
	function IntervalPool::PrintIntervals() const
	function IntervalPool::LogIntervalEvent(const std::string &, const std::string &, const uint64_t, const uint64_t, const uint64_t) const
	function IntervalPool::GetNextInterval() const
namespace data
	function PostRecordProcessor::Init(const SmartRecordTrigger &)
	function PostRecordProcessor::Process()
	function PostRecordProcessor::GetDefaultOutputFile() const
	function PostRecordProcessor::LoadSourceRecords()
namespace apollo
	namespace data
		namespace `anonymous-namespace'
			function GetNextRecordFileName(const std::string &)
			function IsRecordValid(const std::string &)
		function RealtimeRecordProcessor::RealtimeRecordProcessor(const std::string &, const std::string &)
		function RealtimeRecordProcessor::Init(const SmartRecordTrigger &)
		function RealtimeRecordProcessor::Process()
		function RealtimeRecordProcessor::MonitorStatus()
		function RealtimeRecordProcessor::PublishStatus(const RecordingState, const std::string &) const
		function RealtimeRecordProcessor::GetNextValidRecord(std::string *) const
		function RealtimeRecordProcessor::RestoreMessage(const uint64_t)
namespace data
	function RecordProcessor::RecordProcessor(const std::string &, const std::string &)
	function RecordProcessor::Init(const SmartRecordTrigger &)
	function RecordProcessor::InitTriggers(const SmartRecordTrigger &)
	function RecordProcessor::ShouldRestore(const cyber::record::RecordMessage &) const
namespace data
	function RegularIntervalTrigger::RegularIntervalTrigger()
	function RegularIntervalTrigger::Pull(const cyber::record::RecordMessage &)
namespace data
	function SmallTopicsTrigger::SmallTopicsTrigger()
	function SmallTopicsTrigger::ShouldRestore(const cyber::record::RecordMessage &) const
function main(int, char **)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_bool
namespace data
	variable MAX_STEER_PER
	variable MIN_STEER_PER
	function SwerveTrigger::SwerveTrigger()
	function SwerveTrigger::Pull(const cyber::record::RecordMessage &)
	function SwerveTrigger::IsNoisy(const float) const
	function SwerveTrigger::IsSwerve() const
	function SwerveTrigger::EnqueueMessage(const float)
namespace data
	function TriggerBase::Init(const SmartRecordTrigger &)
	function TriggerBase::SecondsToNanoSeconds(const double) const
	function TriggerBase::LockTrigger(const SmartRecordTrigger &)
	function TriggerBase::GetValidValueInRange(const double, const double, const double) const
	function TriggerBase::TriggerIt(const uint64_t) const
variable DEFINE_bool
variable DEFINE_int32
variable DEFINE_string
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_double
variable DEFINE_bool
variable DEFINE_uint32
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_string
variable DEFINE_int32
variable DEFINE_string
variable DEFINE_double
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
namespace dreamview
	function Dreamview::~Dreamview()
	function Dreamview::TerminateProfilingMode()
	function Dreamview::Init()
	function Dreamview::Start()
	function Dreamview::Stop()
namespace dreamview
	interface Json
	namespace `anonymous-namespace'
		function GetProtobufFloatByFieldName(const google::protobuf::Message &, const google::protobuf::Descriptor *, const google::protobuf::Reflection *, const std::string &, float *)
		function IsCompliedWithCriterion(float, const ComparisonOperator &, float)
	function DataCollectionMonitor::DataCollectionMonitor()
	function DataCollectionMonitor::~DataCollectionMonitor()
	function DataCollectionMonitor::InitReaders()
	function DataCollectionMonitor::LoadConfiguration()
	function DataCollectionMonitor::ConstructCategories()
	function DataCollectionMonitor::ConstructCategoriesHelper(const std::string &, const Scenario &, int, std::string, const Category &)
	function DataCollectionMonitor::Start()
	function DataCollectionMonitor::Stop()
	function DataCollectionMonitor::OnChassis(const std::shared_ptr<Chassis>&)
	function DataCollectionMonitor::IsCompliedWithCriteria(const std::shared_ptr<Chassis>&, const Category &)
	function DataCollectionMonitor::GetProgressAsJson()
variable DEFINE_string
variable DEFINE_string
namespace dreamview
	function FuelMonitorManager::FuelMonitorManager()
	function FuelMonitorManager::RegisterFuelMonitor(const std::string &, std::unique_ptr<FuelMonitor>&&)
	function FuelMonitorManager::SetCurrentMode(const std::string &)
	function FuelMonitorManager::GetCurrentMonitors()
namespace dreamview
	interface Json
	function PreprocessMonitor::PreprocessMonitor()
	function PreprocessMonitor::PreprocessMonitor(const std::string &)
	function PreprocessMonitor::~PreprocessMonitor()
	function PreprocessMonitor::InitReaders()
	function PreprocessMonitor::LoadConfiguration()
	function PreprocessMonitor::Start()
	function PreprocessMonitor::Stop()
	function PreprocessMonitor::OnProgress(const std::shared_ptr<Progress>&)
	function PreprocessMonitor::GetProgressAsJson()
namespace dreamview
	variable ImageHandler::kImageScale
	function ImageHandler::OnImage<>(const std::shared_ptr<Image>&)
	function ImageHandler::OnImage<>(const std::shared_ptr<CompressedImage>&)
	function ImageHandler::OnImageFront(const std::shared_ptr<Image>&)
	function ImageHandler::OnImageShort(const std::shared_ptr<CompressedImage>&)
	function ImageHandler::ImageHandler()
	function ImageHandler::handleGet(CivetServer *, mg_connection *)
namespace dreamview
	function WebSocketHandler::handleReadyState(CivetServer *, Connection *)
	function WebSocketHandler::handleClose(CivetServer *, const Connection *)
	function WebSocketHandler::BroadcastData(const std::string &, bool)
	function WebSocketHandler::SendBinaryData(Connection *, const std::string &, bool)
	function WebSocketHandler::SendData(Connection *, const std::string &, bool, int)
	variable WebSocketHandler::current_opcode_
	variable WebSocketHandler::data_
	function WebSocketHandler::handleData(CivetServer *, Connection *, int, char *, size_t)
	function WebSocketHandler::handleJsonData(Connection *, const std::string &)
	function WebSocketHandler::handleBinaryData(Connection *, const std::string &)
namespace dreamview
	interface Json
	function HMI::HMI(WebSocketHandler *, MapService *)
	function HMI::Start()
	function HMI::Stop()
	function HMI::RegisterMessageHandlers()
	function HMI::SendVehicleParam(WebSocketHandler::Connection *)
	function HMI::SendStatus(WebSocketHandler::Connection *)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_double
variable DEFINE_string
variable DEFINE_string
namespace apollo
	namespace dreamview
		namespace `anonymous-namespace'
			interface RLock
			interface WLock
			variable kNavigationModeName
			function TitleCase(std::string_view)
			function ListDirAsDict(const std::string &)
			function ListFilesAsDict(std::string_view, std::string_view)
			function SetGlobalFlag<FlagType, ValueType>(std::string_view, const ValueType &, FlagType *)
			function System(std::string_view)
		function HMIWorker::HMIWorker(const std::shared_ptr<Node>&)
		function HMIWorker::Start()
		function HMIWorker::Stop()
		function HMIWorker::LoadConfig()
		function HMIWorker::LoadMode(const std::string &)
		function HMIWorker::InitStatus()
		function HMIWorker::InitReadersAndWriters()
		function HMIWorker::Trigger(const HMIAction)
		function HMIWorker::Trigger(const HMIAction, const std::string &)
		function HMIWorker::SubmitAudioEvent(const uint64_t, const int, const int, const int, const int, const bool)
		function HMIWorker::SubmitDriveEvent(const uint64_t, const std::string &, const std::vector<std::string>&, const bool)
		function HMIWorker::SensorCalibrationPreprocess(const std::string &)
		function HMIWorker::VehicleCalibrationPreprocess()
		function HMIWorker::ChangeDrivingMode(const Chassis::DrivingMode)
		function HMIWorker::ChangeMap(const std::string &)
		function HMIWorker::ChangeVehicle(const std::string &)
		function HMIWorker::ChangeMode(const std::string &)
		function HMIWorker::StartModule(const std::string &) const
		function HMIWorker::StopModule(const std::string &) const
		function HMIWorker::GetStatus() const
		function HMIWorker::SetupMode() const
		function HMIWorker::ResetMode() const
		function HMIWorker::StatusUpdateThreadLoop()
		function HMIWorker::ResetComponentStatusTimer()
		function HMIWorker::UpdateComponentStatus()
namespace apollo
	namespace dreamview
		function VehicleManager::VehicleManager()
		function VehicleManager::GetVehicleDataPath() const
		function VehicleManager::UseVehicle(const std::string &)
function main(int, char **)
namespace dreamview
	namespace `anonymous-namespace'
		function ExtractIds<MapElementInfoConstPtr>(const std::vector<MapElementInfoConstPtr>&, RepeatedPtrField<std::string>*)
		function ExtractRoadAndLaneIds(const std::vector<LaneInfoConstPtr>&, RepeatedPtrField<std::string>*, RepeatedPtrField<std::string>*)
	variable MapService::kMetaFileName
	function MapService::MapService(bool)
	function MapService::ReloadMap(bool)
	function MapService::UpdateOffsets()
	function MapService::HDMap() const
	function MapService::SimMap() const
	function MapService::MapReady() const
	function MapService::CollectMapElementIds(const PointENU &, double, MapElementIds *) const
	function MapService::RetrieveMapElements(const MapElementIds &) const
	function MapService::GetNearestLane(const double, const double, LaneInfoConstPtr *, double *, double *) const
	function MapService::GetNearestLaneWithHeading(const double, const double, LaneInfoConstPtr *, double *, double *, const double) const
	function MapService::GetPathsFromRouting(const RoutingResponse &, std::vector<Path>*) const
	function MapService::GetPoseWithRegardToLane(const double, const double, double *, double *) const
	function MapService::ConstructLaneWayPoint(const double, const double, routing::LaneWaypoint *) const
	function MapService::ConstructLaneWayPointWithHeading(const double, const double, const double, routing::LaneWaypoint *) const
	function MapService::CheckRoutingPoint(const double, const double) const
	function MapService::CheckRoutingPointLaneType(LaneInfoConstPtr) const
	function MapService::GetStartPoint(apollo::common::PointENU *) const
	function MapService::CreatePathsFromRouting(const RoutingResponse &, std::vector<Path>*) const
	function MapService::AddPathFromPassageRegion(const routing::Passage &, std::vector<Path>*) const
	function MapService::CalculateMapHash(const MapElementIds &) const
namespace dreamview
	namespace `anonymous-namespace'
		function ConvertMatrixToArray(const Eigen::Matrix4d &, std::vector<double>*)
		function ConstructTransformationMatrix<Point>(const Quaternion &, const Point &, Eigen::Matrix4d *)
	function PerceptionCameraUpdater::PerceptionCameraUpdater(WebSocketHandler *)
	function PerceptionCameraUpdater::Start()
	function PerceptionCameraUpdater::Stop()
	function PerceptionCameraUpdater::GetImageLocalization(std::vector<double>*)
	function PerceptionCameraUpdater::QueryStaticTF(const std::string &, const std::string &, Eigen::Matrix4d *)
	function PerceptionCameraUpdater::GetLocalization2CameraTF(std::vector<double>*)
	function PerceptionCameraUpdater::OnImage(const std::shared_ptr<CompressedImage>&)
	function PerceptionCameraUpdater::OnLocalization(const std::shared_ptr<LocalizationEstimate>&)
	function PerceptionCameraUpdater::InitReaders()
	function PerceptionCameraUpdater::GetUpdate(std::string *)
namespace dreamview
	interface Json
	variable PointCloudUpdater::lidar_height_
	variable PointCloudUpdater::mutex_
	function PointCloudUpdater::PointCloudUpdater(WebSocketHandler *, SimulationWorldUpdater *)
	function PointCloudUpdater::~PointCloudUpdater()
	function PointCloudUpdater::LoadLidarHeight(const std::string &)
	function PointCloudUpdater::RegisterMessageHandlers()
	function PointCloudUpdater::Start()
	function PointCloudUpdater::Stop()
	function PointCloudUpdater::ConvertPCLPointCloud(const std::shared_ptr<drivers::PointCloud>&)
	function PointCloudUpdater::UpdatePointCloud(const std::shared_ptr<drivers::PointCloud>&)
	function PointCloudUpdater::FilterPointCloud(pcl::PointCloud<pcl::PointXYZ>::Ptr)
	function PointCloudUpdater::UpdateLocalizationTime(const std::shared_ptr<LocalizationEstimate>&)
namespace dreamview
	namespace `anonymous-namespace'
		function TransformToVRF(const Point3D &, const Quaternion &, Point3D *)
		function IsSameHeader(const Header &, const Header &)
	function SimControl::SimControl(const MapService *)
	function SimControl::InitTimerAndIO()
	function SimControl::Init(double, double)
	function SimControl::InitStartPoint(double, double)
	function SimControl::SetStartPoint(const TrajectoryPoint &)
	function SimControl::Reset()
	function SimControl::InternalReset()
	function SimControl::ClearPlanning()
	function SimControl::OnReceiveNavigationInfo(const std::shared_ptr<NavigationInfo>&)
	function SimControl::OnRoutingResponse(const std::shared_ptr<RoutingResponse>&)
	function SimControl::OnPredictionObstacles(const std::shared_ptr<PredictionObstacles>&)
	function SimControl::Start()
	function SimControl::Stop()
	function SimControl::OnPlanning(const std::shared_ptr<ADCTrajectory>&)
	function SimControl::Freeze()
	function SimControl::RunOnce()
	function SimControl::PerfectControlModel(TrajectoryPoint *, Chassis::GearPosition *)
	function SimControl::PublishChassis(double, Chassis::GearPosition)
	function SimControl::PublishLocalization(const TrajectoryPoint &)
	function SimControl::PublishDummyPrediction()
namespace dreamview
	interface Json
	variable kAngleThreshold
	namespace `anonymous-namespace'
		function CalculateAcceleration(const Point3D &, const Point3D &, const apollo::canbus::Chassis_GearPosition &)
		function DeduceDisengageType(const Chassis &)
		function SetObstacleType(const PerceptionObstacle::Type, const PerceptionObstacle::SubType, Object *)
		function SetStopReason(const StopReasonCode &, Decision *)
		function UpdateTurnSignal(const apollo::common::VehicleSignal &, Object *)
		function DownsampleCurve(Curve *)
		function SecToMs(const double)
	variable SimulationWorldService::kMaxMonitorItems
	function SimulationWorldService::SimulationWorldService(const MapService *, bool)
	function SimulationWorldService::InitReaders()
	function SimulationWorldService::InitWriters()
	function SimulationWorldService::Update()
	function SimulationWorldService::UpdateDelays()
	function SimulationWorldService::UpdateLatencies()
	function SimulationWorldService::GetWireFormatString(double, std::string *, std::string *)
	function SimulationWorldService::GetUpdateAsJson(double) const
	function SimulationWorldService::GetMapElementIds(double, MapElementIds *) const
	function SimulationWorldService::PopulateMapInfo(double)
	function SimulationWorldService::GetRelativeMap() const
	function SimulationWorldService::UpdateSimulationWorld<>(const LocalizationEstimate &)
	function SimulationWorldService::UpdateSimulationWorld<>(const Gps &)
	function SimulationWorldService::UpdateSimulationWorld<>(const Chassis &)
	function SimulationWorldService::UpdateSimulationWorld<>(const Stories &)
	function SimulationWorldService::UpdateSimulationWorld<>(const AudioDetection &)
	function SimulationWorldService::CreateWorldObjectIfAbsent(const PerceptionObstacle &)
	function SimulationWorldService::CreateWorldObjectFromSensorMeasurement(const SensorMeasurement &, Object *)
	function SimulationWorldService::SetObstacleInfo(const PerceptionObstacle &, Object *)
	function SimulationWorldService::SetObstaclePolygon(const PerceptionObstacle &, Object *)
	function SimulationWorldService::SetObstacleSensorMeasurements(const PerceptionObstacle &, Object *)
	function SimulationWorldService::SetObstacleSource(const apollo::perception::PerceptionObstacle &, Object *)
	function SimulationWorldService::UpdateSimulationWorld<>(const PerceptionObstacles &)
	function SimulationWorldService::UpdateSimulationWorld<>(const TrafficLightDetection &)
	function SimulationWorldService::UpdatePlanningTrajectory(const ADCTrajectory &)
	function SimulationWorldService::UpdateRSSInfo(const ADCTrajectory &)
	function SimulationWorldService::UpdateMainStopDecision(const apollo::planning::MainDecision &, double, Object *)
	function SimulationWorldService::LocateMarker(const apollo::planning::ObjectDecisionType &, Decision *)
	function SimulationWorldService::FindNudgeRegion(const apollo::planning::ObjectDecisionType &, const Object &, Decision *)
	function SimulationWorldService::UpdateDecision(const DecisionResult &, double)
	function SimulationWorldService::DownsamplePath(const common::Path &, common::Path *)
	function SimulationWorldService::UpdatePlanningData(const PlanningData &)
	function SimulationWorldService::UpdateSimulationWorld<>(const ADCTrajectory &)
	function SimulationWorldService::CreatePredictionTrajectory(const PredictionObstacle &, Object *)
	function SimulationWorldService::UpdateSimulationWorld<>(const PredictionObstacles &)
	function SimulationWorldService::UpdateSimulationWorld<>(const RoutingResponse &)
	function SimulationWorldService::GetRoutePathAsJson() const
	function SimulationWorldService::ReadRoutingFromFile(const std::string &)
	function SimulationWorldService::UpdateSimulationWorld<>(const ControlCommand &)
	function SimulationWorldService::UpdateSimulationWorld<>(const NavigationInfo &)
	function SimulationWorldService::UpdateSimulationWorld<>(const MapMsg &)
	function SimulationWorldService::UpdateSimulationWorld<>(const MonitorMessage &)
	function SimulationWorldService::UpdateMonitorMessages()
	function SimulationWorldService::DumpMessages()
	function SimulationWorldService::PublishNavigationInfo(const std::shared_ptr<NavigationInfo>&)
	function SimulationWorldService::PublishRoutingRequest(const std::shared_ptr<RoutingRequest>&)
	function SimulationWorldService::PublishTask(const std::shared_ptr<Task>&)
	function SimulationWorldService::PublishMonitorMessage(apollo::common::monitor::MonitorMessageItem::LogLevel, const std::string &)
	function formatDoubleToString(const double)
namespace dreamview
	interface Json
	function SimulationWorldUpdater::SimulationWorldUpdater(WebSocketHandler *, WebSocketHandler *, WebSocketHandler *, SimControl *, const MapService *, PerceptionCameraUpdater *, bool)
	function SimulationWorldUpdater::RegisterMessageHandlers()
	function SimulationWorldUpdater::CheckRoutingPoint(const Json &)
	function SimulationWorldUpdater::ConstructRoutingRequest(const Json &, RoutingRequest *)
	function SimulationWorldUpdater::ValidateCoordinate(const nlohmann::json &)
	function SimulationWorldUpdater::Start()
	function SimulationWorldUpdater::OnTimer()
	function SimulationWorldUpdater::LoadPOI()
	function SimulationWorldUpdater::LoadDefaultRoutings()
	function SimulationWorldUpdater::AddDefaultRouting(const Json &)
namespace dreamview
	interface Json
	variable modem0_id
	variable modem1_id
	variable modem2_id
	variable kEncoderCount
	variable kWriteWaitMs
	variable start_cmd
	variable stop_cmd
	variable modem0_channel
	variable modem1_channel
	variable modem2_channel
	variable remote_daemon_cmd_channel
	variable remote_daemon_rpt_channel
	variable local_daemon_cmd_channel
	variable local_daemon_rpt_channel
	variable planning_channel
	variable planning_pad_channel
	function TeleopService::TeleopService(WebSocketHandler *)
	function TeleopService::Start()
	function TeleopService::RegisterMessageHandlers()
	function TeleopService::SendStatus(WebSocketHandler::Connection *)
	function TeleopService::UpdateModem(const std::string &, const std::shared_ptr<ModemInfo>&)
	function TeleopService::UpdateCarDaemonRpt(const std::shared_ptr<DaemonRpt>&)
	function TeleopService::UpdateOperatorDaemonRpt(const std::shared_ptr<DaemonRpt>&)
	function TeleopService::SendVideoStreamCmd(bool)
	function TeleopService::SendAudioStreamCmd(bool)
	function TeleopService::SendMicStreamCmd(bool)
	function TeleopService::SendResumeCruiseCmd()
	function TeleopService::SendEstopCmd()
	function TeleopService::SendPullOverCmd()
	function TeleopService::UpdatePlanning(const std::shared_ptr<ADCTrajectory>&)
namespace drivers
	namespace camera
		function CameraComponent::Init()
		function CameraComponent::run()
		function CameraComponent::~CameraComponent()
namespace drivers
	namespace camera
		function CompressComponent::Init()
		function CompressComponent::Proc(const std::shared_ptr<Image>&)
constant __STDC_CONSTANT_MACROS
constant CLEAR(x)
namespace drivers
	namespace camera
		function UsbCam::UsbCam()
		function UsbCam::~UsbCam()
		function UsbCam::init(const std::shared_ptr<Config>&)
		function UsbCam::init_mjpeg_decoder(int, int)
		function UsbCam::mjpeg2rgb(char *, int, char *, int)
		function UsbCam::poll(const CameraImagePtr &)
		function UsbCam::open_device(void)
		function UsbCam::init_device(void)
		function UsbCam::set_adv_trigger()
		function UsbCam::xioctl(int, int, void *)
		function UsbCam::init_read(unsigned int)
		function UsbCam::init_mmap(void)
		function UsbCam::init_userp(unsigned int)
		function UsbCam::start_capturing(void)
		function UsbCam::set_device_config()
		function UsbCam::uninit_device(void)
		function UsbCam::close_device(void)
		function UsbCam::stop_capturing(void)
		function UsbCam::read_frame(CameraImagePtr)
		function UsbCam::process_image(void *, int, CameraImagePtr)
		function UsbCam::is_capturing()
		function UsbCam::set_auto_focus(int)
		function UsbCam::set_v4l_parameter(const std::string &, int)
		function UsbCam::set_v4l_parameter(const std::string &, const std::string &)
		function UsbCam::wait_for_device()
		function UsbCam::reconnect()
		function UsbCam::convert_yuv_to_rgb_pixel(int, int, int)
		function UsbCam::convert_yuv_to_rgb_buffer(unsigned char *, unsigned char *, unsigned int, unsigned int)
namespace drivers
	namespace camera
		function print_m256(__m256i)
		function print_m256_i32(const __m256i)
		function print_m256_i16(const __m256i)
		function yuv_separate_avx2(uint8_t *, __m256i *, __m256i *, __m256i *, __m256i *)
		function yuv2rgb_avx2<align>(__m256i, __m256i, __m256i, uint8_t *)
		function yuv2rgb_avx2<align>(uint8_t *, uint8_t *)
		function yuyv2rgb_avx(unsigned char *, unsigned char *, int)
namespace drivers
	namespace canbus
		function CanClientFactory::CanClientFactory()
		function CanClientFactory::RegisterCanClients()
		function CanClientFactory::CreateCANClient(const CANCardParameter &)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_int64
variable MAX_CAN_SEND_FRAME_LEN
variable MAX_CAN_RECV_FRAME_LEN
namespace apollo
	namespace drivers
		namespace canbus
			struct TestCanParam
				field conf
				field is_first_agent
				field recv_cnt
				field recv_err_cnt
				field send_cnt
				field send_err_cnt
				field send_lost_cnt
				field send_time
				field recv_time
				field can_client
				method TestCanParam()
				method print()
			class CanAgent
				method CanAgent(TestCanParam *)
				method param_ptr()
				method other_agent()
				method Start()
				method SendThreadFunc()
				method AddOtherAgent(CanAgent *)
				method is_receiving() const
				method is_receiving(bool)
				method is_sending_finish() const
				method is_sending_finish(bool)
				method RecvThreadFunc()
				method WaitForFinish()
				field is_receiving_
				field is_sending_finish_
				field other_agent_
				field param_ptr_
				field thread_recv_
				field thread_send_
function main(int32_t, char **)
namespace drivers
	namespace canbus
		namespace can
			function EsdCanClient::Init(const CANCardParameter &)
			function EsdCanClient::~EsdCanClient()
			function EsdCanClient::Start()
			function EsdCanClient::Stop()
			function EsdCanClient::Send(const std::vector<CanFrame>&, int32_t * const)
			function EsdCanClient::Receive(std::vector<CanFrame>* const, int32_t * const)
			function EsdCanClient::GetErrorString(const NTCAN_RESULT)
			variable ERROR_BUF_SIZE
namespace drivers
	namespace canbus
		namespace can
			function FakeCanClient::Init(const CANCardParameter &)
			function FakeCanClient::Start()
			function FakeCanClient::Stop()
			function FakeCanClient::Send(const std::vector<CanFrame>&, int32_t * const)
			function FakeCanClient::Receive(std::vector<CanFrame>* const, int32_t * const)
			function FakeCanClient::GetErrorString(const int32_t)
namespace drivers
	namespace canbus
		namespace can
			function HermesCanClient::~HermesCanClient()
			function HermesCanClient::Init(const CANCardParameter &)
			function HermesCanClient::Start()
			function HermesCanClient::Stop()
			function HermesCanClient::Send(const std::vector<CanFrame>&, int32_t * const)
			function HermesCanClient::Receive(std::vector<CanFrame>* const, int32_t * const)
			function HermesCanClient::GetErrorString(int32_t)
			function HermesCanClient::SetInited(bool)
			variable RX_TIMEOUT
namespace drivers
	namespace canbus
		namespace can
			function SocketCanClientRaw::Init(const CANCardParameter &)
			function SocketCanClientRaw::~SocketCanClientRaw()
			function SocketCanClientRaw::Start()
			function SocketCanClientRaw::Stop()
			function SocketCanClientRaw::Send(const std::vector<CanFrame>&, int32_t * const)
			function SocketCanClientRaw::Receive(std::vector<CanFrame>* const, int32_t * const)
			function SocketCanClientRaw::GetErrorString(const int32_t)
constant CAN_ID_MASK
namespace drivers
	namespace canbus
		namespace `anonymous-namespace'
			variable BYTE_LENGTH
			variable RANG_MASK_1_L
			variable RANG_MASK_0_L
		function Byte::Byte(const uint8_t *)
		function Byte::Byte(const Byte &)
		function Byte::byte_to_hex(const uint8_t)
		function Byte::byte_to_hex(const uint32_t)
		function Byte::byte_to_binary(const uint8_t)
		function Byte::set_bit_1(const int32_t)
		function Byte::set_bit_0(const int32_t)
		function Byte::is_bit_1(const int32_t) const
		function Byte::set_value(const uint8_t)
		function Byte::set_value_high_4_bits(const uint8_t)
		function Byte::set_value_low_4_bits(const uint8_t)
		function Byte::set_value(const uint8_t, const int32_t, const int32_t)
		function Byte::get_byte() const
		function Byte::get_byte_high_4_bits() const
		function Byte::get_byte_low_4_bits() const
		function Byte::get_byte(const int32_t, const int32_t) const
		function Byte::to_hex_string() const
		function Byte::to_binary_string() const
variable DEFINE_string
variable DEFINE_string
variable DEFINE_double
variable DEFINE_string
variable DEFINE_bool
namespace drivers
	namespace gnss
		function GnssDriverComponent::GnssDriverComponent()
		function GnssDriverComponent::Init()
namespace drivers
	namespace gnss
		namespace `anonymous-namespace'
			variable DEG_TO_RAD_LOCAL
			variable WGS84_TEXT
			variable POSE_COVAR
			function CreateParser(config::Config, bool)
		function DataParser::DataParser(const config::Config &, const std::shared_ptr<apollo::cyber::Node>&)
		function DataParser::Init()
		function DataParser::ParseRawData(const std::string &)
		function DataParser::CheckInsStatus(::apollo::drivers::gnss::Ins *)
		function DataParser::CheckGnssStatus(::apollo::drivers::gnss::Gnss *)
		function DataParser::DispatchMessage(Parser::MessageType, MessagePtr)
		function DataParser::PublishInsStat(const MessagePtr)
		function DataParser::PublishBestpos(const MessagePtr)
		function DataParser::PublishImu(const MessagePtr)
		function DataParser::PublishOdometry(const MessagePtr)
		function DataParser::PublishCorrimu(const MessagePtr)
		function DataParser::PublishEphemeris(const MessagePtr)
		function DataParser::PublishObservation(const MessagePtr)
		function DataParser::PublishHeading(const MessagePtr)
		function DataParser::GpsToTransformStamped(const std::shared_ptr<Gps>&, TransformStamped *)
namespace drivers
	namespace gnss
		namespace `anonymous-namespace'
			variable BUFFER_SIZE
			variable SECONDS_PER_WEEK
			variable DEG_TO_RAD
			variable FLOAT_NAN
			variable INDEX
			function is_zero<T>(T)
			function crc32_word(uint32_t)
			function crc32_block(const uint8_t *, size_t)
			function azimuth_deg_to_yaw_rad(double)
			function rfu_to_flu(double, double, double, ::apollo::common::Point3D *)
		class NovatelParser
			method NovatelParser()
			method NovatelParser(const config::Config &)
			method GetMessage(MessagePtr *)
			method check_crc()
			method PrepareMessage(MessagePtr *)
			method HandleBestPos(const novatel::BestPos *, uint16_t, uint32_t)
			method HandleGnssBestpos(const novatel::BestPos *, uint16_t, uint32_t)
			method HandleBestVel(const novatel::BestVel *, uint16_t, uint32_t)
			method HandleCorrImuData(const novatel::CorrImuData *)
			method HandleInsCov(const novatel::InsCov *)
			method HandleInsPva(const novatel::InsPva *)
			method HandleInsPvax(const novatel::InsPvaX *, uint16_t, uint32_t)
			method HandleRawImuX(const novatel::RawImuX *)
			method HandleRawImu(const novatel::RawImu *)
			method HandleBdsEph(const novatel::BDS_Ephemeris *)
			method HandleGpsEph(const novatel::GPS_Ephemeris *)
			method HandleGloEph(const novatel::GLO_Ephemeris *)
			method SetObservationTime()
			method DecodeGnssObservation(const uint8_t *, const uint8_t *)
			method HandleHeading(const novatel::Heading *, uint16_t, uint32_t)
			field gyro_scale_
			field accel_scale_
			field imu_measurement_span_
			field imu_measurement_hz_
			field imu_frame_mapping_
			field imu_measurement_time_previous_
			field buffer_
			field header_length_
			field total_length_
			field imu_type_
			field solution_status_
			field position_type_
			field velocity_type_
			field ins_status_
			field raw_
			field gnss_
			field bestpos_
			field imu_
			field ins_
			field ins_stat_
			field gnss_ephemeris_
			field gnss_observation_
			field heading_
		function Parser::CreateNovatel(const config::Config &)
		function NovatelParser::NovatelParser()
		function NovatelParser::NovatelParser(const config::Config &)
		function NovatelParser::GetMessage(MessagePtr *)
		function NovatelParser::check_crc()
		function NovatelParser::PrepareMessage(MessagePtr *)
		function NovatelParser::HandleGnssBestpos(const novatel::BestPos *, uint16_t, uint32_t)
		function NovatelParser::HandleBestPos(const novatel::BestPos *, uint16_t, uint32_t)
		function NovatelParser::HandleBestVel(const novatel::BestVel *, uint16_t, uint32_t)
		function NovatelParser::HandleCorrImuData(const novatel::CorrImuData *)
		function NovatelParser::HandleInsCov(const novatel::InsCov *)
		function NovatelParser::HandleInsPva(const novatel::InsPva *)
		function NovatelParser::HandleInsPvax(const novatel::InsPvaX *, uint16_t, uint32_t)
		function NovatelParser::HandleRawImuX(const novatel::RawImuX *)
		function NovatelParser::HandleRawImu(const novatel::RawImu *)
		function NovatelParser::HandleGpsEph(const novatel::GPS_Ephemeris *)
		function NovatelParser::HandleBdsEph(const novatel::BDS_Ephemeris *)
		function NovatelParser::HandleGloEph(const novatel::GLO_Ephemeris *)
		function NovatelParser::HandleHeading(const novatel::Heading *, uint16_t, uint32_t)
		function NovatelParser::SetObservationTime()
		function NovatelParser::DecodeGnssObservation(const uint8_t *, const uint8_t *)
namespace drivers
	namespace gnss
		namespace `anonymous-namespace'
			function is_zero<T>(T)
		function Parser::CreateRtcmV3(bool)
		function Rtcm3Parser::Rtcm3Parser(bool)
		function Rtcm3Parser::SetStationPosition()
		function Rtcm3Parser::FillKepplerOrbit(const eph_t &, apollo::drivers::gnss::KepplerOrbit *)
		function Rtcm3Parser::FillGlonassOrbit(const geph_t &, apollo::drivers::gnss::GlonassOrbit *)
		function Rtcm3Parser::SetObservationTime()
		function Rtcm3Parser::GetMessage(MessagePtr *)
		function Rtcm3Parser::ProcessObservation()
		function Rtcm3Parser::ProcessEphemerides()
		function Rtcm3Parser::ProcessStationParameters()
namespace drivers
	namespace gnss
		function RtcmParser::RtcmParser(const config::Config &, const std::shared_ptr<apollo::cyber::Node>&)
		function RtcmParser::Init()
		function RtcmParser::ParseRtcmData(const std::string &)
		function RtcmParser::DispatchMessage(Parser::MessageType, MessagePtr)
		function RtcmParser::PublishEphemeris(const MessagePtr &)
		function RtcmParser::PublishObservation(const MessagePtr &)
function is_zero<T>(T)
namespace apollo
	namespace drivers
		namespace gnss
			class NtripStream
				method NtripStream(const std::string &, uint16_t, const std::string &, const std::string &, const std::string &, uint32_t)
				method ~NtripStream()
				method read(uint8_t *, size_t)
				method write(const uint8_t *, size_t)
				method Connect()
				method Disconnect()
				method Reconnect()
				field is_login_
				field mountpoint_
				field write_data_prefix_
				field login_data_
				field timeout_s_
				field data_active_s_
				field tcp_stream_
				field internal_mutex_
			function NtripStream::NtripStream(const std::string &, uint16_t, const std::string &, const std::string &, const std::string &, uint32_t)
			function NtripStream::~NtripStream()
			function NtripStream::Connect()
			function NtripStream::Disconnect()
			function NtripStream::Reconnect()
			function NtripStream::read(uint8_t *, size_t)
			function NtripStream::write(const uint8_t *, size_t)
			function Stream::create_ntrip(const std::string &, uint16_t, const std::string &, const std::string &, const std::string &, uint32_t)
namespace drivers
	namespace gnss
		function switch_stream_status(const apollo::drivers::gnss::Stream::Status &, StreamStatus_Type *)
		function getLocalTimeFileStr(const std::string &)
		function create_stream(const config::Stream &)
		function RawStream::RawStream(const config::Config &, const std::shared_ptr<apollo::cyber::Node>&)
		function RawStream::~RawStream()
		function RawStream::Init()
		function RawStream::Start()
		function RawStream::OnWheelVelocityTimer()
		function RawStream::Connect()
		function RawStream::Disconnect()
		function RawStream::Login()
		function RawStream::Logout()
		function RawStream::StreamStatusCheck()
		function RawStream::DataSpin()
		function RawStream::RtkSpin()
		function RawStream::PublishRtkData(const size_t)
		function RawStream::PushGpgga(const size_t)
		function RawStream::GpsbinCallback(const std::shared_ptr<RawData const>&)
namespace drivers
	namespace gnss
		function get_serial_baudrate(uint32_t)
		class SerialStream
			method SerialStream(const char *, speed_t, uint32_t)
			method ~SerialStream()
			method Connect()
			method Disconnect()
			method read(uint8_t *, size_t)
			method write(const uint8_t *, size_t)
			method SerialStream()
			method open()
			method close()
			method configure_port(int)
			method wait_readable(uint32_t)
			method wait_writable(uint32_t)
			method check_remove()
			field device_name_
			field baud_rate_
			field bytesize_
			field parity_
			field stopbits_
			field flowcontrol_
			field byte_time_us_
			field timeout_usec_
			field fd_
			field errno_
			field is_open_
		function SerialStream::SerialStream(const char *, speed_t, uint32_t)
		function SerialStream::~SerialStream()
		function SerialStream::open(void)
		function SerialStream::configure_port(int)
		function SerialStream::Connect()
		function SerialStream::close(void)
		function SerialStream::Disconnect()
		function SerialStream::check_remove()
		function SerialStream::read(uint8_t *, size_t)
		function SerialStream::write(const uint8_t *, size_t)
		function SerialStream::wait_readable(uint32_t)
		function SerialStream::wait_writable(uint32_t)
		function Stream::create_serial(const char *, uint32_t, uint32_t)
namespace drivers
	namespace gnss
		function TcpStream::TcpStream(const char *, uint16_t, uint32_t, bool)
		function TcpStream::~TcpStream()
		function TcpStream::open()
		function TcpStream::InitSocket()
		function TcpStream::close()
		function TcpStream::Reconnect()
		function TcpStream::Connect()
		function TcpStream::Disconnect()
		function TcpStream::read(uint8_t *, size_t)
		function TcpStream::write(const uint8_t *, size_t)
		function TcpStream::Readable(uint32_t)
		function Stream::create_tcp(const char *, uint16_t, uint32_t)
namespace drivers
	namespace gnss
		class UdpStream
			interface be16_t
			interface be32_t
			method UdpStream(const char *, uint16_t, uint32_t)
			method ~UdpStream()
			method Connect()
			method Disconnect()
			method read(uint8_t *, size_t)
			method write(const uint8_t *, size_t)
			method UdpStream()
			method open()
			method close()
			field peer_port_
			field peer_addr_
			field timeout_usec_
			field sockfd_
			field errno_
		function Stream::create_udp(const char *, uint16_t, uint32_t)
		function UdpStream::UdpStream(const char *, uint16_t, uint32_t)
		function UdpStream::~UdpStream()
		function UdpStream::open()
		function UdpStream::close()
		function UdpStream::Connect()
		function UdpStream::Disconnect()
		function UdpStream::read(uint8_t *, size_t)
		function UdpStream::write(const uint8_t *, size_t)
namespace drivers
	namespace lidar
		function LidarDriverFactory::LidarDriverFactory()
		function LidarDriverFactory::LidarDriverFactory(const apollo::drivers::lidar::config &)
		function LidarDriverFactory::RegisterLidarClients()
		function LidarDriverFactory::CreateLidarDriver(const std::shared_ptr<::apollo::cyber::Node>&, const apollo::drivers::lidar::config &)
namespace drivers
	namespace hesai
		function HesaiDriver::Init()
		function HesaiDriver::PollThread()
		function HesaiDriver::ProcessGps(const HesaiPacket &)
		function HesaiDriver::ProcessThread()
namespace drivers
	namespace hesai
		function HesaiComponent::Init()
namespace drivers
	namespace hesai
		function Input::Input(uint16_t, uint16_t)
		function Input::~Input(void)
		function Input::GetPacket(HesaiPacket *)
namespace drivers
	namespace hesai
		function Hesai40Parser::Hesai40Parser(const std::shared_ptr<Node>&, const Config &)
		function Hesai40Parser::~Hesai40Parser()
		function Hesai40Parser::ParseRawPacket(const uint8_t *, const int, bool *)
		function Hesai40Parser::CalcPointXYZIT(Hesai40Packet *, int)
namespace drivers
	namespace hesai
		interface Node
		function Hesai64Parser::Hesai64Parser(const std::shared_ptr<Node>&, const Config &)
		function Hesai64Parser::~Hesai64Parser()
		function Hesai64Parser::ParseRawPacket(const uint8_t *, const int, bool *)
		function Hesai64Parser::CalcPointXYZIT(Hesai64Packet *, int, uint8_t)
namespace drivers
	namespace hesai
		function HesaiConvertComponent::Init()
		function HesaiConvertComponent::Proc(const std::shared_ptr<HesaiScan>&)
namespace drivers
	namespace hesai
		function Parser::Parser(const std::shared_ptr<::apollo::cyber::Node>&, const Config &)
		function Parser::~Parser()
		function Parser::Init()
		function Parser::ResetRawPointCloud()
		function Parser::Parse(const std::shared_ptr<HesaiScan>&)
		function Parser::Parse(const uint8_t *, int, bool *)
		function Parser::CheckIsEnd(bool)
		function Parser::PublishRawPointCloud(int)
		function Parser::LoadCalibrationThread()
		function Parser::Stop()
		function Parser::LoadCalibration(const char *)
		function Parser::LoadCalibration(const std::string &)
		function Parser::CheckPktTime(double)
namespace drivers
	namespace hesai
		function ParserFactory::CreateParser(const std::shared_ptr<Node>&, const Config &)
namespace drivers
	namespace hesai
		function TcpCmdClient::BuildCmdHeader(const Command &, unsigned char *)
		function TcpCmdClient::GetCalibration(std::string *)
		function TcpCmdClient::ParseHeader(const unsigned char *, const int, CommandHeader *)
		function TcpCmdClient::WriteCmd(const Command &)
		function TcpCmdClient::ReadCmd(Command *)
		function TcpCmdClient::Read(unsigned char *, int)
		function TcpCmdClient::Close()
		function TcpCmdClient::Open()
namespace drivers
	namespace lidar
		function LidarDriverComponent::LidarDriverComponent()
		function LidarDriverComponent::Init()
namespace drivers
	namespace robosense
		function Input::Input(const uint16_t &, const uint16_t &)
		function Input::~Input()
		function Input::setUpSocket(uint16_t)
		function Input::getPacket(uint8_t *, uint32_t)
namespace drivers
	namespace velodyne
		function Compensator::QueryPoseAffineFromTF2(const uint64_t &, void *, const std::string &)
		function Compensator::MotionCompensation(const std::shared_ptr<const PointCloud>&, std::shared_ptr<PointCloud>)
		function Compensator::GetTimestampInterval(const std::shared_ptr<const PointCloud>&, uint64_t *, uint64_t *)
		function Compensator::MotionCompensation(const std::shared_ptr<const PointCloud>&, std::shared_ptr<PointCloud>, const uint64_t, const uint64_t, const Eigen::Affine3d &, const Eigen::Affine3d &)
namespace apollo
	namespace drivers
		namespace velodyne
			function CompensatorComponent::Init()
			function CompensatorComponent::Proc(const std::shared_ptr<PointCloud>&)
namespace drivers
	namespace velodyne
		variable VelodyneDriver::sync_counter
		function VelodyneDriver::~VelodyneDriver()
		function VelodyneDriver::Init()
		function VelodyneDriver::SetBaseTimeFromNmeaTime(NMEATimePtr, uint64_t *)
		function VelodyneDriver::SetBaseTime()
		function VelodyneDriver::Poll(const std::shared_ptr<VelodyneScan>&)
		function VelodyneDriver::PollStandard(std::shared_ptr<VelodyneScan>)
		function VelodyneDriver::PollPositioningPacket(void)
		function VelodyneDriver::UpdateGpsTopHour(uint32_t)
		function VelodyneDriver::DevicePoll()
		function VelodyneDriverFactory::CreateDriver(const std::shared_ptr<::apollo::cyber::Node>&, const Config &)
namespace drivers
	namespace velodyne
		function Velodyne64Driver::~Velodyne64Driver()
		function Velodyne64Driver::Init()
		function Velodyne64Driver::Poll(const std::shared_ptr<VelodyneScan>&)
		function Velodyne64Driver::CheckAngle(const VelodynePacket &)
		function Velodyne64Driver::PollStandardSync(std::shared_ptr<VelodyneScan>)
		function Velodyne64Driver::DevicePoll()
namespace drivers
	namespace velodyne
		function Input::exract_nmea_time_from_packet(NMEATimePtr, const uint8_t *)
namespace drivers
	namespace velodyne
		function SocketInput::SocketInput()
		function SocketInput::~SocketInput(void)
		function SocketInput::init(const int &)
		function SocketInput::get_firing_data_packet(VelodynePacket *)
		function SocketInput::get_positioning_data_packet(NMEATimePtr)
		function SocketInput::input_available(int)
namespace drivers
	namespace velodyne
		function VelodyneDriverComponent::Init()
namespace drivers
	namespace velodyne
		function PriSecFusionComponent::Init()
		function PriSecFusionComponent::Proc(const std::shared_ptr<PointCloud>&)
		function PriSecFusionComponent::IsExpired(const std::shared_ptr<PointCloud>&, const std::shared_ptr<PointCloud>&)
		function PriSecFusionComponent::QueryPoseAffine(const std::string &, const std::string &, Eigen::Affine3d *)
		function PriSecFusionComponent::AppendPointCloud(std::shared_ptr<PointCloud>, std::shared_ptr<PointCloud>, const Eigen::Affine3d &)
		function PriSecFusionComponent::Fusion(std::shared_ptr<PointCloud>, std::shared_ptr<PointCloud>)
operator operator>><T>(const YAML::Node &, T &)
namespace apollo
	namespace drivers
		namespace velodyne
			variable NUM_LASERS
			variable LASERS
			variable LASER_ID
			variable ROT_CORRECTION
			variable VERT_CORRECTION
			variable DIST_CORRECTION
			variable TWO_PT_CORRECTION_AVAILABLE
			variable DIST_CORRECTION_X
			variable DIST_CORRECTION_Y
			variable VERT_OFFSET_CORRECTION
			variable HORIZ_OFFSET_CORRECTION
			variable MAX_INTENSITY
			variable MIN_INTENSITY
			variable FOCAL_DISTANCE
			variable FOCAL_SLOPE
			operator operator>>(const YAML::Node &, std::pair<int,LaserCorrection>&)
			operator operator>>(const YAML::Node &, Calibration &)
			operator operator<<(YAML::Emitter &, const std::pair<int,LaserCorrection>&)
			operator operator<<(YAML::Emitter &, const Calibration &)
			function Calibration::read(const std::string &)
			function Calibration::write(const std::string &)
namespace drivers
	namespace velodyne
		function Convert::init(const Config &)
		function Convert::ConvertPacketsToPointcloud(const std::shared_ptr<VelodyneScan>&, std::shared_ptr<PointCloud>)
namespace drivers
	namespace velodyne
		function OnlineCalibration::decode(const std::shared_ptr<VelodyneScan>&)
		function OnlineCalibration::get_unit_index()
		function OnlineCalibration::dump(const std::string &)
namespace drivers
	namespace velodyne
		function init_sin_cos_rot_table(float *, float *, uint16_t, float)
namespace drivers
	namespace velodyne
		function Velodyne128Parser::Velodyne128Parser(const Config &)
		function Velodyne128Parser::GeneratePointcloud(const std::shared_ptr<VelodyneScan>&, std::shared_ptr<PointCloud>)
		function Velodyne128Parser::GetTimestamp(double, float, uint16_t)
		function Velodyne128Parser::Order(std::shared_ptr<PointCloud>)
		function Velodyne128Parser::Unpack(const VelodynePacket &, std::shared_ptr<PointCloud>)
		function Velodyne128Parser::IntensityCompensate(const LaserCorrection &, const uint16_t, int)
namespace drivers
	namespace velodyne
		function Velodyne16Parser::Velodyne16Parser(const Config &)
		function Velodyne16Parser::GeneratePointcloud(const std::shared_ptr<VelodyneScan>&, std::shared_ptr<PointCloud>)
		function Velodyne16Parser::GetTimestamp(double, float, uint16_t)
		function Velodyne16Parser::Unpack(const VelodynePacket &, std::shared_ptr<PointCloud>)
		function Velodyne16Parser::Order(std::shared_ptr<PointCloud>)
namespace drivers
	namespace velodyne
		function Velodyne32Parser::Velodyne32Parser(const Config &)
		function Velodyne32Parser::GeneratePointcloud(const std::shared_ptr<VelodyneScan>&, std::shared_ptr<PointCloud>)
		function Velodyne32Parser::GetTimestamp(double, float, uint16_t)
		function Velodyne32Parser::UnpackVLP32C(const VelodynePacket &, std::shared_ptr<PointCloud>)
		function Velodyne32Parser::Unpack(const VelodynePacket &, std::shared_ptr<PointCloud>)
		function Velodyne32Parser::Order(std::shared_ptr<PointCloud>)
namespace drivers
	namespace velodyne
		function Velodyne64Parser::Velodyne64Parser(const Config &)
		function Velodyne64Parser::setup()
		function Velodyne64Parser::SetBaseTimeFromPackets(const VelodynePacket &)
		function Velodyne64Parser::CheckGpsStatus(const VelodynePacket &)
		function Velodyne64Parser::InitOffsets()
		function Velodyne64Parser::GeneratePointcloud(const std::shared_ptr<VelodyneScan>&, std::shared_ptr<PointCloud>)
		function Velodyne64Parser::GetTimestamp(double, float, uint16_t)
		function Velodyne64Parser::IntensityCompensate(const LaserCorrection &, const uint16_t, int)
		function Velodyne64Parser::Unpack(const VelodynePacket &, std::shared_ptr<PointCloud>)
		function Velodyne64Parser::Order(std::shared_ptr<PointCloud>)
namespace drivers
	namespace velodyne
		function VelodyneConvertComponent::Init()
		function VelodyneConvertComponent::Proc(const std::shared_ptr<VelodyneScan>&)
namespace drivers
	namespace velodyne
		function VelodyneParser::GetGpsStamp(double, double *, uint64_t *)
		function VelodyneParser::get_nan_point(uint64_t)
		function VelodyneParser::VelodyneParser(const Config &)
		function VelodyneParser::init_angle_params(double, double)
		function VelodyneParser::setup()
		function VelodyneParser::is_scan_valid(int, float)
		function VelodyneParser::ComputeCoords(const float &, const LaserCorrection &, const uint16_t, PointXYZIT *)
		function VelodyneParserFactory::CreateParser(Config)
namespace drivers
	namespace microphone
		function MicrophoneComponent::Init()
		function MicrophoneComponent::fill_channel_data(int)
		function MicrophoneComponent::run()
		function MicrophoneComponent::~MicrophoneComponent()
namespace drivers
	namespace microphone
		variable err
		function report_error(PaError, const std::string &)
		function Stream::~Stream()
		function Stream::init_stream(int, int, int, int, PaSampleFormat)
		function Stream::read_stream(int, char *) const
		function Respeaker::~Respeaker()
		function Respeaker::init(const std::shared_ptr<const MicrophoneConfig>&)
		function Respeaker::get_format_from_width(int, bool) const
		function Respeaker::get_respeaker_index() const
		function Respeaker::get_device_info(const PaDeviceIndex) const
		function Respeaker::host_api_device_index_to_device_index(const PaHostApiIndex, const int) const
		function Respeaker::get_host_api_info(const PaHostApiIndex) const
		function Respeaker::read_stream(int, char *) const
namespace drivers
	namespace conti_radar
		function ContiRadarCanbusComponent::ContiRadarCanbusComponent()
		function ContiRadarCanbusComponent::~ContiRadarCanbusComponent()
		function ContiRadarCanbusComponent::Init()
		function ContiRadarCanbusComponent::ConfigureRadar()
		function ContiRadarCanbusComponent::Start()
		function ContiRadarCanbusComponent::Stop()
		function ContiRadarCanbusComponent::OnError(const std::string &)
		function ContiRadarCanbusComponent::PoseCallback(const std::shared_ptr<LocalizationEstimate>&)
namespace drivers
	namespace conti_radar
		interface Time
		interface micros
		function ContiRadarMessageManager::ContiRadarMessageManager(const std::shared_ptr<Writer<ContiRadar>>&)
		function ContiRadarMessageManager::set_radar_conf(RadarConf)
		function ContiRadarMessageManager::set_can_client(std::shared_ptr<CanClient>)
		function ContiRadarMessageManager::GetMutableProtocolDataById(const uint32_t)
		function ContiRadarMessageManager::Parse(const uint32_t, const uint8_t *, int32_t)
namespace drivers
	namespace conti_radar
		function ClusterGeneralInfo701::ClusterGeneralInfo701()
		variable ClusterGeneralInfo701::ID
		function ClusterGeneralInfo701::Parse(const std::uint8_t *, int32_t, ContiRadar *) const
		function ClusterGeneralInfo701::obstacle_id(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::longitude_dist(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::lateral_dist(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::longitude_vel(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::lateral_vel(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::rcs(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::dynprop(const std::uint8_t *, int32_t) const
namespace drivers
	namespace conti_radar
		function ClusterListStatus600::ClusterListStatus600()
		variable ClusterListStatus600::ID
		function ClusterListStatus600::Parse(const std::uint8_t *, int32_t, ContiRadar *) const
		function ClusterListStatus600::meas_counter(const std::uint8_t *, int32_t) const
		function ClusterListStatus600::interface_version(const std::uint8_t *, int32_t) const
namespace drivers
	namespace conti_radar
		function ClusterQualityInfo702::ClusterQualityInfo702()
		variable ClusterQualityInfo702::ID
		function ClusterQualityInfo702::Parse(const std::uint8_t *, int32_t, ContiRadar *) const
		function ClusterQualityInfo702::target_id(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::longitude_dist_rms(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::lateral_dist_rms(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::longitude_vel_rms(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::pdh0(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::ambig_state(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::invalid_state(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::lateral_vel_rms(const std::uint8_t *, int32_t) const
namespace drivers
	namespace conti_radar
		variable MotionInputSpeed300::ID
		function MotionInputSpeed300::MotionInputSpeed300()
		function MotionInputSpeed300::~MotionInputSpeed300()
		function MotionInputSpeed300::GetPeriod() const
		function MotionInputSpeed300::UpdateData(uint8_t *)
		function MotionInputSpeed300::Reset()
		function MotionInputSpeed300::SetSpeed(const float &)
namespace drivers
	namespace conti_radar
		variable MotionInputYawRate301::ID
		function MotionInputYawRate301::MotionInputYawRate301()
		function MotionInputYawRate301::~MotionInputYawRate301()
		function MotionInputYawRate301::GetPeriod() const
		function MotionInputYawRate301::UpdateData(uint8_t *)
		function MotionInputYawRate301::Reset()
		function MotionInputYawRate301::SetYawRate(const float &)
namespace drivers
	namespace conti_radar
		function ObjectExtendedInfo60D::ObjectExtendedInfo60D()
		variable ObjectExtendedInfo60D::ID
		function ObjectExtendedInfo60D::Parse(const std::uint8_t *, int32_t, ContiRadar *) const
		function ObjectExtendedInfo60D::object_id(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::longitude_accel(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::lateral_accel(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::obstacle_class(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::oritation_angle(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::object_length(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::object_width(const std::uint8_t *, int32_t) const
namespace drivers
	namespace conti_radar
		function ObjectGeneralInfo60B::ObjectGeneralInfo60B()
		variable ObjectGeneralInfo60B::ID
		function ObjectGeneralInfo60B::Parse(const std::uint8_t *, int32_t, ContiRadar *) const
		function ObjectGeneralInfo60B::object_id(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::longitude_dist(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::lateral_dist(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::longitude_vel(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::lateral_vel(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::rcs(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::dynprop(const std::uint8_t *, int32_t) const
namespace drivers
	namespace conti_radar
		function ObjectListStatus60A::ObjectListStatus60A()
		variable ObjectListStatus60A::ID
		function ObjectListStatus60A::Parse(const std::uint8_t *, int32_t, ContiRadar *) const
		function ObjectListStatus60A::num_of_objects(const std::uint8_t *, int32_t) const
		function ObjectListStatus60A::meas_counter(const std::uint8_t *, int32_t) const
		function ObjectListStatus60A::interface_version(const std::uint8_t *, int32_t) const
namespace drivers
	namespace conti_radar
		function ObjectQualityInfo60C::ObjectQualityInfo60C()
		variable ObjectQualityInfo60C::ID
		function ObjectQualityInfo60C::Parse(const std::uint8_t *, int32_t, ContiRadar *) const
		function ObjectQualityInfo60C::object_id(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::longitude_dist_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::lateral_dist_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::longitude_vel_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::lateral_vel_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::longitude_accel_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::lateral_accel_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::oritation_angle_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::probexist(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::meas_state(const std::uint8_t *, int32_t) const
namespace drivers
	namespace conti_radar
		variable RadarConfig200::ID
		function RadarConfig200::RadarConfig200()
		function RadarConfig200::~RadarConfig200()
		function RadarConfig200::GetPeriod() const
		function RadarConfig200::UpdateData(uint8_t *)
		function RadarConfig200::Reset()
		function RadarConfig200::radar_conf()
		function RadarConfig200::set_radar_conf(RadarConf)
		function RadarConfig200::set_max_distance_valid(bool)
		function RadarConfig200::set_sensor_id_valid(bool)
		function RadarConfig200::set_radar_power_valid(bool)
		function RadarConfig200::set_output_type_valid(bool)
		function RadarConfig200::set_send_quality_valid(bool)
		function RadarConfig200::set_send_ext_info_valid(bool)
		function RadarConfig200::set_sort_index_valid(bool)
		function RadarConfig200::set_store_in_nvm_valid(bool)
		function RadarConfig200::set_ctrl_relay_valid(bool)
		function RadarConfig200::set_rcs_threshold_valid(bool)
		function RadarConfig200::set_max_distance(uint16_t)
		function RadarConfig200::set_sensor_id(uint8_t)
		function RadarConfig200::set_output_type(OutputType)
		function RadarConfig200::set_radar_power(uint8_t)
		function RadarConfig200::set_ctrl_relay(uint8_t)
		function RadarConfig200::set_send_ext_info(uint8_t)
		function RadarConfig200::set_send_quality(uint8_t)
		function RadarConfig200::set_sort_index(uint8_t)
		function RadarConfig200::set_store_in_nvm(uint8_t)
		function RadarConfig200::set_rcs_threshold(RcsThreshold)
		function RadarConfig200::set_max_distance_valid_p(uint8_t *, bool)
		function RadarConfig200::set_sensor_id_valid_p(uint8_t *, bool)
		function RadarConfig200::set_radar_power_valid_p(uint8_t *, bool)
		function RadarConfig200::set_output_type_valid_p(uint8_t *, bool)
		function RadarConfig200::set_send_quality_valid_p(uint8_t *, bool)
		function RadarConfig200::set_send_ext_info_valid_p(uint8_t *, bool)
		function RadarConfig200::set_sort_index_valid_p(uint8_t *, bool)
		function RadarConfig200::set_store_in_nvm_valid_p(uint8_t *, bool)
		function RadarConfig200::set_ctrl_relay_valid_p(uint8_t *, bool)
		function RadarConfig200::set_rcs_threshold_valid_p(uint8_t *, bool)
		function RadarConfig200::set_max_distance_p(uint8_t *, uint16_t)
		function RadarConfig200::set_sensor_id_p(uint8_t *, uint8_t)
		function RadarConfig200::set_output_type_p(uint8_t *, OutputType)
		function RadarConfig200::set_radar_power_p(uint8_t *, uint8_t)
		function RadarConfig200::set_ctrl_relay_p(uint8_t *, uint8_t)
		function RadarConfig200::set_send_ext_info_p(uint8_t *, uint8_t)
		function RadarConfig200::set_send_quality_p(uint8_t *, uint8_t)
		function RadarConfig200::set_sort_index_p(uint8_t *, uint8_t)
		function RadarConfig200::set_store_in_nvm_p(uint8_t *, uint8_t)
		function RadarConfig200::set_rcs_threshold_p(uint8_t *, RcsThreshold)
namespace drivers
	namespace conti_radar
		function RadarState201::RadarState201()
		variable RadarState201::ID
		function RadarState201::Parse(const std::uint8_t *, int32_t, ContiRadar *) const
		function RadarState201::max_dist(const std::uint8_t *, int32_t) const
		function RadarState201::radar_power(const std::uint8_t *, int32_t) const
		function RadarState201::output_type(const std::uint8_t *, int32_t) const
		function RadarState201::rcs_threshold(const std::uint8_t *, int32_t) const
		function RadarState201::send_quality(const std::uint8_t *, int32_t) const
		function RadarState201::send_ext_info(const std::uint8_t *, int32_t) const
namespace drivers
	namespace racobit_radar
		function ClusterGeneralInfo701::ClusterGeneralInfo701()
		variable ClusterGeneralInfo701::ID
		function ClusterGeneralInfo701::Parse(const std::uint8_t *, int32_t, RacobitRadar *) const
		function ClusterGeneralInfo701::obstacle_id(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::longitude_dist(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::lateral_dist(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::longitude_vel(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::lateral_vel(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::rcs(const std::uint8_t *, int32_t) const
		function ClusterGeneralInfo701::dynprop(const std::uint8_t *, int32_t) const
namespace drivers
	namespace racobit_radar
		function ClusterListStatus600::ClusterListStatus600()
		variable ClusterListStatus600::ID
		function ClusterListStatus600::Parse(const std::uint8_t *, int32_t, RacobitRadar *) const
		function ClusterListStatus600::meas_counter(const std::uint8_t *, int32_t) const
		function ClusterListStatus600::interface_version(const std::uint8_t *, int32_t) const
namespace drivers
	namespace racobit_radar
		function ClusterQualityInfo702::ClusterQualityInfo702()
		variable ClusterQualityInfo702::ID
		function ClusterQualityInfo702::Parse(const std::uint8_t *, int32_t, RacobitRadar *) const
		function ClusterQualityInfo702::target_id(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::longitude_dist_rms(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::lateral_dist_rms(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::longitude_vel_rms(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::pdh0(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::ambig_state(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::invalid_state(const std::uint8_t *, int32_t) const
		function ClusterQualityInfo702::lateral_vel_rms(const std::uint8_t *, int32_t) const
namespace drivers
	namespace racobit_radar
		function ObjectExtendedInfo60D::ObjectExtendedInfo60D()
		variable ObjectExtendedInfo60D::ID
		function ObjectExtendedInfo60D::Parse(const std::uint8_t *, int32_t, RacobitRadar *) const
		function ObjectExtendedInfo60D::object_id(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::longitude_accel(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::lateral_accel(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::obstacle_class(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::oritation_angle(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::object_length(const std::uint8_t *, int32_t) const
		function ObjectExtendedInfo60D::object_width(const std::uint8_t *, int32_t) const
namespace drivers
	namespace racobit_radar
		function ObjectGeneralInfo60B::ObjectGeneralInfo60B()
		variable ObjectGeneralInfo60B::ID
		function ObjectGeneralInfo60B::Parse(const std::uint8_t *, int32_t, RacobitRadar *) const
		function ObjectGeneralInfo60B::object_id(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::longitude_dist(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::lateral_dist(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::longitude_vel(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::lateral_vel(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::rcs(const std::uint8_t *, int32_t) const
		function ObjectGeneralInfo60B::dynprop(const std::uint8_t *, int32_t) const
namespace drivers
	namespace racobit_radar
		function ObjectListStatus60A::ObjectListStatus60A()
		variable ObjectListStatus60A::ID
		function ObjectListStatus60A::Parse(const std::uint8_t *, int32_t, RacobitRadar *) const
		function ObjectListStatus60A::num_of_objects(const std::uint8_t *, int32_t) const
		function ObjectListStatus60A::meas_counter(const std::uint8_t *, int32_t) const
		function ObjectListStatus60A::interface_version(const std::uint8_t *, int32_t) const
namespace drivers
	namespace racobit_radar
		function ObjectQualityInfo60C::ObjectQualityInfo60C()
		variable ObjectQualityInfo60C::ID
		function ObjectQualityInfo60C::Parse(const std::uint8_t *, int32_t, RacobitRadar *) const
		function ObjectQualityInfo60C::object_id(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::longitude_dist_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::lateral_dist_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::longitude_vel_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::lateral_vel_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::longitude_accel_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::lateral_accel_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::oritation_angle_rms(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::probexist(const std::uint8_t *, int32_t) const
		function ObjectQualityInfo60C::meas_state(const std::uint8_t *, int32_t) const
namespace drivers
	namespace racobit_radar
		variable RadarConfig200::ID
		function RadarConfig200::RadarConfig200()
		function RadarConfig200::~RadarConfig200()
		function RadarConfig200::GetPeriod() const
		function RadarConfig200::UpdateData(uint8_t *)
		function RadarConfig200::Reset()
		function RadarConfig200::radar_conf()
		function RadarConfig200::set_radar_conf(RadarConf)
		function RadarConfig200::set_max_distance_valid(bool)
		function RadarConfig200::set_sensor_id_valid(bool)
		function RadarConfig200::set_radar_power_valid(bool)
		function RadarConfig200::set_output_type_valid(bool)
		function RadarConfig200::set_send_quality_valid(bool)
		function RadarConfig200::set_send_ext_info_valid(bool)
		function RadarConfig200::set_sort_index_valid(bool)
		function RadarConfig200::set_store_in_nvm_valid(bool)
		function RadarConfig200::set_ctrl_relay_valid(bool)
		function RadarConfig200::set_rcs_threshold_valid(bool)
		function RadarConfig200::set_max_distance(uint16_t)
		function RadarConfig200::set_sensor_id(uint8_t)
		function RadarConfig200::set_output_type(OutputType)
		function RadarConfig200::set_radar_power(uint8_t)
		function RadarConfig200::set_ctrl_relay(uint8_t)
		function RadarConfig200::set_send_ext_info(uint8_t)
		function RadarConfig200::set_send_quality(uint8_t)
		function RadarConfig200::set_sort_index(uint8_t)
		function RadarConfig200::set_store_in_nvm(uint8_t)
		function RadarConfig200::set_rcs_threshold(RcsThreshold)
		function RadarConfig200::set_max_distance_valid_p(uint8_t *, bool)
		function RadarConfig200::set_sensor_id_valid_p(uint8_t *, bool)
		function RadarConfig200::set_radar_power_valid_p(uint8_t *, bool)
		function RadarConfig200::set_output_type_valid_p(uint8_t *, bool)
		function RadarConfig200::set_send_quality_valid_p(uint8_t *, bool)
		function RadarConfig200::set_send_ext_info_valid_p(uint8_t *, bool)
		function RadarConfig200::set_sort_index_valid_p(uint8_t *, bool)
		function RadarConfig200::set_store_in_nvm_valid_p(uint8_t *, bool)
		function RadarConfig200::set_ctrl_relay_valid_p(uint8_t *, bool)
		function RadarConfig200::set_rcs_threshold_valid_p(uint8_t *, bool)
		function RadarConfig200::set_max_distance_p(uint8_t *, uint16_t)
		function RadarConfig200::set_sensor_id_p(uint8_t *, uint8_t)
		function RadarConfig200::set_output_type_p(uint8_t *, OutputType)
		function RadarConfig200::set_radar_power_p(uint8_t *, uint8_t)
		function RadarConfig200::set_ctrl_relay_p(uint8_t *, uint8_t)
		function RadarConfig200::set_send_ext_info_p(uint8_t *, uint8_t)
		function RadarConfig200::set_send_quality_p(uint8_t *, uint8_t)
		function RadarConfig200::set_sort_index_p(uint8_t *, uint8_t)
		function RadarConfig200::set_store_in_nvm_p(uint8_t *, uint8_t)
		function RadarConfig200::set_rcs_threshold_p(uint8_t *, RcsThreshold)
namespace drivers
	namespace racobit_radar
		function RadarState201::RadarState201()
		variable RadarState201::ID
		function RadarState201::Parse(const std::uint8_t *, int32_t, RacobitRadar *) const
		function RadarState201::max_dist(const std::uint8_t *, int32_t) const
		function RadarState201::radar_power(const std::uint8_t *, int32_t) const
		function RadarState201::output_type(const std::uint8_t *, int32_t) const
		function RadarState201::rcs_threshold(const std::uint8_t *, int32_t) const
		function RadarState201::send_quality(const std::uint8_t *, int32_t) const
		function RadarState201::send_ext_info(const std::uint8_t *, int32_t) const
namespace drivers
	namespace racobit_radar
		function RacobitRadarCanbusComponent::RacobitRadarCanbusComponent()
		function RacobitRadarCanbusComponent::Init()
		function RacobitRadarCanbusComponent::ConfigureRadar()
		function RacobitRadarCanbusComponent::~RacobitRadarCanbusComponent()
		function RacobitRadarCanbusComponent::OnError(const std::string &)
namespace drivers
	namespace racobit_radar
		function RacobitRadarMessageManager::RacobitRadarMessageManager(std::shared_ptr<cyber::Writer<RacobitRadar>>)
		function RacobitRadarMessageManager::set_radar_conf(RadarConf)
		function RacobitRadarMessageManager::set_can_client(std::shared_ptr<CanClient>)
		function RacobitRadarMessageManager::GetMutableProtocolDataById(const uint32_t)
		function RacobitRadarMessageManager::Parse(const uint32_t, const uint8_t *, int32_t)
namespace drivers
	namespace ultrasonic_radar
		function UltrasonicRadarCanbus::UltrasonicRadarCanbus()
		function UltrasonicRadarCanbus::~UltrasonicRadarCanbus()
		function UltrasonicRadarCanbus::Name() const
		function UltrasonicRadarCanbus::Init(const std::string &, const std::shared_ptr<::apollo::cyber::Writer<Ultrasonic>>&)
		function UltrasonicRadarCanbus::Start()
		function UltrasonicRadarCanbus::OnError(const std::string &)
namespace drivers
	namespace ultrasonic_radar
		function UltrasonicRadarCanbusComponent::UltrasonicRadarCanbusComponent()
		function UltrasonicRadarCanbusComponent::Init()
namespace drivers
	namespace ultrasonic_radar
		function UltrasonicRadarMessageManager::UltrasonicRadarMessageManager(const int, const std::shared_ptr<::apollo::cyber::Writer<Ultrasonic>>&)
		function UltrasonicRadarMessageManager::set_can_client(std::shared_ptr<CanClient>)
		function UltrasonicRadarMessageManager::Parse(const uint32_t, const uint8_t *, int32_t)
namespace drivers
	namespace smartereye
		function CompressComponent::Init()
		function CompressComponent::Proc(const std::shared_ptr<Image>&)
namespace drivers
	namespace smartereye
		function SmartereyeComponent::~SmartereyeComponent()
		function SmartereyeComponent::Init()
		function SmartereyeComponent::run()
		function SmartereyeComponent::SetCallback()
		function SmartereyeComponent::Callback(RawImageFrame *)
		function SmartereyeComponent::processFrame(int, char *, char *, int64_t, int, int)
		function SmartereyeComponent::processFrame(int, char *, uint32_t, int, int, int)
constant CLEAR(x)
namespace drivers
	namespace smartereye
		function SmartereyeDevice::SmartereyeDevice()
		function SmartereyeDevice::~SmartereyeDevice()
		function SmartereyeDevice::init(const std::shared_ptr<Config>&)
		function SmartereyeDevice::SetCallback(CallbackFunc)
		function SmartereyeDevice::poll()
		function SmartereyeDevice::uninit()
		function SmartereyeDevice::is_capturing()
		function SmartereyeDevice::wait_for_device()
namespace drivers
	namespace smartereye
		function SmartereyeHandler::SmartereyeHandler(std::string)
		function SmartereyeHandler::~SmartereyeHandler()
		function SmartereyeHandler::SetCallback(CallbackFunc)
		function SmartereyeHandler::handleRawFrame(const RawImageFrame *)
namespace image_decompress
	function ImageDecompressComponent::Init()
	function ImageDecompressComponent::Proc(const std::shared_ptr<apollo::drivers::CompressedImage>&)
namespace drivers
	namespace video
		function CameraDriver::CameraDriver(const CameraH265Config *)
		function CameraDriver::Poll(std::shared_ptr<CompressedImage>)
		function CameraDriver::PollByFrame(std::shared_ptr<CompressedImage>)
		function CameraDriver::Init()
namespace drivers
	namespace video
		function SocketInput::SocketInput()
		function SocketInput::~SocketInput()
		function SocketInput::Init(uint32_t)
		function SocketInput::GetFramePacket(std::shared_ptr<CompressedImage>)
		function SocketInput::InputAvailable(int)
namespace drivers
	namespace video
		function FrameProcessor::FrameProcessor(const std::string &, const std::string &)
		function FrameProcessor::ProcessStream() const
		function FrameProcessor::GetOutputFile(const int) const
		function FrameProcessor::WriteOutputJpgFile(const std::vector<uint8_t>&, const std::string &) const
namespace drivers
	namespace video
		function H265Decoder::Init()
		function H265Decoder::Release()
		function H265Decoder::Process(const uint8_t *, const int32_t, std::vector<uint8_t>*) const
function DECLARE_string(input_video)
function DECLARE_string(output_dir)
variable DEFINE_string
variable DEFINE_string
function main(int, char **)
namespace drivers
	namespace video
		function CompCameraH265Compressed::Init()
		function CompCameraH265Compressed::VideoPoll()
namespace apollo
	namespace guardian
		function GuardianComponent::Init()
		function GuardianComponent::Proc()
		function GuardianComponent::PassThroughControlCommand()
		function GuardianComponent::TriggerSafetyMode()
variable DEFINE_double
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_int32
variable DEFINE_double
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_double
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_double
variable DEFINE_double
variable DEFINE_bool
variable DEFINE_int32
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_int32
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_string
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_double
variable DEFINE_int32
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_double
variable DEFINE_double
namespace localization
	namespace msf
		namespace velodyne
			function LoadPcds(const std::string &, const unsigned int, const Eigen::Affine3d &, VelodyneFrame *, bool)
			function LoadPcds(const std::string &, const unsigned int, const Eigen::Affine3d &, ::apollo::common::EigenVector3dVec *, std::vector<unsigned char>*, bool)
			function LoadPcdPoses(const std::string &, ::apollo::common::EigenAffine3dVec *, std::vector<double>*)
			function LoadPcdPoses(const std::string &, ::apollo::common::EigenAffine3dVec *, std::vector<double>*, std::vector<unsigned int>*)
			function LoadPosesAndStds(const std::string &, ::apollo::common::EigenAffine3dVec *, ::apollo::common::EigenVector3dVec *, std::vector<double>*)
			function LoadExtrinsic(const std::string &, Eigen::Affine3d *)
namespace localization
	namespace msf
		variable ZlibStrategy::zlib_chunk
		function ZlibStrategy::Encode(BufferStr *, BufferStr *)
		function ZlibStrategy::Decode(BufferStr *, BufferStr *)
		function ZlibStrategy::ZlibCompress(BufferStr *, BufferStr *)
		function ZlibStrategy::ZlibUncompress(BufferStr *, BufferStr *)
constant BOOST_NO_CXX11_SCOPED_ENUMS
constant BOOST_NO_CXX11_SCOPED_ENUMS
namespace localization
	namespace msf
		variable kBufferSize
		function FileUtility::ComputeFileMd5(const std::string &, unsigned char [kUcharMd5Length])
		function FileUtility::ComputeFileMd5(const std::string &, char [kCharMd5Lenth])
		function FileUtility::ComputeBinaryMd5(const unsigned char *, size_t, unsigned char [kUcharMd5Length])
		function FileUtility::ComputeBinaryMd5(const unsigned char *, size_t, char [kCharMd5Lenth])
namespace localization
	namespace msf
		function FrameTransform::LatlonToUtmXY(double, double, UTMCoor *)
		function FrameTransform::UtmXYToLatlon(double, double, int, bool, WGS84Corr *)
		function FrameTransform::XYZToBlh(const Vector3d &, Vector3d *)
		function FrameTransform::BlhToXYZ(const Vector3d &, Vector3d *)
constant BOOST_NO_CXX11_SCOPED_ENUMS
constant BOOST_NO_CXX11_SCOPED_ENUMS
namespace localization
	namespace msf
		function system::IsExists(const std::string &)
		function system::IsDirectory(const std::string &)
		function system::CreateDirectory(const std::string &)
		function system::GetFileSize(const std::string &, unsigned int *)
		function system::CopyFile(const std::string &, const std::string &, bool)
		function system::GetFilesInFolderRecursive(const std::string &, const std::string &, std::vector<std::string>*)
		function system::GetFilesInFolder(const std::string &, const std::string &, std::vector<std::string>*)
		function system::GetFoldersInFolder(const std::string &, std::vector<std::string>*)
namespace localization
	namespace msf
		function GnssMagTransfer::Transfer(const apollo::drivers::gnss::BandObservation &, BandObservationMsg *)
		function GnssMagTransfer::Transfer(const apollo::drivers::gnss::SatelliteObservation &, SatelliteObservationMsg *)
		function GnssMagTransfer::Transfer(const apollo::drivers::gnss::EpochObservation &, EpochObservationMsg *)
		function GnssMagTransfer::Transfer(const apollo::drivers::gnss::KepplerOrbit &, KepplerOrbitMsg *)
		function GnssMagTransfer::Transfer(const apollo::drivers::gnss::GlonassOrbit &, GlonassOrbitMsg *)
		function GnssMagTransfer::Transfer(const apollo::drivers::gnss::GnssEphemeris &, GnssEphemerisMsg *)
namespace localization
	namespace msf
		function LidarMsgTransfer::Transfer(const drivers::PointCloud &, LidarFrame *)
namespace apollo
	namespace localization
		namespace msf
			function LocalizationGnssProcess::LocalizationGnssProcess()
			function LocalizationGnssProcess::~LocalizationGnssProcess()
			function LocalizationGnssProcess::Init(const LocalizationIntegParam &)
			function LocalizationGnssProcess::SetDefaultOption()
			function LocalizationGnssProcess::RawObservationProcess(const drivers::gnss::EpochObservation &)
			function LocalizationGnssProcess::RawEphemerisProcess(const drivers::gnss::GnssEphemeris &)
			function LocalizationGnssProcess::IntegSinsPvaProcess(const InsPva &, const double [9][9])
			function LocalizationGnssProcess::GetResult(MeasureData *)
			function LocalizationGnssProcess::DuplicateEph(const drivers::gnss::GnssEphemeris &)
			function LocalizationGnssProcess::LogPnt(const GnssPntResultMsg &, double)
			function LocalizationGnssProcess::GnssPosition(EpochObservationMsg *)
namespace localization
	namespace msf
		function LocalizationInteg::LocalizationInteg()
		function LocalizationInteg::~LocalizationInteg()
		function LocalizationInteg::Init(const LocalizationIntegParam &)
		function LocalizationInteg::PcdProcess(const drivers::PointCloud &)
		function LocalizationInteg::RawImuProcessFlu(const drivers::gnss::Imu &)
		function LocalizationInteg::RawImuProcessRfu(const drivers::gnss::Imu &)
		function LocalizationInteg::RawObservationProcess(const drivers::gnss::EpochObservation &)
		function LocalizationInteg::RawEphemerisProcess(const drivers::gnss::GnssEphemeris &)
		function LocalizationInteg::GnssBestPoseProcess(const drivers::gnss::GnssBestPose &)
		function LocalizationInteg::GnssHeadingProcess(const drivers::gnss::Heading &)
		function LocalizationInteg::GetLastestLidarLocalization() const
		function LocalizationInteg::GetLastestIntegLocalization() const
		function LocalizationInteg::GetLastestGnssLocalization() const
		function LocalizationInteg::TransferImuRfu(const drivers::gnss::Imu &, ImuData *)
		function LocalizationInteg::TransferImuFlu(const drivers::gnss::Imu &, ImuData *)
namespace localization
	namespace msf
		function LocalizationIntegImpl::LocalizationIntegImpl()
		function LocalizationIntegImpl::~LocalizationIntegImpl()
		function LocalizationIntegImpl::Init(const LocalizationIntegParam &)
		function LocalizationIntegImpl::PcdProcess(const LidarFrame &)
		function LocalizationIntegImpl::PcdProcessImpl(const LidarFrame &)
		function LocalizationIntegImpl::RawImuProcessRfu(const ImuData &)
		function LocalizationIntegImpl::ImuProcessImpl(const ImuData &)
		function LocalizationIntegImpl::RawObservationProcess(const drivers::gnss::EpochObservation &)
		function LocalizationIntegImpl::RawEphemerisProcess(const drivers::gnss::GnssEphemeris &)
		function LocalizationIntegImpl::GnssBestPoseProcess(const drivers::gnss::GnssBestPose &)
		function LocalizationIntegImpl::RawObservationProcessImpl(const drivers::gnss::EpochObservation &)
		function LocalizationIntegImpl::RawEphemerisProcessImpl(const drivers::gnss::GnssEphemeris &)
		function LocalizationIntegImpl::GnssBestPoseProcessImpl(const drivers::gnss::GnssBestPose &)
		function LocalizationIntegImpl::GnssHeadingProcess(const drivers::gnss::Heading &)
		function LocalizationIntegImpl::GnssHeadingProcessImpl(const drivers::gnss::Heading &)
		function LocalizationIntegImpl::TransferGnssMeasureToLocalization(const MeasureData &, LocalizationEstimate *)
		function LocalizationIntegImpl::GetLastestLidarLocalization() const
		function LocalizationIntegImpl::GetLastestIntegLocalization() const
		function LocalizationIntegImpl::GetLastestGnssLocalization() const
namespace localization
	namespace msf
		function LocalizationIntegProcess::LocalizationIntegProcess()
		function LocalizationIntegProcess::~LocalizationIntegProcess()
		function LocalizationIntegProcess::Init(const LocalizationIntegParam &)
		function LocalizationIntegProcess::RawImuProcess(const ImuData &)
		function LocalizationIntegProcess::GetValidFromOK()
		function LocalizationIntegProcess::GetState(IntegState *)
		function LocalizationIntegProcess::GetResult(IntegState *, LocalizationEstimate *)
		function LocalizationIntegProcess::GetResult(IntegState *, InsPva *, double [9][9])
		function LocalizationIntegProcess::GetCorrectedImu(ImuData *)
		function LocalizationIntegProcess::GetEarthParameter(InertialParameter *)
		function LocalizationIntegProcess::MeasureDataProcess(const MeasureData &)
		function LocalizationIntegProcess::StartThreadLoop()
		function LocalizationIntegProcess::StopThreadLoop()
		function LocalizationIntegProcess::MeasureDataThreadLoop()
		function LocalizationIntegProcess::MeasureDataProcessImpl(const MeasureData &)
		function LocalizationIntegProcess::CheckIntegMeasureData(const MeasureData &)
		function LocalizationIntegProcess::LoadGnssAntennaExtrinsic(const std::string &, TransformD *) const
namespace localization
	namespace msf
		function LocalizationLidar::LocalizationLidar()
		function LocalizationLidar::~LocalizationLidar()
		function LocalizationLidar::Init(const std::string &, const unsigned int, const unsigned int, const int, const unsigned int)
		function LocalizationLidar::SetVelodyneExtrinsic(const Eigen::Affine3d &)
		function LocalizationLidar::SetVehicleHeight(double)
		function LocalizationLidar::SetValidThreshold(float)
		function LocalizationLidar::SetImageAlignMode(int)
		function LocalizationLidar::SetLocalizationMode(int)
		function LocalizationLidar::SetDeltaYawLimit(double)
		function LocalizationLidar::SetDeltaPitchRollLimit(double)
		function LocalizationLidar::Update(const unsigned int, const Eigen::Affine3d &, const Eigen::Vector3d, const LidarFrame &, bool)
		function LocalizationLidar::GetResult(Eigen::Affine3d *, Eigen::Matrix3d *, double *)
		function LocalizationLidar::GetLocalizationDistribution(Eigen::MatrixXd *)
		function LocalizationLidar::RefineAltitudeFromMap(Eigen::Affine3d *)
		function LocalizationLidar::ComposeMapNode(const Eigen::Vector3d &)
namespace localization
	namespace msf
		function LocalizationLidarProcess::LocalizationLidarProcess()
		function LocalizationLidarProcess::~LocalizationLidarProcess()
		function LocalizationLidarProcess::Init(const LocalizationIntegParam &)
		function LocalizationLidarProcess::ComputeDeltaYawLimit(const int64_t, const int64_t, const double, const double)
		function LocalizationLidarProcess::PcdProcess(const LidarFrame &)
		function LocalizationLidarProcess::GetResult(int *, TransformD *, Matrix3D *) const
		function LocalizationLidarProcess::GetResult(LocalizationEstimate *)
		function LocalizationLidarProcess::IntegPvaProcess(const InsPva &)
		function LocalizationLidarProcess::RawImuProcess(const ImuData &)
		function LocalizationLidarProcess::GetPredictPose(const double, TransformD *, ForecastState *)
		function LocalizationLidarProcess::CheckState()
		function LocalizationLidarProcess::UpdateState(const int, const double)
		function LocalizationLidarProcess::LoadLidarExtrinsic(const std::string &, TransformD *)
		function LocalizationLidarProcess::LoadLidarHeight(const std::string &, LidarHeight *)
namespace localization
	namespace msf
		function MeasureRepublishProcess::MeasureRepublishProcess()
		function MeasureRepublishProcess::~MeasureRepublishProcess()
		function MeasureRepublishProcess::Init(const LocalizationIntegParam &)
		function MeasureRepublishProcess::NovatelBestgnssposProcess(const GnssBestPose &, MeasureData *)
		function MeasureRepublishProcess::GnssLocalProcess(const MeasureData &, MeasureData *)
		function MeasureRepublishProcess::IntegPvaProcess(const InsPva &)
		function MeasureRepublishProcess::LidarLocalProcess(const LocalizationEstimate &, MeasureData *)
		function MeasureRepublishProcess::IsSinsAlign()
		function MeasureRepublishProcess::TransferXYZFromBestgnsspose(const GnssBestPose &, MeasureData *)
		function MeasureRepublishProcess::TransferFirstMeasureFromBestgnsspose(const GnssBestPose &, MeasureData *)
		function MeasureRepublishProcess::CalculateVelFromBestgnsspose(const GnssBestPose &, MeasureData *)
		function MeasureRepublishProcess::GnssHeadingProcess(const drivers::gnss::Heading &, MeasureData *, int *)
		function MeasureRepublishProcess::LoadImuGnssAntennaExtrinsic(std::string, VehicleGnssAntExtrinsic *) const
		function MeasureRepublishProcess::CheckBestgnssPoseXYStd(const GnssBestPose &)
		function MeasureRepublishProcess::CheckBestgnssposeStatus(const GnssBestPose &)
namespace localization
	namespace msf
		function OnlineLocalizationExpert::Init(const LocalizationIntegParam &)
		function OnlineLocalizationExpert::AddImu(const ImuData &)
		function OnlineLocalizationExpert::AddFusionLocalization(const LocalizationEstimate &)
		function OnlineLocalizationExpert::AddLidarLocalization(const LocalizationEstimate &)
		function OnlineLocalizationExpert::AddGnssBestPose(const drivers::gnss::GnssBestPose &, const MeasureData &)
		function OnlineLocalizationExpert::CheckImuDelayStatus(const double &)
		function OnlineLocalizationExpert::CheckImuMissingStatus(const double &)
		function OnlineLocalizationExpert::CheckGnssLidarMsfStatus(const double &)
		function OnlineLocalizationExpert::SetLocalizationStatus(const LocalizationEstimate &)
		function OnlineLocalizationExpert::GetFusionStatus(MsfStatus *, MsfSensorMsgStatus *, LocalizationIntegStatus *)
		function OnlineLocalizationExpert::GetGnssStatus(MsfStatus *)
namespace localization
	namespace msf
		function BaseMap::BaseMap(BaseMapConfig *)
		function BaseMap::~BaseMap()
		function BaseMap::InitMapNodeCaches(int, int)
		function BaseMap::GetMapNode(const MapNodeIndex &)
		function BaseMap::GetMapNodeSafe(const MapNodeIndex &)
		function BaseMap::IsMapNodeExist(const MapNodeIndex &) const
		function BaseMap::SetMapFolderPath(const std::string)
		function BaseMap::AddDataset(const std::string)
		function BaseMap::LoadMapNodes(std::set<MapNodeIndex>*)
		function BaseMap::PreloadMapNodes(std::set<MapNodeIndex>*)
		function BaseMap::AttachMapNodePool(BaseMapNodePool *)
		function BaseMap::LoadMapNodeThreadSafety(MapNodeIndex, bool)
		function BaseMap::PreloadMapArea(const Eigen::Vector3d &, const Eigen::Vector3d &, unsigned int, unsigned int)
		function BaseMap::LoadMapArea(const Eigen::Vector3d &, unsigned int, unsigned int, int, int)
namespace localization
	namespace msf
		function BaseMapConfig::BaseMapConfig(std::string)
		function BaseMapConfig::Save(const std::string)
		function BaseMapConfig::Load(const std::string)
		function BaseMapConfig::CreateXml(boost::property_tree::ptree *) const
		function BaseMapConfig::LoadXml(const boost::property_tree::ptree &)
		function BaseMapConfig::ResizeMapRange()
		function BaseMapConfig::SetSingleResolutions(float)
		function BaseMapConfig::SetMultiResolutions()
namespace localization
	namespace msf
		function BaseMapMatrix::BaseMapMatrix()
		function BaseMapMatrix::~BaseMapMatrix()
		function BaseMapMatrix::BaseMapMatrix(const BaseMapMatrix &)
		function BaseMapMatrix::LoadBinary(unsigned char *)
		function BaseMapMatrix::CreateBinary(unsigned char *, unsigned int) const
		function BaseMapMatrix::GetBinarySize() const
namespace localization
	namespace msf
		function BaseMapNode::BaseMapNode(BaseMapMatrix *, CompressionStrategy *)
		function BaseMapNode::~BaseMapNode()
		function BaseMapNode::Init(const BaseMapConfig *, const MapNodeIndex &, bool)
		function BaseMapNode::InitMapMatrix(const BaseMapConfig *)
		function BaseMapNode::Finalize()
		function BaseMapNode::ResetMapNode()
		function BaseMapNode::Save()
		function BaseMapNode::Load()
		function BaseMapNode::Load(const char *)
		function BaseMapNode::LoadBinary(FILE *)
		function BaseMapNode::CreateBinary(FILE *) const
		function BaseMapNode::GetBinarySize() const
		function BaseMapNode::LoadHeaderBinary(unsigned char *)
		function BaseMapNode::CreateHeaderBinary(unsigned char *, unsigned int) const
		function BaseMapNode::GetHeaderBinarySize() const
		function BaseMapNode::LoadBodyBinary(std::vector<unsigned char>*)
		function BaseMapNode::CreateBodyBinary(std::vector<unsigned char>*) const
		function BaseMapNode::GetBodyBinarySize() const
		function BaseMapNode::GetCoordinate(const Eigen::Vector2d &, unsigned int *, unsigned int *) const
		function BaseMapNode::GetCoordinate(const Eigen::Vector3d &, unsigned int *, unsigned int *) const
		function BaseMapNode::GetCoordinate(unsigned int, unsigned int) const
		function BaseMapNode::GetLeftTopCorner(const BaseMapConfig &, const MapNodeIndex &)
		function BaseMapNode::SaveIntensityImage() const
		function BaseMapNode::SaveIntensityImage(const std::string &) const
namespace localization
	namespace msf
		function MapNodeIndex::MapNodeIndex()
		function MapNodeIndex::operator<(const MapNodeIndex &) const
		function MapNodeIndex::operator==(const MapNodeIndex &) const
		function MapNodeIndex::operator!=(const MapNodeIndex &) const
		function MapNodeIndex::ToString() const
		function MapNodeIndex::GetMapNodeIndex(const BaseMapConfig &, const Eigen::Vector3d &, unsigned int, int)
		function MapNodeIndex::GetMapNodeIndex(const BaseMapConfig &, const Eigen::Vector2d &, unsigned int, int)
		function MapNodeIndex::GetMapIndexRangeEast(const BaseMapConfig &, unsigned int)
		function MapNodeIndex::GetMapIndexRangeNorth(const BaseMapConfig &, unsigned int)
		operator operator<<(std::ostream &, const MapNodeIndex &)
namespace localization
	namespace msf
		function BaseMapNodePool::BaseMapNodePool(unsigned int, unsigned int)
		function BaseMapNodePool::~BaseMapNodePool()
		function BaseMapNodePool::Initial(const BaseMapConfig *, bool)
		function BaseMapNodePool::Release()
		function BaseMapNodePool::AllocMapNode()
		function BaseMapNodePool::FreeMapNode(BaseMapNode *)
		function BaseMapNodePool::FreeMapNodeTask(BaseMapNode *)
		function BaseMapNodePool::InitNewMapNode(BaseMapNode *)
		function BaseMapNodePool::FinalizeMapNode(BaseMapNode *)
		function BaseMapNodePool::DellocMapNode(BaseMapNode *)
		function BaseMapNodePool::ResetMapNode(BaseMapNode *)
namespace localization
	namespace msf
		function LosslessMap::LosslessMap(LosslessMapConfig *)
		function LosslessMap::~LosslessMap()
		function LosslessMap::SetValue(const Eigen::Vector3d &, int, unsigned char)
		function LosslessMap::SetValueLayer(const Eigen::Vector3d &, int, unsigned char)
		function LosslessMap::GetValue(const Eigen::Vector3d &, int, unsigned int, std::vector<unsigned char>*)
		function LosslessMap::GetValueSafe(const Eigen::Vector3d &, int, unsigned int, std::vector<unsigned char>*)
		function LosslessMap::GetVar(const Eigen::Vector3d &, int, unsigned int, std::vector<float>*)
		function LosslessMap::GetVarSafe(const Eigen::Vector3d &, int, unsigned int, std::vector<float>*)
		function LosslessMap::GetAlt(const Eigen::Vector3d &, int, unsigned int, std::vector<float>*)
		function LosslessMap::GetAltSafe(const Eigen::Vector3d &, int, unsigned int, std::vector<float>*)
		function LosslessMap::GetAltVar(const Eigen::Vector3d &, int, unsigned int, std::vector<float>*)
		function LosslessMap::GetAltVarSafe(const Eigen::Vector3d &, int, unsigned int, std::vector<float>*)
		function LosslessMap::GetCount(const Eigen::Vector3d &, int, unsigned int, std::vector<unsigned int>*)
		function LosslessMap::GetCountSafe(const Eigen::Vector3d &, int, unsigned int, std::vector<unsigned int>*)
		function LosslessMap::GetValue(const Eigen::Vector3d &, int, unsigned int)
		function LosslessMap::GetValueSafe(const Eigen::Vector3d &, int, unsigned int)
		function LosslessMap::GetVar(const Eigen::Vector3d &, int, unsigned int)
		function LosslessMap::GetVarSafe(const Eigen::Vector3d &, int, unsigned int)
		function LosslessMap::GetAlt(const Eigen::Vector3d &, int, unsigned int)
		function LosslessMap::GetAltSafe(const Eigen::Vector3d &, int, unsigned int)
		function LosslessMap::GetAltVar(const Eigen::Vector3d &, int, unsigned int)
		function LosslessMap::GetAltVarSafe(const Eigen::Vector3d &, int, unsigned int)
		function LosslessMap::GetCount(const Eigen::Vector3d &, int, unsigned int)
		function LosslessMap::GetCountSafe(const Eigen::Vector3d &, int, unsigned int)
		function LosslessMap::PreloadMapArea(const Eigen::Vector3d &, const Eigen::Vector3d &, unsigned int, unsigned int)
		function LosslessMap::LoadMapArea(const Eigen::Vector3d &, unsigned int, unsigned int, int, int)
namespace localization
	namespace msf
		function LosslessMapConfig::LosslessMapConfig(std::string)
		function LosslessMapConfig::CreateXml(boost::property_tree::ptree *) const
		function LosslessMapConfig::LoadXml(const boost::property_tree::ptree &)
namespace localization
	namespace msf
		function LosslessMapSingleCell::LosslessMapSingleCell()
		function LosslessMapSingleCell::Reset()
		function LosslessMapSingleCell::operator=(const LosslessMapSingleCell &)
		function LosslessMapSingleCell::AddSample(const float, const float)
		function LosslessMapSingleCell::LoadBinary(unsigned char *)
		function LosslessMapSingleCell::CreateBinary(unsigned char *, unsigned int) const
		function LosslessMapSingleCell::GetBinarySize() const
		function LosslessMapCell::LosslessMapCell()
		function LosslessMapCell::Reset()
		function LosslessMapCell::SetValueLayer(double, unsigned char, double)
		function LosslessMapCell::SetValue(double, unsigned char)
		function LosslessMapCell::LoadBinary(unsigned char *)
		function LosslessMapCell::CreateBinary(unsigned char *, unsigned int) const
		function LosslessMapCell::GetBinarySize() const
		function LosslessMapCell::GetLayerId(double) const
		function LosslessMapCell::GetValue(std::vector<unsigned char>*) const
		function LosslessMapCell::GetVar(std::vector<float>*) const
		function LosslessMapCell::GetAlt(std::vector<float>*) const
		function LosslessMapCell::GetAltVar(std::vector<float>*) const
		function LosslessMapCell::GetCount(std::vector<unsigned int>*) const
		function LosslessMapMatrix::LosslessMapMatrix()
		function LosslessMapMatrix::~LosslessMapMatrix()
		function LosslessMapMatrix::LosslessMapMatrix(const LosslessMapMatrix &)
		function LosslessMapMatrix::Init(const BaseMapConfig *)
		function LosslessMapMatrix::Reset(const BaseMapConfig *)
		function LosslessMapMatrix::Init(unsigned int, unsigned int)
		function LosslessMapMatrix::Reset(unsigned int, unsigned int)
		function LosslessMapMatrix::LoadBinary(unsigned char *)
		function LosslessMapMatrix::CreateBinary(unsigned char *, unsigned int) const
		function LosslessMapMatrix::GetBinarySize() const
		function LosslessMapMatrix::GetIntensityImg(cv::Mat *) const
namespace localization
	namespace msf
		function LosslessMapNode::LosslessMapNode()
		function LosslessMapNode::~LosslessMapNode()
		function LosslessMapNode::SetValue(const Eigen::Vector3d &, unsigned char)
		function LosslessMapNode::SetValueIfInBound(const Eigen::Vector3d &, unsigned char)
		function LosslessMapNode::SetValueLayer(const Eigen::Vector3d &, unsigned char)
		function LosslessMapNode::GetValue(const Eigen::Vector3d &, std::vector<unsigned char>*) const
		function LosslessMapNode::GetVar(const Eigen::Vector3d &, std::vector<float>*) const
		function LosslessMapNode::GetAlt(const Eigen::Vector3d &, std::vector<float>*) const
		function LosslessMapNode::GetAltVar(const Eigen::Vector3d &, std::vector<float>*) const
		function LosslessMapNode::GetCount(const Eigen::Vector3d &, std::vector<unsigned int>*) const
		function LosslessMapNode::GetValue(const Eigen::Vector3d &) const
		function LosslessMapNode::GetVar(const Eigen::Vector3d &) const
		function LosslessMapNode::GetAlt(const Eigen::Vector3d &) const
		function LosslessMapNode::GetAltVar(const Eigen::Vector3d &) const
		function LosslessMapNode::GetCount(const Eigen::Vector3d &) const
namespace localization
	namespace msf
		function LosslessMapNodePool::LosslessMapNodePool(unsigned int, unsigned int)
		function LosslessMapNodePool::AllocNewMapNode()
namespace localization
	namespace msf
		function LossyMap2D::LossyMap2D(LossyMapConfig2D *)
		function LossyMap2D::~LossyMap2D()
		function LossyMap2D::PreloadMapArea(const Eigen::Vector3d &, const Eigen::Vector3d &, unsigned int, unsigned int)
		function LossyMap2D::LoadMapArea(const Eigen::Vector3d &, unsigned int, unsigned int, int, int)
namespace localization
	namespace msf
		function LossyMapConfig2D::LossyMapConfig2D(std::string)
		function LossyMapConfig2D::CreateXml(boost::property_tree::ptree *) const
		function LossyMapConfig2D::LoadXml(const boost::property_tree::ptree &)
namespace localization
	namespace msf
		function LossyMapCell2D::LossyMapCell2D()
		function LossyMapCell2D::Reset()
		function LossyMapCell2D::operator=(const LossyMapCell2D &)
		function LossyMapMatrix2D::LossyMapMatrix2D()
		function LossyMapMatrix2D::~LossyMapMatrix2D()
		function LossyMapMatrix2D::LossyMapMatrix2D(const LossyMapMatrix2D &)
		function LossyMapMatrix2D::operator=(const LossyMapMatrix2D &)
		function LossyMapMatrix2D::Init(const BaseMapConfig *)
		function LossyMapMatrix2D::Init(unsigned int, unsigned int)
		function LossyMapMatrix2D::Reset(const BaseMapConfig *)
		function LossyMapMatrix2D::Reset(unsigned int, unsigned int)
		function LossyMapMatrix2D::EncodeIntensity(const LossyMapCell2D &) const
		function LossyMapMatrix2D::DecodeIntensity(unsigned char, LossyMapCell2D *) const
		function LossyMapMatrix2D::EncodeVar(const LossyMapCell2D &) const
		function LossyMapMatrix2D::DecodeVar(uint16_t, LossyMapCell2D *) const
		function LossyMapMatrix2D::EncodeAltitudeGround(const LossyMapCell2D &) const
		function LossyMapMatrix2D::DecodeAltitudeGround(uint16_t, LossyMapCell2D *) const
		function LossyMapMatrix2D::EncodeAltitudeAvg(const LossyMapCell2D &) const
		function LossyMapMatrix2D::DecodeAltitudeAvg(uint16_t, LossyMapCell2D *) const
		function LossyMapMatrix2D::EncodeCount(const LossyMapCell2D &) const
		function LossyMapMatrix2D::DecodeCount(unsigned char, LossyMapCell2D *) const
		function LossyMapMatrix2D::LoadBinary(unsigned char *)
		function LossyMapMatrix2D::CreateBinary(unsigned char *, unsigned int) const
		function LossyMapMatrix2D::GetBinarySize() const
		function LossyMapMatrix2D::GetIntensityImg(cv::Mat *) const
namespace localization
	namespace msf
		function LossyMapNodePool2D::LossyMapNodePool2D(unsigned int, unsigned int)
		function LossyMapNodePool2D::AllocNewMapNode()
namespace localization
	namespace msf
		function NdtMap::NdtMap(NdtMapConfig *)
		function NdtMap::~NdtMap()
		function NdtMap::PreloadMapArea(const Eigen::Vector3d &, const Eigen::Vector3d &, unsigned int, unsigned int)
		function NdtMap::LoadMapArea(const Eigen::Vector3d &, unsigned int, unsigned int, int, int)
namespace localization
	namespace msf
		function NdtMapConfig::NdtMapConfig(std::string)
		function NdtMapConfig::SetSingleResolutionZ(float)
		function NdtMapConfig::SetMultiResolutionsZ()
		function NdtMapConfig::CreateXml(boost::property_tree::ptree *) const
		function NdtMapConfig::LoadXml(boost::property_tree::ptree *)
namespace localization
	namespace msf
		function NdtMapSingleCell::NdtMapSingleCell()
		function NdtMapSingleCell::LoadBinary(unsigned char *)
		function NdtMapSingleCell::CreateBinary(unsigned char *, unsigned int) const
		function NdtMapSingleCell::GetBinarySize() const
		function NdtMapSingleCell::operator=(const NdtMapSingleCell &)
		function NdtMapSingleCell::Reduce(NdtMapSingleCell *, const NdtMapSingleCell &)
		function NdtMapCells::NdtMapCells()
		function NdtMapCells::Reset()
		function NdtMapCells::AddSample(const float, const float, const float, const Eigen::Vector3f, bool)
		function NdtMapCells::LoadBinary(unsigned char *)
		function NdtMapCells::CreateBinary(unsigned char *, unsigned int) const
		function NdtMapCells::GetBinarySize() const
		function NdtMapCells::CalAltitudeIndex(const float, const float)
		function NdtMapCells::CalAltitude(const float, const int)
		function NdtMapCells::Reduce(NdtMapCells *, const NdtMapCells &)
		function NdtMapMatrix::NdtMapMatrix()
		function NdtMapMatrix::~NdtMapMatrix()
		function NdtMapMatrix::NdtMapMatrix(const NdtMapMatrix &)
		function NdtMapMatrix::Init(const BaseMapConfig *)
		function NdtMapMatrix::Reset(const BaseMapConfig *)
		function NdtMapMatrix::Init(unsigned int, unsigned int)
		function NdtMapMatrix::Reset(unsigned int, unsigned int)
		function NdtMapMatrix::LoadBinary(unsigned char *)
		function NdtMapMatrix::CreateBinary(unsigned char *, unsigned int) const
		function NdtMapMatrix::GetBinarySize() const
		function NdtMapMatrix::Reduce(NdtMapMatrix *, const NdtMapMatrix &)
		function NdtMapMatrix::GetIntensityImg(cv::Mat *) const
namespace localization
	namespace msf
		function NdtMapNode::NdtMapNode()
		function NdtMapNode::~NdtMapNode()
		function NdtMapNode::GetCoordinate3D(unsigned int, unsigned int, int) const
		function NdtMapNode::GetCoordinateCenter3D(unsigned int, unsigned int, int) const
		function NdtMapNode::Reduce(NdtMapNode *, const NdtMapNode &)
namespace localization
	namespace msf
		function NdtMapNodePool::NdtMapNodePool(unsigned int, unsigned int)
		function NdtMapNodePool::AllocNewMapNode()
namespace localization
	namespace msf
		namespace pyramid_map
			function BaseMap::BaseMap(BaseMapConfig *)
			function BaseMap::~BaseMap()
			function BaseMap::InitMapNodeCaches(int, int)
			function BaseMap::AttachMapNodePool(BaseMapNodePool *)
			function BaseMap::GetMapNode(const MapNodeIndex &)
			function BaseMap::GetMapNodeSafe(const MapNodeIndex &)
			function BaseMap::IsMapNodeExist(const MapNodeIndex &)
			function BaseMap::SetMapFolderPath(const std::string)
			function BaseMap::AddDataset(const std::string)
			function BaseMap::LoadMapNodes(std::set<MapNodeIndex>*)
			function BaseMap::CheckAndUpdateCache(std::set<MapNodeIndex>*)
			function BaseMap::PreloadMapNodes(std::set<MapNodeIndex>*)
			function BaseMap::LoadMapNodeThreadSafety(const MapNodeIndex &, bool)
			function BaseMap::PreloadMapArea(const Eigen::Vector3d &, const Eigen::Vector3d &, unsigned int, unsigned int)
			function BaseMap::LoadMapArea(const Eigen::Vector3d &, unsigned int, unsigned int, int, int)
			function BaseMap::GetMapIndexFromMapPath(const std::string &)
			function BaseMap::GetAllMapIndexAndPath()
			function BaseMap::ComputeMd5ForAllMapNodes()
			function BaseMap::CheckMap()
			function BaseMap::CheckMapStrictly()
namespace localization
	namespace msf
		namespace pyramid_map
			function BaseMapConfig::BaseMapConfig(const std::string &)
			function BaseMapConfig::~BaseMapConfig()
			function BaseMapConfig::Save(const std::string &)
			function BaseMapConfig::Load(const std::string &)
			function BaseMapConfig::CreateXml(boost::property_tree::ptree *) const
			function BaseMapConfig::LoadXml(const boost::property_tree::ptree &)
			function BaseMapConfig::SetMapVersion(const std::string &)
			function BaseMapConfig::ResizeMapRange()
			function BaseMapConfig::SetSingleResolutions(float)
			function BaseMapConfig::SetMultiResolutions()
			function BaseMapConfig::SetNodeMd5Map(const std::map<std::string,std::string>&)
			function BaseMapConfig::AddNodeMd5(const std::string &, const std::string &)
			function BaseMapConfig::SetMapNodeSize(unsigned int, unsigned int)
			function BaseMapConfig::SetGroundHeightOffset(float)
			function BaseMapConfig::SetIsCompression(bool)
			function BaseMapConfig::GetMapVersion() const
namespace localization
	namespace msf
		namespace pyramid_map
			function BaseMapMatrix::BaseMapMatrix()
			function BaseMapMatrix::~BaseMapMatrix()
			function BaseMapMatrix::BaseMapMatrix(const BaseMapMatrix &)
			function BaseMapMatrix::GetIntensityImg(cv::Mat *) const
			function BaseMapMatrix::GetAltitudeImg(cv::Mat *) const
namespace localization
	namespace msf
		namespace pyramid_map
			function BaseMapNode::BaseMapNode()
			function BaseMapNode::BaseMapNode(BaseMapMatrix *, CompressionStrategy *)
			function BaseMapNode::~BaseMapNode()
			function BaseMapNode::InitMapMatrix(const BaseMapConfig *)
			function BaseMapNode::Finalize()
			function BaseMapNode::ResetMapNode()
			function BaseMapNode::Save()
			function BaseMapNode::Load()
			function BaseMapNode::Load(const char *)
			function BaseMapNode::LoadBinary(FILE *)
			function BaseMapNode::CreateBinary(FILE *) const
			function BaseMapNode::GetBinarySize() const
			function BaseMapNode::LoadHeaderBinary(const unsigned char *)
			function BaseMapNode::CreateHeaderBinary(unsigned char *, size_t) const
			function BaseMapNode::GetHeaderBinarySize() const
			function BaseMapNode::LoadBodyBinary(std::vector<unsigned char>*)
			function BaseMapNode::CreateBodyBinary(std::vector<unsigned char>*) const
			function BaseMapNode::GetBodyBinarySize() const
			function BaseMapNode::GetCoordinate(const Eigen::Vector2d &, unsigned int *, unsigned int *) const
			function BaseMapNode::GetCoordinate(const Eigen::Vector3d &, unsigned int *, unsigned int *) const
			function BaseMapNode::GetCoordinate(unsigned int, unsigned int) const
			function BaseMapNode::SetMapNodeIndex(const MapNodeIndex &)
			function BaseMapNode::ComputeLeftTopCorner(const BaseMapConfig &, const MapNodeIndex &)
			function BaseMapNode::GetLeftTopCorner(const BaseMapConfig &, const MapNodeIndex &)
			function BaseMapNode::CreateMapDirectory(const std::string &) const
			function BaseMapNode::CreateMapDirectoryRecursively(const std::vector<std::string>&) const
			function BaseMapNode::CheckMapDirectoryRecursively(const std::vector<std::string>&) const
			function BaseMapNode::SaveIntensityImage() const
			function BaseMapNode::SaveIntensityImage(const std::string &) const
			function BaseMapNode::SaveAltitudeImage() const
			function BaseMapNode::SaveAltitudeImage(const std::string &) const
namespace localization
	namespace msf
		namespace pyramid_map
			function BaseMapNodeConfig::BaseMapNodeConfig()
			function BaseMapNodeConfig::~BaseMapNodeConfig()
			function BaseMapNodeConfig::Clone()
			function BaseMapNodeConfig::LoadBinary(const unsigned char *)
			function BaseMapNodeConfig::CreateBinary(unsigned char *, size_t) const
			function BaseMapNodeConfig::GetBinarySize() const
namespace localization
	namespace msf
		namespace pyramid_map
			function MapNodeIndex::MapNodeIndex()
			function MapNodeIndex::operator<(const MapNodeIndex &) const
			function MapNodeIndex::operator==(const MapNodeIndex &) const
			function MapNodeIndex::operator!=(const MapNodeIndex &) const
			function MapNodeIndex::ToString() const
			function MapNodeIndex::GetMapNodeIndex(const BaseMapConfig &, const Eigen::Vector3d &, unsigned int, int)
			function MapNodeIndex::GetMapNodeIndex(const BaseMapConfig &, const Eigen::Vector2d &, unsigned int, int)
			function MapNodeIndex::GetMapIndexRangeEast(const BaseMapConfig &, unsigned int)
			function MapNodeIndex::GetMapIndexRangeNorth(const BaseMapConfig &, unsigned int)
			operator operator<<(std::ostream &, const MapNodeIndex &)
namespace localization
	namespace msf
		namespace pyramid_map
			function BaseMapNodePool::BaseMapNodePool(unsigned int, unsigned int)
			function BaseMapNodePool::~BaseMapNodePool()
			function BaseMapNodePool::Initial(const BaseMapConfig *, bool)
			function BaseMapNodePool::Release()
			function BaseMapNodePool::AllocMapNode()
			function BaseMapNodePool::FreeMapNode(BaseMapNode *)
			function BaseMapNodePool::FreeMapNodeTask(BaseMapNode *)
			function BaseMapNodePool::InitNewMapNode(BaseMapNode *)
			function BaseMapNodePool::FinalizeMapNode(BaseMapNode *)
			function BaseMapNodePool::DellocMapNode(BaseMapNode *)
			function BaseMapNodePool::ResetMapNode(BaseMapNode *)
namespace localization
	namespace msf
		namespace pyramid_map
			function NdtMap::NdtMap(NdtMapConfig *)
			function NdtMap::~NdtMap()
namespace localization
	namespace msf
		namespace pyramid_map
			function NdtMapConfig::NdtMapConfig(std::string)
			function NdtMapConfig::SetSingleResolutionZ(float)
			function NdtMapConfig::SetMultiResolutionsZ()
			function NdtMapConfig::CreateXml(boost::property_tree::ptree *) const
			function NdtMapConfig::LoadXml(boost::property_tree::ptree *)
namespace localization
	namespace msf
		namespace pyramid_map
			function NdtMapSingleCell::NdtMapSingleCell()
			function NdtMapSingleCell::Reset()
			function NdtMapSingleCell::LoadBinary(const unsigned char *)
			function NdtMapSingleCell::CreateBinary(unsigned char *, size_t) const
			function NdtMapSingleCell::GetBinarySize() const
			function NdtMapSingleCell::operator=(const NdtMapSingleCell &)
			function NdtMapSingleCell::Reduce(NdtMapSingleCell *, const NdtMapSingleCell &)
			function NdtMapSingleCell::AddSample(const float, const float, const Eigen::Vector3f &, bool)
			function NdtMapSingleCell::MergeCell(const float, const float, const unsigned int, const unsigned int, const Eigen::Vector3f &, const Eigen::Matrix3f &)
			function NdtMapSingleCell::MergeCell(const NdtMapSingleCell &)
			function NdtMapSingleCell::CentroidEigenSolver(const Eigen::Matrix3f &)
			function NdtMapCells::NdtMapCells()
			function NdtMapCells::Reset()
			function NdtMapCells::AddSample(const float, const float, const float, const Eigen::Vector3f &, bool)
			function NdtMapCells::LoadBinary(const unsigned char *)
			function NdtMapCells::CreateBinary(unsigned char *, size_t) const
			function NdtMapCells::GetBinarySize() const
			function NdtMapCells::CalAltitudeIndex(const float, const float)
			function NdtMapCells::CalAltitude(const float, const int)
			function NdtMapCells::Reduce(NdtMapCells *, const NdtMapCells &)
			function NdtMapMatrix::NdtMapMatrix()
			function NdtMapMatrix::~NdtMapMatrix()
			function NdtMapMatrix::NdtMapMatrix(const NdtMapMatrix &)
			function NdtMapMatrix::Init(const BaseMapConfig &)
			function NdtMapMatrix::Reset()
			function NdtMapMatrix::Init(unsigned int, unsigned int)
			function NdtMapMatrix::Reset(unsigned int, unsigned int)
			function NdtMapMatrix::LoadBinary(const unsigned char *)
			function NdtMapMatrix::CreateBinary(unsigned char *, size_t) const
			function NdtMapMatrix::GetBinarySize() const
			function NdtMapMatrix::Reduce(NdtMapMatrix *, const NdtMapMatrix &)
			function NdtMapMatrix::GetIntensityImg(cv::Mat *) const
namespace localization
	namespace msf
		namespace pyramid_map
			function NdtMapMatrixHandlerSelector::NdtMapMatrixHandlerSelector()
			function NdtMapMatrixHandlerSelector::~NdtMapMatrixHandlerSelector()
			function NdtMapMatrixHandlerSelector::AllocNdtMapMatrixHandler()
			function NdtMapMatrixHandler::NdtMapMatrixHandler()
			function NdtMapMatrixHandler::~NdtMapMatrixHandler()
			function NdtMapMatrixHandler::LoadBinary(const unsigned char *, std::shared_ptr<BaseMapMatrix>)
			function NdtMapMatrixHandler::CreateBinary(const std::shared_ptr<BaseMapMatrix>, unsigned char *, size_t)
			function NdtMapMatrixHandler::GetBinarySize(const std::shared_ptr<BaseMapMatrix>)
namespace localization
	namespace msf
		namespace pyramid_map
			function NdtMapNode::NdtMapNode()
			function NdtMapNode::~NdtMapNode()
			function NdtMapNode::Init(const BaseMapConfig *)
			function NdtMapNode::Init(const BaseMapConfig *, const MapNodeIndex &, bool)
			function NdtMapNode::GetCoordinate3D(unsigned int, unsigned int, int) const
			function NdtMapNode::GetCoordinateCenter3D(unsigned int, unsigned int, int) const
			function NdtMapNode::Reduce(NdtMapNode *, const NdtMapNode &)
namespace localization
	namespace msf
		namespace pyramid_map
			function NdtMapNodeConfig::NdtMapNodeConfig()
			function NdtMapNodeConfig::~NdtMapNodeConfig()
			function NdtMapNodeConfig::Clone()
namespace localization
	namespace msf
		namespace pyramid_map
			function NdtMapNodePool::NdtMapNodePool(unsigned int, unsigned int)
			function NdtMapNodePool::AllocNewMapNode()
namespace localization
	namespace msf
		namespace pyramid_map
			function PyramidMap::PyramidMap(PyramidMapConfig *)
			function PyramidMap::~PyramidMap()
			function PyramidMap::GetIntensitySafe(const Eigen::Vector3d &, int, unsigned int, unsigned int)
			function PyramidMap::GetIntensityVarSafe(const Eigen::Vector3d &, int, unsigned int, unsigned int)
			function PyramidMap::GetAltitudeSafe(const Eigen::Vector3d &, int, unsigned int, unsigned int)
			function PyramidMap::GetAltitudeVarSafe(const Eigen::Vector3d &, int, unsigned int, unsigned int)
			function PyramidMap::GetGroundAltitudeSafe(const Eigen::Vector3d &, int, unsigned int, unsigned int)
			function PyramidMap::GetCountSafe(const Eigen::Vector3d &, int, unsigned int, unsigned int)
			function PyramidMap::GetGroundCountSafe(const Eigen::Vector3d &, int, unsigned int, unsigned int)
namespace localization
	namespace msf
		namespace pyramid_map
			function PyramidMapConfig::PyramidMapConfig(const std::string &)
			function PyramidMapConfig::~PyramidMapConfig()
			function PyramidMapConfig::CreateXml(boost::property_tree::ptree *) const
			function PyramidMapConfig::LoadXml(const boost::property_tree::ptree &)
namespace localization
	namespace msf
		namespace pyramid_map
			function PyramidMapMatrix::PyramidMapMatrix()
			function PyramidMapMatrix::~PyramidMapMatrix()
			function PyramidMapMatrix::PyramidMapMatrix(const PyramidMapMatrix &)
			function PyramidMapMatrix::Init(const BaseMapConfig &)
			function PyramidMapMatrix::Reset()
			function PyramidMapMatrix::Init(unsigned int, unsigned int, bool, bool, bool, bool, bool, bool, bool, unsigned int, unsigned int)
			function PyramidMapMatrix::Reset(unsigned int)
			function PyramidMapMatrix::ResetCells(unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::ResetCell(unsigned int, unsigned int)
			function PyramidMapMatrix::Clear()
			function PyramidMapMatrix::GetIntensityImg(cv::Mat *) const
			function PyramidMapMatrix::GetIntensityImg(unsigned int, cv::Mat *) const
			function PyramidMapMatrix::GetAltitudeImg(cv::Mat *) const
			function PyramidMapMatrix::GetAltitudeImg(unsigned int, cv::Mat *) const
			function PyramidMapMatrix::BottomUpSafe()
			function PyramidMapMatrix::BottomUpBase()
			function PyramidMapMatrix::operator=(const PyramidMapMatrix &)
			function PyramidMapMatrix::GetIntensitySafe(unsigned int, unsigned int, unsigned int) const
			function PyramidMapMatrix::GetIntensityVarSafe(unsigned int, unsigned int, unsigned int) const
			function PyramidMapMatrix::GetAltitudeSafe(unsigned int, unsigned int, unsigned int) const
			function PyramidMapMatrix::GetAltitudeVarSafe(unsigned int, unsigned int, unsigned int) const
			function PyramidMapMatrix::GetGroundAltitudeSafe(unsigned int, unsigned int, unsigned int) const
			function PyramidMapMatrix::GetCountSafe(unsigned int, unsigned int, unsigned int) const
			function PyramidMapMatrix::GetGroundCountSafe(unsigned int, unsigned int, unsigned int) const
			function PyramidMapMatrix::GetMapCellSafe(float **, float **, float **, float **, float **, unsigned int **, unsigned int **, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::GetIntensityMatrixSafe(unsigned int)
			function PyramidMapMatrix::GetIntensityVarMatrixSafe(unsigned int)
			function PyramidMapMatrix::GetAltitudeMatrixSafe(unsigned int)
			function PyramidMapMatrix::GetAltitudeVarMatrixSafe(unsigned int)
			function PyramidMapMatrix::GetGroundAltitudeMatrixSafe(unsigned int)
			function PyramidMapMatrix::GetCountMatrixSafe(unsigned int)
			function PyramidMapMatrix::GetGroundCountMatrixSafe(unsigned int)
			function PyramidMapMatrix::GetIntensityMatrixSafe(unsigned int) const
			function PyramidMapMatrix::GetIntensityVarMatrixSafe(unsigned int) const
			function PyramidMapMatrix::GetAltitudeMatrixSafe(unsigned int) const
			function PyramidMapMatrix::GetAltitudeVarMatrixSafe(unsigned int) const
			function PyramidMapMatrix::GetGroundAltitudeMatrixSafe(unsigned int) const
			function PyramidMapMatrix::GetCountMatrixSafe(unsigned int) const
			function PyramidMapMatrix::GetGroundCountMatrixSafe(unsigned int) const
			function PyramidMapMatrix::SetIntensityMatrix(const float *, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetIntensityVarMatrix(const float *, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetAltitudeMatrix(const float *, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetAltitudeVarMatrix(const float *, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetGroundAltitudeMatrix(const float *, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetCountMatrix(const unsigned int *, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetGroundCountMatrix(const unsigned int *, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetFloatMatrixRoi(const FloatMatrix *, const Rect2D<unsigned int>&, const Rect2D<unsigned int>&, unsigned int, unsigned int)
			function PyramidMapMatrix::SetUintMatrixRoi(const UIntMatrix *, const Rect2D<unsigned int>&, const Rect2D<unsigned int>&, unsigned int, unsigned int)
			function PyramidMapMatrix::SetIntensitySafe(float, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetIntensityVarSafe(float, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetAltitudeSafe(float, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetAltitudeVarSafe(float, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetGroundAltitudeSafe(float, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetCountSafe(unsigned int, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetGroundCountSafe(unsigned int, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::SetValueSafe(unsigned char, float, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::MergeCellSafe(const float *, const float *, const float *, const float *, const float *, const unsigned int *, const unsigned int *, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::CheckLegalityForGetData(unsigned int, unsigned int, unsigned int) const
			function PyramidMapMatrix::CheckLegalityForSetData(unsigned int, unsigned int, unsigned int) const
			function PyramidMapMatrix::CheckLegalityForSetDataRoi(unsigned int, unsigned int, unsigned int, const Rect2D<unsigned int>&, const Rect2D<unsigned int>&) const
			function PyramidMapMatrix::AddSampleSafe(float, float, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::AddGroundSample(float, unsigned int, unsigned int, unsigned int)
			function PyramidMapMatrix::ComputeMeanIntensity(unsigned int)
			function PyramidMapMatrix::Reduce(std::shared_ptr<PyramidMapMatrix>, const PyramidMapMatrix &, unsigned int, unsigned int)
namespace localization
	namespace msf
		namespace pyramid_map
			function PyramidMapMatrixHandlerSelector::PyramidMapMatrixHandlerSelector()
			function PyramidMapMatrixHandlerSelector::~PyramidMapMatrixHandlerSelector()
			function PyramidMapMatrixHandlerSelector::AllocPyramidMapMatrixHandler(MapVersion)
			function LossyMapMatrixHandler::LossyMapMatrixHandler()
			function LossyMapMatrixHandler::~LossyMapMatrixHandler()
			function LossyMapMatrixHandler::EncodeIntensity(float) const
			function LossyMapMatrixHandler::DecodeIntensity(unsigned char, float *) const
			function LossyMapMatrixHandler::EncodeIntensityVar(float) const
			function LossyMapMatrixHandler::DecodeIntensityVar(uint16_t, float *) const
			function LossyMapMatrixHandler::EncodeAltitude(float, float, float) const
			function LossyMapMatrixHandler::DecodeAltitude(uint16_t, float, float, float *) const
			function LossyMapMatrixHandler::EncodeCount(unsigned int, unsigned int) const
			function LossyMapMatrixHandler::DecodeCount(unsigned char, unsigned int *) const
			function LossyMapFullAltMatrixHandler::LossyMapFullAltMatrixHandler()
			function LossyMapFullAltMatrixHandler::~LossyMapFullAltMatrixHandler()
			function LossyMapFullAltMatrixHandler::LoadBinary(const unsigned char *, std::shared_ptr<BaseMapMatrix>)
			function LossyMapFullAltMatrixHandler::CreateBinary(const std::shared_ptr<BaseMapMatrix>, unsigned char *, size_t)
			function LossyMapFullAltMatrixHandler::GetBinarySize(const std::shared_ptr<BaseMapMatrix>)
			function LosslessMapMatrixHandler::LosslessMapMatrixHandler()
			function LosslessMapMatrixHandler::~LosslessMapMatrixHandler()
			function LosslessMapMatrixHandler::LoadBinary(const unsigned char *, std::shared_ptr<BaseMapMatrix>)
			function LosslessMapMatrixHandler::CreateBinary(const std::shared_ptr<BaseMapMatrix>, unsigned char *, size_t)
			function LosslessMapMatrixHandler::GetBinarySize(const std::shared_ptr<BaseMapMatrix>)
			function PyramidLossyMapMatrixHandler::PyramidLossyMapMatrixHandler()
			function PyramidLossyMapMatrixHandler::~PyramidLossyMapMatrixHandler()
			function PyramidLossyMapMatrixHandler::LoadBinary(const unsigned char *, std::shared_ptr<BaseMapMatrix>)
			function PyramidLossyMapMatrixHandler::CreateBinary(const std::shared_ptr<BaseMapMatrix>, unsigned char *, size_t)
			function PyramidLossyMapMatrixHandler::GetBinarySize(const std::shared_ptr<BaseMapMatrix>)
			function PyramidLosslessMapMatrixHandler::PyramidLosslessMapMatrixHandler()
			function PyramidLosslessMapMatrixHandler::~PyramidLosslessMapMatrixHandler()
			function PyramidLosslessMapMatrixHandler::LoadBinary(const unsigned char *, std::shared_ptr<BaseMapMatrix>)
			function PyramidLosslessMapMatrixHandler::CreateBinary(const std::shared_ptr<BaseMapMatrix>, unsigned char *, size_t)
			function PyramidLosslessMapMatrixHandler::GetBinarySize(const std::shared_ptr<BaseMapMatrix>)
namespace localization
	namespace msf
		namespace pyramid_map
			function PyramidMapNode::PyramidMapNode()
			function PyramidMapNode::~PyramidMapNode()
			function PyramidMapNode::Init(const BaseMapConfig *)
			function PyramidMapNode::Init(const BaseMapConfig *, const MapNodeIndex &, bool)
			function PyramidMapNode::BottomUpBase()
			function PyramidMapNode::BottomUpSafe()
			function PyramidMapNode::AddValueIfInBound(const Eigen::Vector3d &, unsigned char, unsigned int)
			function PyramidMapNode::AddValueIfInBound(const std::vector<Eigen::Vector3d>&, const std::vector<unsigned char>&, unsigned int)
			function PyramidMapNode::GetCoordinate(const Eigen::Vector2d &, unsigned int, unsigned int *, unsigned int *) const
			function PyramidMapNode::GetCoordinate(unsigned int, unsigned int, unsigned int) const
			function PyramidMapNode::GetCoordinate(const Eigen::Vector2d &, unsigned int *, unsigned int *) const
			function PyramidMapNode::GetCoordinate(const Eigen::Vector3d &, unsigned int *, unsigned int *) const
			function PyramidMapNode::GetCoordinate(unsigned int, unsigned int) const
			function PyramidMapNode::GetIntensitySafe(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetIntensityVarSafe(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetAltitudeSafe(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetAltitudeVarSafe(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetGroundAltitudeSafe(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetCountSafe(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetGroundCountSafe(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetIntensity(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetIntensityVar(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetAltitude(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetAltitudeVar(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetGroundAltitude(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetCount(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::GetGroundCount(const Eigen::Vector3d &, unsigned int) const
			function PyramidMapNode::ComputeMeanIntensity(unsigned int)
namespace localization
	namespace msf
		namespace pyramid_map
			function PyramidMapNodeConfig::PyramidMapNodeConfig()
			function PyramidMapNodeConfig::~PyramidMapNodeConfig()
			function PyramidMapNodeConfig::Clone()
namespace localization
	namespace msf
		namespace pyramid_map
			function PyramidMapNodePool::PyramidMapNodePool(unsigned int, unsigned int)
			function PyramidMapNodePool::~PyramidMapNodePool()
			function PyramidMapNodePool::AllocNewMapNode()
function LoadGnssAntennaExtrinsic(const std::string &, Eigen::Vector3d *)
function PoseAndStdInterpolationByTime(const EigenAffine3dVec &, const EigenVector3dVec &, const std::vector<double>&, const std::vector<double>&, std::map<unsigned int,Eigen::Affine3d>*, std::map<unsigned int,Eigen::Vector3d>*)
function main(int, char **)
function main(int, char **)
namespace localization
	namespace msf
		function CyberRecordReader::CyberRecordReader()
		function CyberRecordReader::~CyberRecordReader()
		function CyberRecordReader::Subscribe(const std::string &, const std::function<void(const std::string&)>)
		function CyberRecordReader::Read(const std::string &)
		function CyberRecordReader::Read(const std::vector<std::string>&)
namespace localization
	namespace msf
		function LocationExporter::LocationExporter(const std::string &)
		function LocationExporter::~LocationExporter()
		function LocationExporter::GnssLocCallback(const std::string &)
		function LocationExporter::LidarLocCallback(const std::string &)
		function LocationExporter::FusionLocCallback(const std::string &)
		function LocationExporter::OdometryLocCallback(const std::string &)
namespace localization
	namespace msf
		function PCDExporter::PCDExporter(const std::string &)
		function PCDExporter::~PCDExporter()
		function PCDExporter::CompensatedPcdCallback(const std::string &)
		function PCDExporter::WritePcdFile(const std::string &, const drivers::PointCloud &)
namespace localization
	namespace msf
		variable color_table
		variable car_img_path
		function MapImageKey::operator<(const MapImageKey &) const
		function MapImageCache::Get(const MapImageKey &, cv::Mat *)
		function MapImageCache::Set(const MapImageKey &, const cv::Mat &)
		function VisualizationEngine::VisualizationEngine()
		function VisualizationEngine::Init(const std::string &, const std::string &, const VisualMapParam &, const unsigned int, const int, const Eigen::Affine3d &, const unsigned int)
		function VisualizationEngine::Visualize(::apollo::common::EigenVector<LocalizatonInfo>&&, const::apollo::common::EigenVector3dVec &)
		function VisualizationEngine::SetAutoPlay(bool)
		function VisualizationEngine::Preprocess(const std::string &, const std::string &)
		function VisualizationEngine::Draw()
		function VisualizationEngine::DrawTrajectory(const cv::Point &)
		function VisualizationEngine::DrawLoc(const cv::Point &)
		function VisualizationEngine::DrawStd(const cv::Point &)
		function VisualizationEngine::DrawCloud(const cv::Point &)
		function VisualizationEngine::DrawLegend()
		function VisualizationEngine::DrawInfo()
		function VisualizationEngine::DrawTips()
		function VisualizationEngine::UpdateLevel()
		function VisualizationEngine::GenerateMutiResolutionImages(const std::vector<std::string>&, const int, const std::string &)
		function VisualizationEngine::InitOtherParams(const std::string &)
		function VisualizationEngine::InitOtherParams(const int, const int, const int, const int, const int, const std::string &)
		function VisualizationEngine::CloudToMat(const Eigen::Affine3d &, const Eigen::Affine3d &, const::apollo::common::EigenVector3dVec &, cv::Mat *, cv::Mat *)
		function VisualizationEngine::CoordToImageKey(const Eigen::Vector2d &, MapImageKey *)
		function VisualizationEngine::CoordToMapGridIndex(const Eigen::Vector2d &, const unsigned int, const int)
		function VisualizationEngine::MapGridIndexToNodeGridIndex(const cv::Point &)
		function VisualizationEngine::LoadImageToCache(const MapImageKey &)
		function VisualizationEngine::RotateImg(const cv::Mat &, cv::Mat *, double)
		function VisualizationEngine::SetViewCenter(const double, const double)
		function VisualizationEngine::UpdateViewCenter(const double, const double)
		function VisualizationEngine::SetScale(const double)
		function VisualizationEngine::UpdateScale(const double)
		function VisualizationEngine::UpdateCarLocId()
		function VisualizationEngine::UpdateCarLocId(const unsigned int)
		function VisualizationEngine::UpdateTrajectoryGroups()
		function VisualizationEngine::ProcessKey(int)
constant PI
namespace localization
	namespace msf
		function MessageBuffer<MessageType>::MessageBuffer(int)
		function MessageBuffer<MessageType>::~MessageBuffer()
		function MessageBuffer<MessageType>::PushNewMessage(const double, const MessageType &)
		function MessageBuffer<MessageType>::PopOldestMessage(MessageType *)
		function MessageBuffer<MessageType>::GetMessageBefore(const double, MessageType *)
		function MessageBuffer<MessageType>::GetMessage(const double, MessageType *)
		function MessageBuffer<MessageType>::Clear()
		function MessageBuffer<MessageType>::SetCapacity(const unsigned int)
		function MessageBuffer<MessageType>::GetAllMessages(std::list<std::pair<double,MessageType>>*)
		function MessageBuffer<MessageType>::IsEmpty()
		function MessageBuffer<MessageType>::BufferSize()
		function IntepolationMessageBuffer<MessageType>::IntepolationMessageBuffer(int)
		function IntepolationMessageBuffer<MessageType>::~IntepolationMessageBuffer()
		function IntepolationMessageBuffer<MessageType>::QueryMessage(const double, MessageType *, double)
		function IntepolationMessageBuffer<MessageType>::WaitMessageBufferOk(const double, std::map<double,ListIterator>*, std::list<std::pair<double,MessageType>>*, double)
		function VisualizationManager::VisualizationManager()
		function VisualizationManager::~VisualizationManager()
		function VisualizationManager::Init(const std::string &, const std::string &, const Eigen::Affine3d &, const VisualMapParam &)
		function VisualizationManager::Init(const VisualizationManagerParams &)
		function VisualizationManager::AddLidarFrame(const LidarVisFrame &)
		function VisualizationManager::AddGNSSLocMessage(const LocalizationMsg &)
		function VisualizationManager::AddLidarLocMessage(const LocalizationMsg &)
		function VisualizationManager::AddFusionLocMessage(const LocalizationMsg &)
		function VisualizationManager::StartVisualization()
		function VisualizationManager::StopVisualization()
		function VisualizationManager::DoVisualize()
		function VisualizationManager::GetZoneIdFromMapFolder(const std::string &, const unsigned int, int *)
namespace localization
	namespace msf
		function OfflineLocalVisualizer::OfflineLocalVisualizer()
		function OfflineLocalVisualizer::~OfflineLocalVisualizer()
		function OfflineLocalVisualizer::Init(const std::string &, const std::string &, const std::string &, const std::string &, const std::string &, const std::string &, const std::string &, const std::string &)
		function OfflineLocalVisualizer::Visualize()
		function OfflineLocalVisualizer::PCDTimestampFileHandler()
		function OfflineLocalVisualizer::LidarLocFileHandler(const std::vector<double>&)
		function OfflineLocalVisualizer::GnssLocFileHandler(const std::vector<double>&)
		function OfflineLocalVisualizer::FusionLocFileHandler(const std::vector<double>&)
		function OfflineLocalVisualizer::PoseAndStdInterpolationByTime(const::apollo::common::EigenAffine3dVec &, const::apollo::common::EigenVector3dVec &, const std::vector<double>&, const std::vector<double>&, std::map<unsigned int,Eigen::Affine3d>*, std::map<unsigned int,Eigen::Vector3d>*)
		function OfflineLocalVisualizer::GetZoneIdFromMapFolder(const std::string &, const unsigned int, int *)
namespace localization
	namespace msf
		function OnlineVisualizerComponent::OnlineVisualizerComponent()
		function OnlineVisualizerComponent::~OnlineVisualizerComponent()
		function OnlineVisualizerComponent::Init()
		function OnlineVisualizerComponent::InitConfig()
		function OnlineVisualizerComponent::InitIO()
		function OnlineVisualizerComponent::Proc(const std::shared_ptr<drivers::PointCloud>&)
		function OnlineVisualizerComponent::OnLidarLocalization(const std::shared_ptr<LocalizationEstimate>&)
		function OnlineVisualizerComponent::OnGNSSLocalization(const std::shared_ptr<LocalizationEstimate>&)
		function OnlineVisualizerComponent::OnFusionLocalization(const std::shared_ptr<LocalizationEstimate>&)
		function OnlineVisualizerComponent::ParsePointCloudMessage(const std::shared_ptr<drivers::PointCloud>&, ::apollo::common::EigenVector3dVec *, std::vector<unsigned char>*)
interface PclPointT
interface PclPointCloudT
interface PclPointCloudPtrT
function ParseCommandLine(int, char * [], boost::program_options::variables_map *)
function VarianceOnline(double *, double *, unsigned int *, double)
function main(int, char **)
namespace apollo
	namespace localization
		namespace msf
			function GetMapIndexFromMapFolder(const std::string &)
			function GetAllMapIndex(const std::string &, const std::string &, std::list<MapNodeIndex>*)
function main(int, char **)
namespace localization
	namespace msf
		function PosesInterpolation::PosesInterpolation()
		function PosesInterpolation::Init(const std::string &, const std::string &, const std::string &, const std::string &)
		function PosesInterpolation::DoInterpolation()
		function PosesInterpolation::LoadPCDTimestamp()
		function PosesInterpolation::WritePCDPoses()
		function PosesInterpolation::PoseInterpolationByTime(const::apollo::common::EigenAffine3dVec &, const std::vector<double>&, const std::vector<double>&, const std::vector<unsigned int>&, std::vector<unsigned int>*, std::vector<double>*, ::apollo::common::EigenAffine3dVec *)
namespace localization
	function MSFLocalization::MSFLocalization()
	function MSFLocalization::Init()
	function MSFLocalization::InitParams()
	function MSFLocalization::OnPointCloud(const std::shared_ptr<drivers::PointCloud>&)
	function MSFLocalization::OnRawImu(const std::shared_ptr<drivers::gnss::Imu>&)
	function MSFLocalization::OnRawImuCache(const std::shared_ptr<drivers::gnss::Imu>&)
	function MSFLocalization::OnGnssBestPose(const std::shared_ptr<drivers::gnss::GnssBestPose>&)
	function MSFLocalization::OnGnssRtkObs(const std::shared_ptr<drivers::gnss::EpochObservation>&)
	function MSFLocalization::OnGnssRtkEph(const std::shared_ptr<drivers::gnss::GnssEphemeris>&)
	function MSFLocalization::OnGnssHeading(const std::shared_ptr<drivers::gnss::Heading>&)
	function MSFLocalization::OnLocalizationTimer()
	function MSFLocalization::SetPublisher(const std::shared_ptr<LocalizationMsgPublisher>&)
	function MSFLocalization::CompensateImuVehicleExtrinsic(LocalizationEstimate *)
	function MSFLocalization::LoadGnssAntennaExtrinsic(const std::string &, double *, double *, double *, double *, double *, double *)
	function MSFLocalization::LoadImuVehicleExtrinsic(const std::string &, double *, double *, double *, double *)
	function MSFLocalization::LoadZoneIdFromFolder(const std::string &, int *)
namespace localization
	function MSFLocalizationComponent::MSFLocalizationComponent()
	function MSFLocalizationComponent::Init()
	function MSFLocalizationComponent::InitConfig()
	function MSFLocalizationComponent::InitIO()
	function MSFLocalizationComponent::Proc(const std::shared_ptr<drivers::gnss::Imu>&)
	function LocalizationMsgPublisher::LocalizationMsgPublisher(const std::shared_ptr<cyber::Node>&)
	function LocalizationMsgPublisher::InitConfig()
	function LocalizationMsgPublisher::InitIO()
	function LocalizationMsgPublisher::PublishPoseBroadcastTF(const LocalizationEstimate &)
	function LocalizationMsgPublisher::PublishPoseBroadcastTopic(const LocalizationEstimate &)
	function LocalizationMsgPublisher::PublishLocalizationMsfGnss(const LocalizationEstimate &)
	function LocalizationMsgPublisher::PublishLocalizationMsfLidar(const LocalizationEstimate &)
	function LocalizationMsgPublisher::PublishLocalizationStatus(const LocalizationStatus &)
namespace localization
	namespace ndt
		variable LocalizationPoseBuffer::s_buffer_size_
		function LocalizationPoseBuffer::LocalizationPoseBuffer()
		function LocalizationPoseBuffer::~LocalizationPoseBuffer()
		function LocalizationPoseBuffer::UpdateLidarPose(double, const Eigen::Affine3d &, const Eigen::Affine3d &)
		function LocalizationPoseBuffer::UpdateOdometryPose(double, const Eigen::Affine3d &)
function main(int, char **)
namespace localization
	namespace ndt
		function NDTLocalization::Init()
		function NDTLocalization::OdometryCallback(const std::shared_ptr<localization::Gps>&)
		function NDTLocalization::LidarCallback(const std::shared_ptr<drivers::PointCloud>&)
		function NDTLocalization::OdometryStatusCallback(const std::shared_ptr<drivers::gnss::InsStat>&)
		function NDTLocalization::GetLocalization(LocalizationEstimate *) const
		function NDTLocalization::GetLidarLocalization(LocalizationEstimate *) const
		function NDTLocalization::GetLocalizationStatus(LocalizationStatus *) const
		function NDTLocalization::IsServiceStarted()
		function NDTLocalization::FillLocalizationMsgHeader(LocalizationEstimate *)
		function NDTLocalization::ComposeLocalizationEstimate(const Eigen::Affine3d &, const std::shared_ptr<localization::Gps>&, LocalizationEstimate *)
		function NDTLocalization::ComposeLidarResult(double, const Eigen::Affine3d &, LocalizationEstimate *)
		function NDTLocalization::QueryPoseFromTF(double, Eigen::Affine3d *)
		function NDTLocalization::ComposeLocalizationStatus(const drivers::gnss::InsStat &, LocalizationStatus *)
		function NDTLocalization::QueryPoseFromBuffer(double, Eigen::Affine3d *)
		function NDTLocalization::ZeroOdometry(const Eigen::Affine3d &)
		function NDTLocalization::LidarMsgTransfer(const std::shared_ptr<drivers::PointCloud>&, LidarFrame *)
		function NDTLocalization::LoadLidarExtrinsic(const std::string &, Eigen::Affine3d *)
		function NDTLocalization::LoadLidarHeight(const std::string &, LidarHeight *)
		function NDTLocalization::LoadZoneIdFromFolder(const std::string &, int *)
		function NDTLocalization::FindNearestOdometryStatus(const double, drivers::gnss::InsStat *)
namespace localization
	namespace ndt
		function NDTLocalizationComponent::NDTLocalizationComponent()
		function NDTLocalizationComponent::Init()
		function NDTLocalizationComponent::InitConfig()
		function NDTLocalizationComponent::InitIO()
		function NDTLocalizationComponent::Proc(const std::shared_ptr<localization::Gps>&)
		function NDTLocalizationComponent::LidarCallback(const std::shared_ptr<drivers::PointCloud>&)
		function NDTLocalizationComponent::OdometryStatusCallback(const std::shared_ptr<drivers::gnss::InsStat>&)
		function NDTLocalizationComponent::PublishPoseBroadcastTF(const LocalizationEstimate &)
		function NDTLocalizationComponent::PublishPoseBroadcastTopic(const LocalizationEstimate &)
		function NDTLocalizationComponent::PublishLidarPoseBroadcastTopic(const LocalizationEstimate &)
		function NDTLocalizationComponent::PublishLocalizationStatusTopic(const LocalizationStatus &)
namespace localization
	namespace ndt
		function LidarLocatorNdt::LidarLocatorNdt()
		function LidarLocatorNdt::~LidarLocatorNdt()
		function LidarLocatorNdt::Init(const Eigen::Affine3d &, unsigned int, int)
		function LidarLocatorNdt::LoadMap(const Eigen::Affine3d &, unsigned int, int)
		function LidarLocatorNdt::SetMapFolderPath(const std::string)
		function LidarLocatorNdt::SetVelodyneExtrinsic(const Eigen::Affine3d &)
		function LidarLocatorNdt::SetLidarHeight(double)
		function LidarLocatorNdt::SetOnlineCloudResolution(const float &)
		function LidarLocatorNdt::Update(unsigned int, const Eigen::Affine3d &, const LidarFrame &)
		function LidarLocatorNdt::GetPose() const
		function LidarLocatorNdt::GetPredictLocation() const
		function LidarLocatorNdt::GetLocationCovariance() const
		function LidarLocatorNdt::ComposeMapCells(const Eigen::Vector2d &, int, unsigned int, float, const Eigen::Affine3d &)
namespace localization
	function RTKLocalization::RTKLocalization()
	function RTKLocalization::InitConfig(const rtk_config::Config &)
	function RTKLocalization::GpsCallback(const std::shared_ptr<localization::Gps>&)
	function RTKLocalization::GpsStatusCallback(const std::shared_ptr<drivers::gnss::InsStat>&)
	function RTKLocalization::ImuCallback(const std::shared_ptr<localization::CorrectedImu>&)
	function RTKLocalization::IsServiceStarted()
	function RTKLocalization::GetLocalization(LocalizationEstimate *)
	function RTKLocalization::GetLocalizationStatus(LocalizationStatus *)
	function RTKLocalization::RunWatchDog(double)
	function RTKLocalization::PrepareLocalizationMsg(const localization::Gps &, LocalizationEstimate *, LocalizationStatus *)
	function RTKLocalization::FillLocalizationMsgHeader(LocalizationEstimate *)
	function RTKLocalization::FillLocalizationStatusMsg(const drivers::gnss::InsStat &, LocalizationStatus *)
	function RTKLocalization::ComposeLocalizationMsg(const localization::Gps &, const localization::CorrectedImu &, LocalizationEstimate *)
	function RTKLocalization::FindMatchingIMU(const double, CorrectedImu *)
	function RTKLocalization::InterpolateIMU(const CorrectedImu &, const CorrectedImu &, const double, CorrectedImu *)
	function RTKLocalization::InterpolateXYZ<T>(const T &, const T &, const double)
	function RTKLocalization::FindNearestGpsStatus(const double, drivers::gnss::InsStat *)
namespace localization
	function RTKLocalizationComponent::RTKLocalizationComponent()
	function RTKLocalizationComponent::Init()
	function RTKLocalizationComponent::InitConfig()
	function RTKLocalizationComponent::InitIO()
	function RTKLocalizationComponent::Proc(const std::shared_ptr<localization::Gps>&)
	function RTKLocalizationComponent::PublishPoseBroadcastTF(const LocalizationEstimate &)
	function RTKLocalizationComponent::PublishPoseBroadcastTopic(const LocalizationEstimate &)
	function RTKLocalizationComponent::PublishLocalizationStatus(const LocalizationStatus &)
namespace hdmap
	namespace adapter
		function CoordinateConvertTool::CoordinateConvertTool()
		function CoordinateConvertTool::~CoordinateConvertTool()
		function CoordinateConvertTool::GetInstance()
		function CoordinateConvertTool::SetConvertParam(const std::string &, const std::string &)
		function CoordinateConvertTool::CoordiateConvert(const double, const double, const double, double *, double *, double *)
namespace hdmap
	namespace adapter
		function OpendriveAdapter::LoadData(const std::string &, apollo::hdmap::Map *)
function CreateOverlapId()
namespace apollo
	namespace hdmap
		namespace adapter
			function ProtoOrganizer::GetRoadElements(std::vector<RoadInternal>*)
			function ProtoOrganizer::GetJunctionElements(const std::vector<JunctionInternal>&)
			function ProtoOrganizer::GetLaneObjectOverlapElements(const std::string &, const std::vector<OverlapWithLane>&)
			function ProtoOrganizer::GetObjectElements(const ObjectInternal &)
			function ProtoOrganizer::GetLaneSignalOverlapElements(const std::string &, const std::vector<OverlapWithLane>&)
			function ProtoOrganizer::GetLaneJunctionOverlapElements(const std::string &, const std::vector<OverlapWithLane>&)
			function ProtoOrganizer::GetLaneLaneOverlapElements(const std::unordered_map<std::pair<std::string,std::string>,OverlapWithLane,PairHash>&)
			function ProtoOrganizer::GetJunctionObjectOverlapElements(const std::vector<JunctionInternal>&)
			function ProtoOrganizer::GetOverlapElements(const std::vector<RoadInternal>&, const std::vector<JunctionInternal>&)
			function ProtoOrganizer::OutputData(apollo::hdmap::Map *)
function GetLongZone(double)
namespace apollo
	namespace hdmap
		namespace adapter
			function HeaderXmlParser::Parse(const tinyxml2::XMLElement &, PbHeader *)
namespace hdmap
	namespace adapter
		function JunctionsXmlParser::Parse(const tinyxml2::XMLElement &, std::vector<JunctionInternal>*)
function ToMPS(double)
function IsReferenceLane(int)
namespace apollo
	namespace hdmap
		namespace adapter
			function LanesXmlParser::Parse(const tinyxml2::XMLElement &, const std::string &, std::vector<RoadSectionInternal>*)
			function LanesXmlParser::ParseSectionBoundary(const tinyxml2::XMLElement &, PbBoundaryPolygon *)
			function LanesXmlParser::ToPbBoundaryType(const std::string &, PbBoundaryEdgeType *)
			function LanesXmlParser::ParseLaneSection(const tinyxml2::XMLElement &, std::vector<LaneInternal>*)
			function LanesXmlParser::ParseLane(const tinyxml2::XMLElement &, LaneInternal *)
			function LanesXmlParser::ParseDirection(const tinyxml2::XMLElement &, PbLane *)
			function LanesXmlParser::ParseCenterCurve(const tinyxml2::XMLElement &, PbLane *)
			function LanesXmlParser::ParseSpeed(const tinyxml2::XMLElement &, PbLane *)
			function LanesXmlParser::ParseSampleAssociates(const tinyxml2::XMLElement &, PbLane *)
			function LanesXmlParser::ParseSingleSideRoadSampleAssociates(const tinyxml2::XMLElement &, bool, PbLane *)
			function LanesXmlParser::ParseLeftRoadSampleAssociates(const tinyxml2::XMLElement &, PbLane *)
			function LanesXmlParser::ParseRightRoadSampleAssociates(const tinyxml2::XMLElement &, PbLane *)
			function LanesXmlParser::ParseRoadSampleAssociates(const tinyxml2::XMLElement &, PbLane *)
			function LanesXmlParser::ParseObjectOverlapGroup(const tinyxml2::XMLElement &, std::vector<OverlapWithLane>*)
			function LanesXmlParser::ParseSignalOverlapGroup(const tinyxml2::XMLElement &, std::vector<OverlapWithLane>*)
			function LanesXmlParser::ParseJunctionOverlapGroup(const tinyxml2::XMLElement &, std::vector<OverlapWithLane>*)
			function LanesXmlParser::ParseLaneOverlapGroup(const tinyxml2::XMLElement &, std::vector<OverlapWithLane>*)
			function LanesXmlParser::ToPbLaneType(const std::string &, PbLaneType *)
			function LanesXmlParser::ToPbTurnType(const std::string &, PbTurnType *)
			function LanesXmlParser::ToPbDirection(const std::string &, PbLaneDirection *)
			function LanesXmlParser::ParseLaneLink(const tinyxml2::XMLElement &, PbLane *)
			function LanesXmlParser::ParseLaneBorderMark(const tinyxml2::XMLElement &, PbLaneBoundaryTypeType *)
			function LanesXmlParser::ToPbLaneMarkType(const std::string &, const std::string &, PbLaneBoundaryTypeType *)
			function LanesXmlParser::ParseRegionOverlap(const tinyxml2::XMLElement &, std::vector<PbRegionOverlap>*)
namespace hdmap
	namespace adapter
		function ObjectsXmlParser::ParseCrosswalks(const tinyxml2::XMLElement &, std::vector<PbCrosswalk>*)
		function ObjectsXmlParser::ParseClearAreas(const tinyxml2::XMLElement &, std::vector<PbClearArea>*)
		function ObjectsXmlParser::ParseSpeedBumps(const tinyxml2::XMLElement &, std::vector<PbSpeedBump>*)
		function ObjectsXmlParser::ParseStopLines(const tinyxml2::XMLElement &, std::vector<StopLineInternal>*)
		function ObjectsXmlParser::ParseParkingSpaces(const tinyxml2::XMLElement &, std::vector<PbParkingSpace>*)
		function ObjectsXmlParser::ParsePNCJunctions(const tinyxml2::XMLElement &, std::vector<PbPNCJunction>*)
		function ObjectsXmlParser::ParsePassageGroup(const tinyxml2::XMLElement &, PbPNCJunction *)
		function ObjectsXmlParser::ParsePassage(const tinyxml2::XMLElement &, PbPassageGroup *)
		function ObjectsXmlParser::ParsePassageIds(const tinyxml2::XMLElement &, const std::string &, std::vector<std::string>*)
		function ObjectsXmlParser::ToPassageType(const std::string &, PbPassageType *)
		function ObjectsXmlParser::ParseRSUs(const tinyxml2::XMLElement &, std::vector<RSUInternal>*)
		function ObjectsXmlParser::ParseObjects(const tinyxml2::XMLElement &, ObjectInternal *)
function IsRoadBelongToJunction(const std::string &)
namespace apollo
	namespace hdmap
		namespace adapter
			function RoadsXmlParser::Parse(const tinyxml2::XMLElement &, std::vector<RoadInternal>*)
			function RoadsXmlParser::Parse_road_objects(const tinyxml2::XMLElement &, RoadInternal *)
			function RoadsXmlParser::Parse_road_signals(const tinyxml2::XMLElement &, RoadInternal *)
			function RoadsXmlParser::to_pb_road_type(const std::string &, PbRoadType *)
namespace hdmap
	namespace adapter
		function SignalsXmlParser::ParseTrafficLights(const tinyxml2::XMLElement &, std::vector<TrafficLightInternal>*)
		function SignalsXmlParser::ToPbSignalType(const std::string &, PbSignalType *)
		function SignalsXmlParser::ToPbSubSignalType(const std::string &, PbSubSignalType *)
		function SignalsXmlParser::to_pb_sign_info_type(const std::string &, PbSignInfoType *)
		function SignalsXmlParser::ToPbStopSignType(const std::string &, PbStopSignType *)
		function SignalsXmlParser::ParseStopSigns(const tinyxml2::XMLElement &, std::vector<StopSignInternal>*)
		function SignalsXmlParser::ParseYieldSigns(const tinyxml2::XMLElement &, std::vector<YieldSignInternal>*)
namespace hdmap
	namespace adapter
		function UtilXmlParser::ParseCurve(const tinyxml2::XMLElement &, PbCurve *)
		function UtilXmlParser::ParseGeometry(const tinyxml2::XMLElement &, PbCurveSegment *)
		function UtilXmlParser::ParsePointSet(const tinyxml2::XMLElement &, PbLineSegment *)
		function UtilXmlParser::ParseOutline(const tinyxml2::XMLElement &, PbPolygon *)
		function UtilXmlParser::ParsePoint(const tinyxml2::XMLElement &, PbPoint3D *)
		function UtilXmlParser::ToUpper(const std::string &)
		function UtilXmlParser::WGS84ToUTM(const double, const double, const double, double *, double *, double *)
		function UtilXmlParser::CurveLength(const PbCurve &)
		function UtilXmlParser::QueryStringAttribute(const tinyxml2::XMLElement &, const std::string &, std::string *)
namespace hdmap
	function HDMap::LoadMapFromFile(const std::string &)
	function HDMap::LoadMapFromProto(const Map &)
	function HDMap::GetLaneById(const Id &) const
	function HDMap::GetJunctionById(const Id &) const
	function HDMap::GetSignalById(const Id &) const
	function HDMap::GetCrosswalkById(const Id &) const
	function HDMap::GetStopSignById(const Id &) const
	function HDMap::GetYieldSignById(const Id &) const
	function HDMap::GetClearAreaById(const Id &) const
	function HDMap::GetSpeedBumpById(const Id &) const
	function HDMap::GetOverlapById(const Id &) const
	function HDMap::GetRoadById(const Id &) const
	function HDMap::GetParkingSpaceById(const Id &) const
	function HDMap::GetPNCJunctionById(const Id &) const
	function HDMap::GetLanes(const apollo::common::PointENU &, double, std::vector<LaneInfoConstPtr>*) const
	function HDMap::GetJunctions(const apollo::common::PointENU &, double, std::vector<JunctionInfoConstPtr>*) const
	function HDMap::GetSignals(const apollo::common::PointENU &, double, std::vector<SignalInfoConstPtr>*) const
	function HDMap::GetCrosswalks(const apollo::common::PointENU &, double, std::vector<CrosswalkInfoConstPtr>*) const
	function HDMap::GetStopSigns(const apollo::common::PointENU &, double, std::vector<StopSignInfoConstPtr>*) const
	function HDMap::GetYieldSigns(const apollo::common::PointENU &, double, std::vector<YieldSignInfoConstPtr>*) const
	function HDMap::GetClearAreas(const apollo::common::PointENU &, double, std::vector<ClearAreaInfoConstPtr>*) const
	function HDMap::GetSpeedBumps(const apollo::common::PointENU &, double, std::vector<SpeedBumpInfoConstPtr>*) const
	function HDMap::GetRoads(const apollo::common::PointENU &, double, std::vector<RoadInfoConstPtr>*) const
	function HDMap::GetParkingSpaces(const apollo::common::PointENU &, double, std::vector<ParkingSpaceInfoConstPtr>*) const
	function HDMap::GetPNCJunctions(const apollo::common::PointENU &, double, std::vector<PNCJunctionInfoConstPtr>*) const
	function HDMap::GetNearestLane(const common::PointENU &, LaneInfoConstPtr *, double *, double *) const
	function HDMap::GetNearestLaneWithHeading(const apollo::common::PointENU &, const double, const double, const double, LaneInfoConstPtr *, double *, double *) const
	function HDMap::GetLanesWithHeading(const apollo::common::PointENU &, const double, const double, const double, std::vector<LaneInfoConstPtr>*) const
	function HDMap::GetRoadBoundaries(const apollo::common::PointENU &, double, std::vector<RoadROIBoundaryPtr>*, std::vector<JunctionBoundaryPtr>*) const
	function HDMap::GetRoadBoundaries(const apollo::common::PointENU &, double, std::vector<RoadRoiPtr>*, std::vector<JunctionInfoConstPtr>*) const
	function HDMap::GetRoi(const apollo::common::PointENU &, double, std::vector<RoadRoiPtr>*, std::vector<PolygonRoiPtr>*)
	function HDMap::GetForwardNearestSignalsOnLane(const apollo::common::PointENU &, const double, std::vector<SignalInfoConstPtr>*) const
	function HDMap::GetStopSignAssociatedStopSigns(const Id &, std::vector<StopSignInfoConstPtr>*) const
	function HDMap::GetStopSignAssociatedLanes(const Id &, std::vector<LaneInfoConstPtr>*) const
	function HDMap::GetLocalMap(const apollo::common::PointENU &, const std::pair<double,double>&, Map *) const
	function HDMap::GetForwardNearestRSUs(const apollo::common::PointENU &, double, double, double, std::vector<RSUInfoConstPtr>*) const
namespace hdmap
	namespace `anonymous-namespace'
		variable kDuplicatedPointsEpsilon
		variable kEpsilon
		function RemoveDuplicates(std::vector<Vec2d>*)
		function PointsFromCurve(const Curve &, std::vector<Vec2d>*)
		function ConvertToPolygon2d(const Polygon &)
		function SegmentsFromCurve(const Curve &, std::vector<apollo::common::math::LineSegment2d>*)
		function PointFromVec2d(const Vec2d &)
	function LaneInfo::LaneInfo(const Lane &)
	function LaneInfo::Init()
	function LaneInfo::GetWidth(const double, double *, double *) const
	function LaneInfo::Heading(const double) const
	function LaneInfo::Curvature(const double) const
	function LaneInfo::GetWidth(const double) const
	function LaneInfo::GetEffectiveWidth(const double) const
	function LaneInfo::GetRoadWidth(const double, double *, double *) const
	function LaneInfo::GetRoadWidth(const double) const
	function LaneInfo::GetWidthFromSample(const std::vector<LaneInfo::SampledWidth>&, const double) const
	function LaneInfo::IsOnLane(const Vec2d &) const
	function LaneInfo::IsOnLane(const apollo::common::math::Box2d &) const
	function LaneInfo::GetSmoothPoint(double) const
	function LaneInfo::DistanceTo(const Vec2d &) const
	function LaneInfo::DistanceTo(const Vec2d &, Vec2d *, double *, int *) const
	function LaneInfo::GetNearestPoint(const Vec2d &, double *) const
	function LaneInfo::GetProjection(const Vec2d &, double *, double *) const
	function LaneInfo::PostProcess(const HDMapImpl &)
	function LaneInfo::UpdateOverlaps(const HDMapImpl &)
	function LaneInfo::CreateKDTree()
	function JunctionInfo::JunctionInfo(const Junction &)
	function JunctionInfo::Init()
	function JunctionInfo::PostProcess(const HDMapImpl &)
	function JunctionInfo::UpdateOverlaps(const HDMapImpl &)
	function SignalInfo::SignalInfo(const Signal &)
	function SignalInfo::Init()
	function CrosswalkInfo::CrosswalkInfo(const Crosswalk &)
	function CrosswalkInfo::Init()
	function StopSignInfo::StopSignInfo(const StopSign &)
	function StopSignInfo::init()
	function StopSignInfo::PostProcess(const HDMapImpl &)
	function StopSignInfo::UpdateOverlaps(const HDMapImpl &)
	function YieldSignInfo::YieldSignInfo(const YieldSign &)
	function YieldSignInfo::Init()
	function ClearAreaInfo::ClearAreaInfo(const ClearArea &)
	function ClearAreaInfo::Init()
	function SpeedBumpInfo::SpeedBumpInfo(const SpeedBump &)
	function SpeedBumpInfo::Init()
	function OverlapInfo::OverlapInfo(const Overlap &)
	function OverlapInfo::GetObjectOverlapInfo(const Id &) const
	function RoadInfo::RoadInfo(const Road &)
	function RoadInfo::GetBoundaries() const
	function ParkingSpaceInfo::ParkingSpaceInfo(const ParkingSpace &)
	function ParkingSpaceInfo::Init()
	function PNCJunctionInfo::PNCJunctionInfo(const PNCJunction &)
	function PNCJunctionInfo::Init()
	function RSUInfo::RSUInfo(const RSU &)
namespace hdmap
	namespace `anonymous-namespace'
		function CreateHDMapId(const std::string &)
		variable kLanesSearchRange
		variable kBackwardDistance
	function HDMapImpl::LoadMapFromFile(const std::string &)
	function HDMapImpl::LoadMapFromProto(const Map &)
	function HDMapImpl::GetLaneById(const Id &) const
	function HDMapImpl::GetJunctionById(const Id &) const
	function HDMapImpl::GetSignalById(const Id &) const
	function HDMapImpl::GetCrosswalkById(const Id &) const
	function HDMapImpl::GetStopSignById(const Id &) const
	function HDMapImpl::GetYieldSignById(const Id &) const
	function HDMapImpl::GetClearAreaById(const Id &) const
	function HDMapImpl::GetSpeedBumpById(const Id &) const
	function HDMapImpl::GetOverlapById(const Id &) const
	function HDMapImpl::GetRoadById(const Id &) const
	function HDMapImpl::GetParkingSpaceById(const Id &) const
	function HDMapImpl::GetPNCJunctionById(const Id &) const
	function HDMapImpl::GetRSUById(const Id &) const
	function HDMapImpl::GetLanes(const PointENU &, double, std::vector<LaneInfoConstPtr>*) const
	function HDMapImpl::GetLanes(const Vec2d &, double, std::vector<LaneInfoConstPtr>*) const
	function HDMapImpl::GetRoads(const PointENU &, double, std::vector<RoadInfoConstPtr>*) const
	function HDMapImpl::GetRoads(const Vec2d &, double, std::vector<RoadInfoConstPtr>*) const
	function HDMapImpl::GetJunctions(const PointENU &, double, std::vector<JunctionInfoConstPtr>*) const
	function HDMapImpl::GetJunctions(const Vec2d &, double, std::vector<JunctionInfoConstPtr>*) const
	function HDMapImpl::GetSignals(const PointENU &, double, std::vector<SignalInfoConstPtr>*) const
	function HDMapImpl::GetSignals(const Vec2d &, double, std::vector<SignalInfoConstPtr>*) const
	function HDMapImpl::GetCrosswalks(const PointENU &, double, std::vector<CrosswalkInfoConstPtr>*) const
	function HDMapImpl::GetCrosswalks(const Vec2d &, double, std::vector<CrosswalkInfoConstPtr>*) const
	function HDMapImpl::GetStopSigns(const PointENU &, double, std::vector<StopSignInfoConstPtr>*) const
	function HDMapImpl::GetStopSigns(const Vec2d &, double, std::vector<StopSignInfoConstPtr>*) const
	function HDMapImpl::GetYieldSigns(const PointENU &, double, std::vector<YieldSignInfoConstPtr>*) const
	function HDMapImpl::GetYieldSigns(const Vec2d &, double, std::vector<YieldSignInfoConstPtr>*) const
	function HDMapImpl::GetClearAreas(const PointENU &, double, std::vector<ClearAreaInfoConstPtr>*) const
	function HDMapImpl::GetClearAreas(const Vec2d &, double, std::vector<ClearAreaInfoConstPtr>*) const
	function HDMapImpl::GetSpeedBumps(const PointENU &, double, std::vector<SpeedBumpInfoConstPtr>*) const
	function HDMapImpl::GetSpeedBumps(const Vec2d &, double, std::vector<SpeedBumpInfoConstPtr>*) const
	function HDMapImpl::GetParkingSpaces(const PointENU &, double, std::vector<ParkingSpaceInfoConstPtr>*) const
	function HDMapImpl::GetParkingSpaces(const Vec2d &, double, std::vector<ParkingSpaceInfoConstPtr>*) const
	function HDMapImpl::GetPNCJunctions(const apollo::common::PointENU &, double, std::vector<PNCJunctionInfoConstPtr>*) const
	function HDMapImpl::GetPNCJunctions(const apollo::common::math::Vec2d &, double, std::vector<PNCJunctionInfoConstPtr>*) const
	function HDMapImpl::GetNearestLane(const PointENU &, LaneInfoConstPtr *, double *, double *) const
	function HDMapImpl::GetNearestLane(const Vec2d &, LaneInfoConstPtr *, double *, double *) const
	function HDMapImpl::GetNearestLaneWithHeading(const PointENU &, const double, const double, const double, LaneInfoConstPtr *, double *, double *) const
	function HDMapImpl::GetNearestLaneWithHeading(const Vec2d &, const double, const double, const double, LaneInfoConstPtr *, double *, double *) const
	function HDMapImpl::GetLanesWithHeading(const PointENU &, const double, const double, const double, std::vector<LaneInfoConstPtr>*) const
	function HDMapImpl::GetLanesWithHeading(const Vec2d &, const double, const double, const double, std::vector<LaneInfoConstPtr>*) const
	function HDMapImpl::GetRoadBoundaries(const PointENU &, double, std::vector<RoadROIBoundaryPtr>*, std::vector<JunctionBoundaryPtr>*) const
	function HDMapImpl::GetRoadBoundaries(const PointENU &, double, std::vector<RoadRoiPtr>*, std::vector<JunctionInfoConstPtr>*) const
	function HDMapImpl::GetRoi(const apollo::common::PointENU &, double, std::vector<RoadRoiPtr>*, std::vector<PolygonRoiPtr>*)
	function HDMapImpl::GetForwardNearestSignalsOnLane(const apollo::common::PointENU &, const double, std::vector<SignalInfoConstPtr>*) const
	function HDMapImpl::GetStopSignAssociatedStopSigns(const Id &, std::vector<StopSignInfoConstPtr>*) const
	function HDMapImpl::GetStopSignAssociatedLanes(const Id &, std::vector<LaneInfoConstPtr>*) const
	function HDMapImpl::GetLocalMap(const apollo::common::PointENU &, const std::pair<double,double>&, Map *) const
	function HDMapImpl::GetForwardNearestRSUs(const apollo::common::PointENU &, double, double, double, std::vector<RSUInfoConstPtr>*) const
	function HDMapImpl::BuildSegmentKDTree<Table, BoxTable, KDTree>(const Table &, const AABoxKDTreeParams &, BoxTable * const, std::unique_ptr<KDTree>* const)
	function HDMapImpl::BuildPolygonKDTree<Table, BoxTable, KDTree>(const Table &, const AABoxKDTreeParams &, BoxTable * const, std::unique_ptr<KDTree>* const)
	function HDMapImpl::BuildLaneSegmentKDTree()
	function HDMapImpl::BuildJunctionPolygonKDTree()
	function HDMapImpl::BuildCrosswalkPolygonKDTree()
	function HDMapImpl::BuildSignalSegmentKDTree()
	function HDMapImpl::BuildStopSignSegmentKDTree()
	function HDMapImpl::BuildYieldSignSegmentKDTree()
	function HDMapImpl::BuildClearAreaPolygonKDTree()
	function HDMapImpl::BuildSpeedBumpSegmentKDTree()
	function HDMapImpl::BuildParkingSpacePolygonKDTree()
	function HDMapImpl::BuildPNCJunctionPolygonKDTree()
	function HDMapImpl::SearchObjects<KDTree>(const Vec2d &, const double, const KDTree &, std::vector<std::string>* const)
	function HDMapImpl::Clear()
namespace hdmap
	namespace `anonymous-namespace'
		function FindFirstExist(const std::string &, const std::string &)
	function BaseMapFile()
	function SimMapFile()
	function RoutingMapFile()
	function CreateMap(const std::string &)
	function CreateMap(const MapMsg &)
	variable HDMapUtil::base_map_
	variable HDMapUtil::base_map_seq_
	variable HDMapUtil::base_map_mutex_
	variable HDMapUtil::sim_map_
	variable HDMapUtil::sim_map_mutex_
	function HDMapUtil::BaseMapPtr(const MapMsg &)
	function HDMapUtil::BaseMapPtr()
	function HDMapUtil::BaseMap()
	function HDMapUtil::SimMapPtr()
	function HDMapUtil::SimMap()
	function HDMapUtil::ReloadMaps()
namespace apollo
	namespace hdmap
		namespace `anonymous-namespace'
			variable kSampleDistance
			function FindLaneSegment(const MapPathPoint &, const MapPathPoint &, LaneSegment * const)
		function LaneWaypoint::DebugString() const
		function LeftBoundaryType(const LaneWaypoint &)
		function RightBoundaryType(const LaneWaypoint &)
		function LeftNeighborWaypoint(const LaneWaypoint &)
		function LaneSegment::Join(std::vector<LaneSegment>*)
		function LaneSegment::DebugString() const
		function RightNeighborWaypoint(const LaneWaypoint &)
		function MapPathPoint::GetPointsFromSegment(const LaneSegment &)
		function MapPathPoint::GetPointsFromLane(LaneInfoConstPtr, const double, const double)
		function MapPathPoint::RemoveDuplicates(std::vector<MapPathPoint>*)
		function MapPathPoint::DebugString() const
		function Path::DebugString() const
		function Path::Path(const std::vector<MapPathPoint>&)
		function Path::Path(std::vector<MapPathPoint>&&)
		function Path::Path(const std::vector<MapPathPoint>&, const std::vector<LaneSegment>&)
		function Path::Path(std::vector<MapPathPoint>&&, std::vector<LaneSegment>&&)
		function Path::Path(const std::vector<MapPathPoint>&, const std::vector<LaneSegment>&, const double)
		function Path::Path(const std::vector<LaneSegment>&)
		function Path::Path(std::vector<LaneSegment>&&)
		function Path::Path(std::vector<MapPathPoint>&&, std::vector<LaneSegment>&&, const double)
		function Path::Init()
		function Path::InitPoints()
		function Path::InitLaneSegments()
		function Path::InitWidth()
		function Path::InitPointIndex()
		function Path::GetAllOverlaps(GetOverlapFromLaneFunc, std::vector<PathOverlap>* const) const
		function Path::NextLaneOverlap(double) const
		function Path::InitOverlaps()
		function Path::GetSmoothPoint(const InterpolatedIndex &) const
		function Path::GetSmoothPoint(double) const
		function Path::GetSFromIndex(const InterpolatedIndex &) const
		function Path::GetIndexFromS(double) const
		function Path::GetLaneIndexFromS(double) const
		function Path::GetLaneSegments(const double, const double) const
		function Path::GetNearestPoint(const Vec2d &, double *, double *) const
		function Path::GetNearestPoint(const Vec2d &, double *, double *, double *) const
		function Path::GetProjection(const common::math::Vec2d &, double *, double *) const
		function Path::GetProjectionWithHueristicParams(const Vec2d &, const double, const double, double *, double *, double *) const
		function Path::GetProjection(const Vec2d &, double *, double *, double *) const
		function Path::GetHeadingAlongPath(const Vec2d &, double *) const
		function Path::GetLaneLeftWidth(const double) const
		function Path::GetLaneRightWidth(const double) const
		function Path::GetLaneWidth(const double, double *, double *) const
		function Path::GetRoadLeftWidth(const double) const
		function Path::GetRoadRightWidth(const double) const
		function Path::GetRoadWidth(const double, double *, double *) const
		function Path::GetSample(const std::vector<double>&, const double) const
		function Path::IsOnPath(const Vec2d &) const
		function Path::OverlapWith(const common::math::Box2d &, double) const
		function PathOverlap::DebugString() const
		function PathApproximation::compute_max_error(const Path &, const int, const int)
		function PathApproximation::is_within_max_error(const Path &, const int, const int)
		function PathApproximation::Init(const Path &)
		function PathApproximation::InitDilute(const Path &)
		function PathApproximation::InitProjections(const Path &)
		function PathApproximation::GetProjection(const Path &, const common::math::Vec2d &, double *, double *, double *) const
		function PathApproximation::OverlapWith(const Path &, const Box2d &, double) const
variable DEFINE_double
variable DEFINE_double
namespace apollo
	namespace hdmap
		namespace `anonymous-namespace'
			variable kTrajectoryApproximationMaxError
		function PncMap::PncMap(const HDMap *)
		function PncMap::hdmap() const
		function PncMap::ToLaneWaypoint(const routing::LaneWaypoint &) const
		function PncMap::LookForwardDistance(double)
		function PncMap::ToLaneSegment(const routing::LaneSegment &) const
		function PncMap::UpdateNextRoutingWaypointIndex(int)
		function PncMap::FutureRouteWaypoints() const
		function PncMap::UpdateRoutingRange(int)
		function PncMap::UpdateVehicleState(const VehicleState &)
		function PncMap::IsNewRouting(const routing::RoutingResponse &) const
		function PncMap::IsNewRouting(const routing::RoutingResponse &, const routing::RoutingResponse &)
		function PncMap::UpdateRoutingResponse(const routing::RoutingResponse &)
		function PncMap::routing_response() const
		function PncMap::ValidateRouting(const RoutingResponse &)
		function PncMap::SearchForwardWaypointIndex(int, const LaneWaypoint &) const
		function PncMap::SearchBackwardWaypointIndex(int, const LaneWaypoint &) const
		function PncMap::NextWaypointIndex(int) const
		function PncMap::GetWaypointIndex(const LaneWaypoint &) const
		function PncMap::PassageToSegments(routing::Passage, RouteSegments *) const
		function PncMap::GetNeighborPassages(const routing::RoadSegment &, int) const
		function PncMap::GetRouteSegments(const VehicleState &, std::list<RouteSegments>* const)
		function PncMap::GetRouteSegments(const VehicleState &, const double, const double, std::list<RouteSegments>* const)
		function PncMap::GetNearestPointFromRouting(const VehicleState &, LaneWaypoint *) const
		function PncMap::GetRouteSuccessor(LaneInfoConstPtr) const
		function PncMap::GetRoutePredecessor(LaneInfoConstPtr) const
		function PncMap::ExtendSegments(const RouteSegments &, const common::PointENU &, double, double, RouteSegments *)
		function PncMap::ExtendSegments(const RouteSegments &, double, double, RouteSegments * const) const
		function PncMap::AppendLaneToPoints(LaneInfoConstPtr, const double, const double, std::vector<MapPathPoint>* const)
namespace hdmap
	namespace `anonymous-namespace'
		variable kSegmentationEpsilon
	function RouteSegments::Id() const
	function RouteSegments::SetId(const std::string &)
	function RouteSegments::SetCanExit(bool)
	function RouteSegments::CanExit() const
	function RouteSegments::StopForDestination() const
	function RouteSegments::SetStopForDestination(bool)
	function RouteSegments::WithinLaneSegment(const LaneSegment &, const LaneWaypoint &)
	function RouteSegments::WithinLaneSegment(const LaneSegment &, const routing::LaneWaypoint &)
	function RouteSegments::WithinLaneSegment(const routing::LaneSegment &, const LaneWaypoint &)
	function RouteSegments::WithinLaneSegment(const routing::LaneSegment &, const routing::LaneWaypoint &)
	function RouteSegments::Stitch(const RouteSegments &)
	function RouteSegments::RouteEndWaypoint() const
	function RouteSegments::IsOnSegment() const
	function RouteSegments::SetIsOnSegment(bool)
	function RouteSegments::IsNeighborSegment() const
	function RouteSegments::SetIsNeighborSegment(bool)
	function RouteSegments::SetRouteEndWaypoint(const LaneWaypoint &)
	function RouteSegments::FirstWaypoint() const
	function RouteSegments::LastWaypoint() const
	function RouteSegments::SetProperties(const RouteSegments &)
	function RouteSegments::Length(const RouteSegments &)
	function RouteSegments::GetProjection(const common::PointENU &, common::SLPoint *, LaneWaypoint *) const
	function RouteSegments::IsConnectedSegment(const RouteSegments &) const
	function RouteSegments::Shrink(const common::math::Vec2d &, const double, const double)
	function RouteSegments::Shrink(const double, const double, const double)
	function RouteSegments::Shrink(const double, const LaneWaypoint &, const double, const double)
	function RouteSegments::GetWaypoint(const double, LaneWaypoint *) const
	function RouteSegments::GetProjection(const common::math::Vec2d &, common::SLPoint *, LaneWaypoint *) const
	function RouteSegments::SetPreviousAction(routing::ChangeLaneType)
	function RouteSegments::PreviousAction() const
	function RouteSegments::SetNextAction(routing::ChangeLaneType)
	function RouteSegments::NextAction() const
	function RouteSegments::IsWaypointOnSegment(const LaneWaypoint &) const
	function RouteSegments::CanDriveFrom(const LaneWaypoint &) const
variable DEFINE_string
variable DEFINE_int32
variable DEFINE_bool
variable DEFINE_bool
namespace relative_map
	namespace `anonymous-namespace'
		function CreateSingleLaneMap(const NaviPathTuple &, const MapGenerationParam &, const perception::PerceptionObstacles &, hdmap::Map * const, google::protobuf::Map<std::string,NavigationPath>* const)
	function NavigationLane::NavigationLane(const NavigationLaneConfig &)
	function NavigationLane::SetConfig(const NavigationLaneConfig &)
	function NavigationLane::SetVehicleStateProvider(common::VehicleStateProvider *)
	function NavigationLane::UpdateNavigationInfo(const NavigationInfo &)
	function NavigationLane::GeneratePath()
	function NavigationLane::EvaluateCubicPolynomial(const double, const double, const double, const double, const double) const
	function NavigationLane::MergeNavigationLineAndLaneMarker(const int, common::Path * const)
	function NavigationLane::GetPathPointByS(const common::Path &, const int, const double, int * const)
	function NavigationLane::ConvertNavigationLineToPath(const int, common::Path * const)
	function NavigationLane::UpdateProjectionIndex(const common::Path &, const int)
	function NavigationLane::GetKappa(const double, const double, const double, const double)
	function NavigationLane::ConvertLaneMarkerToPath(const perception::LaneMarkers &, common::Path * const)
	function NavigationLane::CreateMap(const MapGenerationParam &, MapMsg * const) const
	function NavigationLane::UpdateStitchIndexInfo()
namespace relative_map
	function RelativeMap::RelativeMap()
	function RelativeMap::Init(common::VehicleStateProvider *)
	function RelativeMap::Start()
	function RelativeMap::Process(MapMsg * const)
	function RelativeMap::OnNavigationInfo(const NavigationInfo &)
	function RelativeMap::OnPerception(const PerceptionObstacles &)
	function RelativeMap::OnChassis(const Chassis &)
	function RelativeMap::OnLocalization(const LocalizationEstimate &)
	function RelativeMap::CreateMapFromNavigationLane(MapMsg *)
	function RelativeMap::Stop()
	function LogErrorStatus(MapMsg *, const std::string &)
namespace relative_map
	function RelativeMapComponent::Init()
	function RelativeMapComponent::Proc()
	function RelativeMapComponent::InitReaders()
variable DEFINE_string
function main(int, char **)
function ParseNavigationLineFileNames(int, char **, std::vector<std::string>*)
function GetNavigationPathFromFile(const std::string &, const NavigatorConfig &, NavigationPath *)
function CheckConfig(const apollo::relative_map::NavigatorConfig &)
function main(int, char **)
function ParseNavigationLineFileNames(int, char **, std::vector<std::string>*)
function GetNavigationPathFromFile(const std::string &, const NavigatorConfig &, NavigationPath *)
function CheckConfig(const apollo::relative_map::NavigatorConfig &)
function main(int, char * [])
namespace hdmap
	function Client::Client()
	function Client::Run()
	function Client::RecordCheckStage()
	function Client::StaticAlignStage()
	function Client::EightRouteStage()
	function Client::DataCollectStage()
	function Client::LoopsCheckStage()
	function Client::CleanStage()
namespace hdmap
	function ChannelChecker::ChannelChecker(const std::string &)
	function ChannelChecker::SyncStart(const std::string &)
	function ChannelChecker::SyncStop()
	function ChannelChecker::PeriodicCheck()
	function ChannelChecker::GrpcStub(ChannelVerifyRequest *, ChannelVerifyResponse *)
	function ChannelChecker::Start(const std::string &)
	function ChannelChecker::Check()
	function ChannelChecker::Stop()
	function ChannelChecker::ProcessAbnormal(ChannelVerifyResponse *)
namespace hdmap
	function GetFileLines(const std::string &)
namespace hdmap
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_string
namespace hdmap
	function LoopsChecker::LoopsChecker(const std::string &)
	function LoopsChecker::SyncStart(bool *)
	function LoopsChecker::PeriodicCheck(bool *)
	function LoopsChecker::GetTimeRanges()
	function LoopsChecker::GrpcStub(LoopsVerifyRequest *, LoopsVerifyResponse *)
	function LoopsChecker::Start(const std::vector<std::pair<double,double>>&)
	function LoopsChecker::Check(double *, bool *)
	function LoopsChecker::Stop()
namespace hdmap
	function ExceptionHandler::ExceptionHandlerFun(ErrorCode)
namespace hdmap
	function ChannelVerify::ChannelVerify(std::shared_ptr<JsonConf>)
	function ChannelVerify::Reset()
	function ChannelVerify::Check(const std::string &)
	function ChannelVerify::get_check_result() const
	function ChannelVerify::IncrementalCheck(const std::vector<std::string>&)
	function ChannelVerify::IsRecordFile(const std::string &) const
	function ChannelVerify::GetRecordsPath(const std::string &) const
	function ChannelVerify::IsRecordChecked(const std::string &)
	function ChannelVerify::GetRecordInfo(const std::string &) const
	function ChannelVerify::CheckRecordChannels(const std::string &)
	function ChannelVerify::GetReturnState() const
namespace hdmap
	function ChannelVerifyAgent::ChannelVerifyAgent(std::shared_ptr<JsonConf>)
	function ChannelVerifyAgent::Reset()
	function ChannelVerifyAgent::ProcessGrpcRequest(grpc::ServerContext *, ChannelVerifyRequest *, ChannelVerifyResponse *)
	function ChannelVerifyAgent::StartCheck(ChannelVerifyRequest *, ChannelVerifyResponse *)
	function ChannelVerifyAgent::AsyncCheck(const std::string &)
	function ChannelVerifyAgent::DoCheck(const std::string &)
	function ChannelVerifyAgent::AddTopicLack(VerifyResult *, const std::string &, std::vector<std::string> const &)
	function ChannelVerifyAgent::FindRates(VerifyResult *, const std::string &)
	function ChannelVerifyAgent::AddInadequateRate(VerifyResult *, std::string const &, std::map<std::string,std::pair<double,double>> const &)
	function ChannelVerifyAgent::CheckResult(ChannelVerifyRequest *, ChannelVerifyResponse *)
	function ChannelVerifyAgent::StopCheck(ChannelVerifyRequest *, ChannelVerifyResponse *)
	function ChannelVerifyAgent::SetState(ChannelVerifyAgentState)
	function ChannelVerifyAgent::GetState() const
namespace hdmap
	function ParseJson(std::string)
namespace hdmap
	function EightRoute::EightRoute(std::shared_ptr<JsonConf>)
	function EightRoute::Reset()
	function EightRoute::IsEightRoutePose(const std::vector<FramePose>&, int)
	function EightRoute::GetGoodPoseDuring()
	function EightRoute::GetEightRouteProgress(const std::vector<FramePose>&)
	function EightRoute::Process(const std::vector<FramePose>&)
	function EightRoute::GetProgress() const
namespace hdmap
	function LapsChecker::LapsChecker(const std::vector<FramePose>&, int, std::shared_ptr<JsonConf>)
	function LapsChecker::SetProgress(double)
	function LapsChecker::GetProgress() const
	function LapsChecker::GetLap() const
	function LapsChecker::GetConfidence()
	function LapsChecker::Check()
	function LapsChecker::DoCheck()
	function LapsChecker::CheckParams()
	function LapsChecker::SetupGridsMap()
	function LapsChecker::CheckLaps()
	function LapsChecker::GatherTimestamps(std::vector<double>*, double, int, int)
	function LapsChecker::GetMinMax()
	function LapsChecker::DoSetupGridsMap()
	function LapsChecker::CalcAlpha(int)
	function LapsChecker::PutPoseToGrid(int, int, int)
	function LapsChecker::PutPoseToNeighborGrid(int)
	function LapsChecker::GetPassedGrid(int, std::vector<int>*, std::vector<int>*)
	function LapsChecker::Slope(double, double, double, double)
	function LapsChecker::GetReturnState()
namespace hdmap
	function LoopsVerifyAgent::LoopsVerifyAgent(std::shared_ptr<JsonConf>, std::shared_ptr<PoseCollectionAgent>)
	function LoopsVerifyAgent::ProcessGrpcRequest(grpc::ServerContext *, LoopsVerifyRequest *, LoopsVerifyResponse *)
	function LoopsVerifyAgent::StartVerify(LoopsVerifyRequest *, LoopsVerifyResponse *)
	function LoopsVerifyAgent::CheckVerify(LoopsVerifyRequest *, LoopsVerifyResponse *)
	function LoopsVerifyAgent::StopVerify(LoopsVerifyRequest *, LoopsVerifyResponse *)
	function LoopsVerifyAgent::get_verify_range(LoopsVerifyRequest *)
	function LoopsVerifyAgent::GetLoopsToCheck(LoopsVerifyRequest *)
	function LoopsVerifyAgent::GetRangeIndex(std::shared_ptr<std::vector<std::pair<double,double>>>, std::vector<bool>*, std::shared_ptr<std::vector<FramePose>>)
	function LoopsVerifyAgent::GetPosesToCheck(std::shared_ptr<std::vector<std::pair<double,double>>>, std::vector<FramePose>*)
	function LoopsVerifyAgent::DoStartVerify(std::shared_ptr<std::vector<std::pair<double,double>>>, double)
	function LoopsVerifyAgent::SetState(LoopsVerifyAgentState)
	function LoopsVerifyAgent::GetState()
namespace hdmap
	function PJTransformer::PJTransformer(int)
	function PJTransformer::~PJTransformer()
	function PJTransformer::LatlongToUtm(int64_t, int, double *, double *, double *)
namespace hdmap
	function PoseCollection::PoseCollection(std::shared_ptr<JsonConf>)
	function PoseCollection::Reset()
	function PoseCollection::Collect(const FramePose &)
	function PoseCollection::GetPoses() const
namespace hdmap
	function PoseCollectionAgent::PoseCollectionAgent(std::shared_ptr<JsonConf>)
	function PoseCollectionAgent::Reset()
	function PoseCollectionAgent::OnBestgnssposCallback(const std::shared_ptr<const apollo::drivers::gnss::GnssBestPose>&)
	function PoseCollectionAgent::GetPoses() const
namespace hdmap
	function StaticAlign::StaticAlign(std::shared_ptr<JsonConf>)
	function StaticAlign::Reset()
	function StaticAlign::IsStaticPose(const FramePose &)
	function StaticAlign::UpdateDynamicCentroid(const FramePose &)
	function StaticAlign::GetCentroidTimeDuring()
	function StaticAlign::UpdateGoodPoseInfo(const FramePose &)
	function StaticAlign::StaticAlignDynamicCentroid(const std::vector<FramePose>&)
	function StaticAlign::StaticAlignRansac(const std::vector<FramePose>&)
	function StaticAlign::GetStaticAlignProgress(const std::vector<FramePose>&)
	function StaticAlign::Process(const std::vector<FramePose>&)
namespace hdmap
	function Mapdatachecker::Init()
	function Mapdatachecker::Start()
	function Mapdatachecker::Stop()
	function Mapdatachecker::Report()
namespace hdmap
	function MapDataCheckerAgent::MapDataCheckerAgent()
	function MapDataCheckerAgent::GetSpPoseCollectionAgent()
	function MapDataCheckerAgent::ServiceChannelVerify(grpc::ServerContext *, ChannelVerifyRequest *, ChannelVerifyResponse *)
	function MapDataCheckerAgent::ServiceStaticAlign(grpc::ServerContext *, StaticAlignRequest *, StaticAlignResponse *)
	function MapDataCheckerAgent::ServiceEightRoute(grpc::ServerContext *, EightRouteRequest *, EightRouteResponse *)
	function MapDataCheckerAgent::ServiceLoopsVerify(grpc::ServerContext *, LoopsVerifyRequest *, LoopsVerifyResponse *)
variable kDEGRESS_TO_RADIANS
namespace apollo
	namespace hdmap
		function MapDataCheckerCyberNode::MapDataCheckerCyberNode(std::shared_ptr<MapDataCheckerAgent>, bool *)
		function MapDataCheckerCyberNode::CreateChannelSubscriber()
namespace hdmap
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_string
variable DEFINE_double
variable DEFINE_string
function ShiftMap(Map *)
function OutputMap(const Map &)
function main(int32_t, char **)
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_double
variable DEFINE_double
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_double
variable DEFINE_double
namespace apollo
	namespace hdmap
		operator operator<<(std::ostream &, const::google::protobuf::RepeatedPtrField<apollo::hdmap::Id>&)
		class MapUtil
			method GetOverlap(const std::string &) const
			method GET_ELEMENT_BY_ID(ClearArea)
			method GET_ELEMENT_BY_ID(Crosswalk)
			method GET_ELEMENT_BY_ID(Junction)
			method GET_ELEMENT_BY_ID(Lane)
			method GET_ELEMENT_BY_ID(Signal)
			method GET_ELEMENT_BY_ID(SpeedBump)
			method GET_ELEMENT_BY_ID(StopSign)
			method GET_ELEMENT_BY_ID(YieldSign)
			method Print<T>(const T &)
			method PointToSL(const PointENU &, std::string *, double *, double *, double *) const
			method SLToPoint(LaneInfoConstPtr, const double, const double, PointENU *, double *) const
			method LaneProjection(const apollo::common::math::Vec2d &, const std::string &, double *, double *, double *) const
			method PrintOverlap(const std::string &)
			method PrintLane(const std::string &)
			method PrintLane(LaneInfoConstPtr)
constant QUIT_IF(CONDITION, RET, LEVEL, MSG, __VA_ARGS__)
constant GET_ELEMENT_BY_ID(TYPE)
function main(int, char * [])
function main(int, char **)
variable DEFINE_double
variable DEFINE_double
variable DEFINE_double
function main(int32_t, char **)
namespace hdmap
	function SLToXYZ(const std::string &, const double, const double)
	function XYZToSL(const apollo::common::PointENU &, std::string *, double *, double *)
	function XYZDistance(const apollo::common::PointENU &, const apollo::common::PointENU &)
	function RefreshDefaultEndPoint()
function main(int, char * [])
variable DEFINE_double
variable DEFINE_int32
variable DEFINE_int32
function DownsampleCurve(Curve *)
function DownsampleMap(Map *)
function OutputMap(const Map &)
function main(int32_t, char **)
namespace monitor
	function MonitorManager::MonitorManager()
	function MonitorManager::Init(const std::shared_ptr<apollo::cyber::Node>&)
	function MonitorManager::StartFrame(const double)
	function MonitorManager::EndFrame()
	function MonitorManager::CheckAutonomousDriving(const double)
namespace monitor
	function RecurrentRunner::RecurrentRunner(const std::string &, const double)
	function RecurrentRunner::Tick(const double)
variable DEFINE_string
variable DEFINE_double
variable DEFINE_string
namespace apollo
	namespace monitor
		namespace `anonymous-namespace'
			function StatusString(const NTCAN_RESULT)
			function EsdCanTest(const int, NTCAN_HANDLE *)
			function EsdCanTest(const int, ComponentStatus *)
			function EsdCanTest(const int, ComponentStatus *)
		function EsdCanMonitor::EsdCanMonitor()
		function EsdCanMonitor::RunOnce(const double)
variable DEFINE_double
variable DEFINE_string
namespace apollo
	namespace monitor
		function GpsMonitor::GpsMonitor()
		function GpsMonitor::RunOnce(const double)
variable DEFINE_double
namespace apollo
	namespace monitor
		namespace `anonymous-namespace'
			function GetPIDByCmdLine(const std::string &, int *)
			function GetStatsLines(const std::string &, const int)
			function GetMemoryUsage(const int, const std::string &)
			function GetCPUUsage(const int, const std::string &, std::unordered_map<std::string,uint64_t>*)
			function GetSystemMemoryValueFromLine(std::string)
			function GetSystemMemoryUsage()
			function GetSystemCPUUsage()
			function GetSystemDiskload(const std::string &)
		function ResourceMonitor::ResourceMonitor()
		function ResourceMonitor::RunOnce(const double)
		function ResourceMonitor::UpdateStatus(const apollo::dreamview::ResourceMonitorConfig &, ComponentStatus *)
		function ResourceMonitor::CheckDiskSpace(const apollo::dreamview::ResourceMonitorConfig &, ComponentStatus *)
		function ResourceMonitor::CheckCPUUsage(const apollo::dreamview::ResourceMonitorConfig &, ComponentStatus *)
		function ResourceMonitor::CheckMemoryUsage(const apollo::dreamview::ResourceMonitorConfig &, ComponentStatus *)
		function ResourceMonitor::CheckDiskLoads(const apollo::dreamview::ResourceMonitorConfig &, ComponentStatus *)
variable DEFINE_double
variable DEFINE_string
namespace apollo
	namespace monitor
		namespace `anonymous-namespace'
			function SocketCanHandlerTest(const int, std::string *)
			function SocketCanTest(std::string *)
		function SocketCanMonitor::SocketCanMonitor()
		function SocketCanMonitor::RunOnce(const double)
namespace apollo
	namespace monitor
		function Monitor::Init()
		function Monitor::Proc()
variable DEFINE_double
variable DEFINE_string
namespace apollo
	namespace monitor
		namespace `anonymous-namespace'
			interface ReaderAndMessagePair
			function CreateReaderAndLatestsMessage(const std::string &)
			variable camera_topic_set
		function CameraMonitor::CameraMonitor()
		function CameraMonitor::RunOnce(const double)
		function CameraMonitor::UpdateStatus(ComponentStatus *)
variable DEFINE_double
namespace apollo
	namespace monitor
		namespace `anonymous-namespace'
			interface ReaderAndMessagePair
			function CreateReaderAndLatestsMessage<T>(const std::string &)
			function GetReaderAndLatestMessage(const std::string &)
			function ValidateFields(const google::protobuf::Message &, const std::vector<std::string>&, const size_t)
		function ChannelMonitor::ChannelMonitor(const std::shared_ptr<LatencyMonitor>&)
		function ChannelMonitor::RunOnce(const double)
		function ChannelMonitor::UpdateStatus(const apollo::dreamview::ChannelMonitorConfig &, ComponentStatus *, const bool, const double)
variable DEFINE_double
namespace apollo
	namespace monitor
		namespace `anonymous-namespace'
			function IsSafe(const std::string &, const ComponentStatus &)
		function FunctionalSafetyMonitor::FunctionalSafetyMonitor()
		function FunctionalSafetyMonitor::RunOnce(const double)
		function FunctionalSafetyMonitor::CheckSafety()
variable DEFINE_double
variable DEFINE_double
variable DEFINE_int32
namespace apollo
	namespace monitor
		namespace `anonymous-namespace'
			function GenerateStat(const std::vector<uint64_t>&)
			function SetStat(const LatencyStat &, LatencyStat *)
			function SetLatency(const std::string &, const std::vector<uint64_t>&, LatencyTrack *)
		function LatencyMonitor::LatencyMonitor()
		function LatencyMonitor::RunOnce(const double)
		function LatencyMonitor::UpdateStat(const std::shared_ptr<LatencyRecordMap>&)
		function LatencyMonitor::PublishLatencyReport()
		function LatencyMonitor::AggregateLatency()
		function LatencyMonitor::GetFrequency(const std::string &, double *)
variable DEFINE_double
variable DEFINE_string
namespace apollo
	namespace monitor
		function LocalizationMonitor::LocalizationMonitor()
		function LocalizationMonitor::RunOnce(const double)
function ABSL_FLAG(double, module_monitor_interval, 1.5, "Process status checking interval in seconds.")
namespace apollo
	namespace monitor
		function ModuleMonitor::ModuleMonitor()
		function ModuleMonitor::RunOnce(const double)
		function ModuleMonitor::UpdateStatus(const apollo::dreamview::ModuleMonitorConfig &, const std::string &, ComponentStatus *)
variable DEFINE_double
namespace apollo
	namespace monitor
		function ProcessMonitor::ProcessMonitor()
		function ProcessMonitor::RunOnce(const double)
		function ProcessMonitor::UpdateStatus(const std::vector<std::string>&, const apollo::dreamview::ProcessMonitorConfig &, ComponentStatus *)
variable DEFINE_double
variable DEFINE_string
namespace apollo
	namespace monitor
		function RecorderMonitor::RecorderMonitor()
		function RecorderMonitor::RunOnce(const double)
variable DEFINE_double
namespace apollo
	namespace monitor
		function SummaryMonitor::EscalateStatus(const ComponentStatus::Status, const std::string &, ComponentStatus *)
		function SummaryMonitor::SummaryMonitor()
		function SummaryMonitor::RunOnce(const double)
namespace perception
	namespace base
		function Blob<Dtype>::Reshape(const int, const int, const int, const int)
		function Blob<Dtype>::Reshape(const std::vector<int>&)
		function Blob<Dtype>::ReshapeLike(const Blob<Dtype>&)
		function Blob<Dtype>::Blob(const int, const int, const int, const int, const bool)
		function Blob<Dtype>::Blob(const std::vector<int>&, const bool)
		function Blob<Dtype>::gpu_shape() const
		function Blob<Dtype>::cpu_data() const
		function Blob<Dtype>::set_cpu_data(Dtype *)
		function Blob<Dtype>::gpu_data() const
		function Blob<Dtype>::set_gpu_data(Dtype *)
		function Blob<Dtype>::mutable_cpu_data()
		function Blob<Dtype>::mutable_gpu_data()
		function Blob<Dtype>::ShareData(const Blob &)
		class Blob<bool>
		class Blob<uint8_t>
		class Blob<int>
		class Blob<unsigned int>
		class Blob<float>
		class Blob<double>
namespace perception
	namespace base
		function PinholeCameraModel::Project(const Eigen::Vector3f &)
		function PinholeCameraModel::UnProject(const Eigen::Vector2f &)
namespace perception
	namespace base
		function BrownCameraDistortionModel::Project(const Eigen::Vector3f &)
		function BrownCameraDistortionModel::get_camera_model()
		function BrownCameraDistortionModel::set_params(size_t, size_t, const Eigen::VectorXf &)
namespace perception
	namespace base
		function Object::Object()
		function Object::Reset()
		function Object::ToString() const
namespace perception
	namespace base
		function PoolInitialize()
namespace perception
	namespace base
		function OmnidirectionalCameraDistortionModel::Project(const Eigen::Vector3f &)
		function OmnidirectionalCameraDistortionModel::get_camera_model()
		function OmnidirectionalCameraDistortionModel::set_params(size_t, size_t, const Eigen::VectorXf &)
namespace perception
	namespace base
		function DownSamplePointCloudBeams(base::PointFCloudPtr, base::PointFCloudPtr, int)
		function GetPointCloudCentroid(const PointFCloud &, PointF *)
		function CloudDemean(PointFCloud *)
		function OrientCloud(const PointFCloud &, PointFCloud *, bool)
		function GetPointCloudMinareaBbox(const PointFCloud &, BoundingCube *, const int &, const bool &)
namespace perception
	namespace base
		function Polynomial::Polynomial()
		function Polynomial::~Polynomial()
		function Polynomial::getCoeff() const
		function Polynomial::operator[](const uint32_t &)
		function Polynomial::operator()(const double &)
		operator operator<<(std::ostream &, const Polynomial &)
namespace perception
	namespace base
		function SyncedMemory::SyncedMemory(bool)
		function SyncedMemory::SyncedMemory(size_t, bool)
		function SyncedMemory::~SyncedMemory()
		function SyncedMemory::to_cpu()
		function SyncedMemory::to_gpu()
		function SyncedMemory::cpu_data()
		function SyncedMemory::set_cpu_data(void *)
		function SyncedMemory::gpu_data()
		function SyncedMemory::set_gpu_data(void *)
		function SyncedMemory::mutable_cpu_data()
		function SyncedMemory::mutable_gpu_data()
		function SyncedMemory::async_gpu_push(const cudaStream_t &)
		function SyncedMemory::check_device()
namespace perception
	function Cipv::Cipv()
	function Cipv::~Cipv()
	function Cipv::Init(const Eigen::Matrix3d &, const float, const float, const float, const float, const bool, const int)
	function Cipv::DistanceFromPointToLineSegment(const Point2Df &, const Point2Df &, const Point2Df &, float *)
	function Cipv::GetEgoLane(const std::vector<base::LaneLine>&, EgoLane *, EgoLane *, bool *, bool *)
	function Cipv::MakeVirtualLane(const LaneLineSimple &, const float, const float, LaneLineSimple *)
	function Cipv::VehicleDynamics(const uint32_t, const float, const float, const float, float *, float *)
	function Cipv::VehicleDynamics(const uint32_t, const float, const float, const float, const float, float *, float *, float *, float *, float *, float *)
	function Cipv::MakeVirtualEgoLaneFromYawRate(const float, const float, const float, LaneLineSimple *, LaneLineSimple *)
	function Cipv::ElongateEgoLane(const std::vector<base::LaneLine>&, const bool, const bool, const float, const float, EgoLane *, EgoLane *)
	function Cipv::CreateVirtualEgoLane(const float, const float, EgoLane *)
	function Cipv::FindClosestObjectImage(const std::shared_ptr<base::Object>&, const EgoLane &, LineSegment2Df *, float *)
	function Cipv::FindClosestObjectGround(const std::shared_ptr<base::Object>&, const EgoLane &, const Eigen::Affine3d, LineSegment2Df *, float *)
	function Cipv::AreDistancesSane(const float, const float, const float, const float)
	function Cipv::IsPointLeftOfLine(const Point2Df &, const Point2Df &, const Point2Df &)
	function Cipv::IsObjectInTheLaneImage(const std::shared_ptr<base::Object>&, const EgoLane &, float *)
	function Cipv::IsObjectInTheLaneGround(const std::shared_ptr<base::Object>&, const EgoLane &, const Eigen::Affine3d, const bool, float *)
	function Cipv::IsObjectInTheLane(const std::shared_ptr<base::Object>&, const EgoLane &, const EgoLane &, const Eigen::Affine3d, const bool, float *)
	function Cipv::DetermineCipv(const std::vector<base::LaneLine>&, const CipvOptions &, const Eigen::Affine3d &, std::vector<std::shared_ptr<base::Object>>*)
	function Cipv::TranformPoint(const Eigen::VectorXf &, const Eigen::Matrix4f &, Eigen::Vector3d *)
	function Cipv::CollectDrops(const base::MotionBufferPtr &, const Eigen::Affine3d &, std::vector<std::shared_ptr<base::Object>>*)
	function Cipv::image2ground(const float, const float, float *, float *)
	function Cipv::ground2image(const float, const float, float *, float *)
	function Cipv::Name() const
namespace perception
	namespace camera
		variable type_string
		variable sub_type_string
		function WriteCamera2World(std::ofstream &, int, const Eigen::Affine3d &)
		function WriteTracking(std::ofstream &, int, const std::vector<base::ObjectPtr>&)
		function WriteDetections(const bool, const std::string &, const std::vector<base::ObjectPtr>&)
		function WriteDetections(const bool, const std::string &, CameraFrame *)
		function WriteLanelines(const bool, const std::string &, const std::vector<base::LaneLine>&)
		function WriteCalibrationOutput(bool, const std::string &, const CameraFrame *)
		function WriteFusionTracking(std::ofstream &, int, const std::string &, const std::vector<base::ObjectPtr>&)
namespace perception
	namespace camera
		function LaneCameraPerception::Init(const CameraPerceptionInitOptions &)
		function LaneCameraPerception::InitLane(const std::string &, base::BaseCameraModelPtr &, const app::PerceptionParam &)
		function LaneCameraPerception::InitCalibrationService(const std::string &, const base::BaseCameraModelPtr, const app::PerceptionParam &)
		function LaneCameraPerception::SetCameraHeightAndPitch(const std::map<std::string,float>, const std::map<std::string,float>, const float &)
		function LaneCameraPerception::SetIm2CarHomography(Eigen::Matrix3d)
		function LaneCameraPerception::GetCalibrationService(BaseCalibrationService **)
		function LaneCameraPerception::Perception(const CameraPerceptionOptions &, CameraFrame *)
namespace perception
	namespace camera
		function ObstacleCameraPerception::Init(const CameraPerceptionInitOptions &)
		function ObstacleCameraPerception::InitLane(const std::string &, const app::PerceptionParam &)
		function ObstacleCameraPerception::InitCalibrationService(const std::string &, const base::BaseCameraModelPtr, const app::PerceptionParam &)
		function ObstacleCameraPerception::SetCameraHeightAndPitch(const std::map<std::string,float>&, const std::map<std::string,float>&, const float &)
		function ObstacleCameraPerception::SetIm2CarHomography(Eigen::Matrix3d)
		function ObstacleCameraPerception::GetCalibrationService(BaseCalibrationService **)
		function ObstacleCameraPerception::Perception(const CameraPerceptionOptions &, CameraFrame *)
namespace perception
	namespace camera
		function TrafficLightCameraPerception::Init(const CameraPerceptionInitOptions &)
		function TrafficLightCameraPerception::Perception(const CameraPerceptionOptions &, CameraFrame *)
namespace perception
	namespace camera
		function ConvertGround3ToGround4(const float &, const std::vector<float>&, const std::vector<float>&, std::vector<float>*)
		function ConvertGround4ToGround3(const float &, const std::vector<float>&, const std::vector<float>&, std::vector<float>*)
		function GetGroundPlanePitchHeight(const float &, const std::vector<float>&, const std::vector<float>&, float *, float *)
		function GetGround3FromPitchHeight(const std::vector<float>&, const float &, const float &, const float &, std::vector<float>*)
		function GroundPlaneTracker::GroundPlaneTracker(int)
		function GroundPlaneTracker::Push(const std::vector<float>&, const float &)
		function GroundPlaneTracker::GetGround(float *, float *)
		function GroundPlaneTracker::Restart()
		function CameraGroundPlaneParams::SetDefault()
		function CameraGroundPlaneDetector::DetetGround(float, float, float *, int, const std::vector<float>&)
		function CameraGroundPlaneDetector::DetectGroundFromSamples(float *, int, float *)
namespace perception
	namespace camera
		function DataProvider::Init(const DataProvider::InitOptions &)
		function DataProvider::FillImageData(int, int, const uint8_t *, const std::string &)
		function DataProvider::GetImageBlob(const DataProvider::ImageOptions &, base::Blob<float>*)
		function DataProvider::GetImageBlob(const DataProvider::ImageOptions &, base::Blob<uint8_t>*)
		function DataProvider::GetImage(const DataProvider::ImageOptions &, base::Image8U *)
		function DataProvider::to_gray_image()
		function DataProvider::to_rgb_image()
		function DataProvider::to_bgr_image()
namespace apollo
	namespace perception
		namespace camera
			variable kTypeCanBeRef
			variable kTypeRefinedByTemplate
			variable kTypeRefinedByRef
			function ObjectTemplateManager::ObjectTemplateManager()
			function ObjectTemplateManager::Init(const ObjectTemplateManagerInitOptions &)
			function ObjectTemplateManager::LoadVehTemplates(const ObjectTemplate &)
			function ObjectTemplateManager::LoadVehMinMidMaxTemplates(const base::ObjectSubType &, const ObjectTemplate &)
			function ObjectTemplateManager::Get3dDimensionSimilarity(const float *, const float *)
			function ObjectTemplateManager::VehObjHwlBySearchTemplates(float *, int *, bool *)
namespace perception
	namespace camera
		function UndistortionHandler::set_device(int)
		function UndistortionHandler::Init(const std::string &, int)
		function UndistortionHandler::Handle(const base::Image8U &, base::Image8U *)
		function UndistortionHandler::Release(void)
		function UndistortionHandler::InitUndistortRectifyMap(const Eigen::Matrix3f &, const Eigen::Matrix<float,5,1>, const Eigen::Matrix3f &, const Eigen::Matrix3f &, int, int, base::Blob<float>*, base::Blob<float>*)
namespace perception
	namespace camera
		function Equal(double, double, double)
		function Equal(float, float, float)
		function LoadAnchors(const std::string &, std::vector<float>*)
		function LoadTypes(const std::string &, std::vector<base::ObjectSubType>*)
		function LoadExpand(const std::string &, std::vector<float>*)
		function ResizeCPU(const base::Blob<uint8_t>&, std::shared_ptr<base::Blob<float>>, int, int)
		function GetCyberWorkRoot()
		function FillObjectPolygonFromBBox3D(base::Object *)
namespace perception
	namespace camera
		function OnlineCalibrationService::Init(const CalibrationServiceInitOptions &)
		function OnlineCalibrationService::BuildIndex()
		function OnlineCalibrationService::QueryDepthOnGroundPlane(int, int, double *) const
		function OnlineCalibrationService::QueryPoint3dOnGroundPlane(int, int, Eigen::Vector3d *) const
		function OnlineCalibrationService::QueryGroundPlaneInCameraFrame(Eigen::Vector4d *) const
		function OnlineCalibrationService::QueryCameraToGroundHeightAndPitchAngle(float *, float *) const
		function OnlineCalibrationService::Update(CameraFrame *)
		function OnlineCalibrationService::SetCameraHeightAndPitch(const std::map<std::string,float>&, const std::map<std::string,float>&, const float &)
		function OnlineCalibrationService::Name() const
		function REGISTER_CALIBRATION_SERVICE(OnlineCalibrationService)
namespace perception
	namespace camera
		function HistogramEstimatorParams::Init()
		function HistogramEstimator::Init(const HistogramEstimatorParams *)
		function HistogramEstimator::Process()
		function HistogramEstimator::Smooth(const uint32_t *, int, uint32_t *)
		function HistogramEstimator::GenerateHat(float *, int)
		function HistogramEstimator::IsGoodShape(const uint32_t *, int, int)
		function HistogramEstimator::GetPeakIndexAndMass(const uint32_t *, int, int *, uint32_t *)
namespace perception
	namespace camera
		function GetYawVelocityInfo(const float &, const double [3], const double [3], const double [3], float *, float *)
		function CalibratorParams::Init()
		function LaneBasedCalibrator::Init(const LocalCalibratorInitOptions &, const CalibratorParams *)
		function LaneBasedCalibrator::ClearUp()
		function LaneBasedCalibrator::Process(const EgoLane &, const float &, const float &, const float &)
		function LaneBasedCalibrator::PushVanishingPoint(const VanishingPoint &)
		function LaneBasedCalibrator::PopVanishingPoint(VanishingPoint *)
		function LaneBasedCalibrator::AddPitchToHistogram(float)
		function LaneBasedCalibrator::GetPitchFromVanishingPoint(const VanishingPoint &, float *) const
		function LaneBasedCalibrator::GetVanishingPoint(const EgoLane &, VanishingPoint *)
		function LaneBasedCalibrator::GetCenterIndex(const Eigen::Vector2f *, int) const
		function LaneBasedCalibrator::SelectTwoPointsFromLineForVanishingPoint(const LaneLine &, float [4])
		function LaneBasedCalibrator::GetIntersectionFromTwoLineSegments(const float [4], const float [4], VanishingPoint *)
namespace perception
	namespace camera
		function LaneLineCalibrator::Init(const CalibratorInitOptions &)
		function LaneLineCalibrator::Calibrate(const CalibratorOptions &, float *)
		function LaneLineCalibrator::LoadEgoLaneline(const std::vector<base::LaneLine>&, EgoLane *)
		function REGISTER_CALIBRATOR(LaneLineCalibrator)
namespace perception
	namespace camera
		function REGISTER_INFERENCE_ENGINE(DummyInferenceEngine)
		function REGISTER_OBSTACLE_TRACKER(DummyObstacleTracker)
		function REGISTER_LANE_POSTPROCESSOR(DummyLanePostprocessor)
		function REGISTER_OBSTACLE_TRANSFORMER(DummyObstacleTransformer)
		function REGISTER_LANE_DETECTOR(DummyLaneDetector)
		function REGISTER_LANE_TRACKER(DummyLaneTracker)
		function REGISTER_OBSTACLE_DETECTOR(DummyObstacleDetector)
		function REGISTER_OBSTACLE_POSTPROCESSOR(DummyObstaclePostprocessor)
		function REGISTER_FEATURE_EXTRACTOR(DummyFeatureExtractor)
		function REGISTER_LANDMARK_DETECTOR(DummyLandmarkDetector)
		function REGISTER_CALIBRATOR(DummyCalibrator)
		function REGISTER_CALIBRATION_SERVICE(DummyCalibrationService)
namespace perception
	namespace camera
		function ExternalFeatureExtractor::Init(const FeatureExtractorInitOptions &)
		function ExternalFeatureExtractor::InitFeatureExtractor(const std::string &)
		function ExternalFeatureExtractor::Extract(const FeatureExtractorOptions &, CameraFrame *)
		function ExternalFeatureExtractor::Name() const
		function REGISTER_FEATURE_EXTRACTOR(ExternalFeatureExtractor)
namespace perception
	namespace camera
		function ProjectFeature::Init(const FeatureExtractorInitOptions &)
		function ProjectFeature::Extract(const FeatureExtractorOptions &, CameraFrame *)
		function ProjectFeature::Name() const
		function REGISTER_FEATURE_EXTRACTOR(ProjectFeature)
namespace perception
	namespace camera
		function TrackingFeatureExtractor::Init(const FeatureExtractorInitOptions &)
		function TrackingFeatureExtractor::init_roipooling(const FeatureExtractorInitOptions &, const tracking_feature::ROIPoolingParam &)
		function TrackingFeatureExtractor::Extract(const FeatureExtractorOptions &, CameraFrame *)
		function REGISTER_FEATURE_EXTRACTOR(TrackingFeatureExtractor)
namespace perception
	namespace camera
		function DisjointSet::Add()
		function DisjointSet::Find(int)
		function DisjointSet::Unite(int, int)
		function ConnectedComponent::AddPixel(int, int)
		function FindCC(const std::vector<unsigned char>&, int, int, const base::RectI &, std::vector<ConnectedComponent>*)
		function ImagePoint2Camera(const base::Point2DF &, float, float, const Eigen::Matrix3f &, Eigen::Vector3d *)
		function CameraPoint2Image(const Eigen::Vector3d &, const Eigen::Matrix3f &, base::Point2DF *)
		function ComparePoint2DY(const base::Point2DF &, const base::Point2DF &)
		function FindKSmallValue(const float *, int, int, int *)
		function FindKLargeValue(const float *, int, int, int *)
namespace perception
	namespace camera
		function DarkSCNNLaneDetector::Init(const LaneDetectorInitOptions &)
		function DarkSCNNLaneDetector::Detect(const LaneDetectorOptions &, CameraFrame *)
		function DarkSCNNLaneDetector::Name() const
		function REGISTER_LANE_DETECTOR(DarkSCNNLaneDetector)
namespace perception
	namespace camera
		function DenselineLaneDetector::Init(const LaneDetectorInitOptions &)
		function DenselineLaneDetector::Detect(const LaneDetectorOptions &, CameraFrame *)
		function DenselineLaneDetector::Name() const
		function REGISTER_LANE_DETECTOR(DenselineLaneDetector)
namespace perception
	namespace camera
		variable spatialLUT
		variable spatialLUTind
		function GetPolyValue<T>(T, T, T, T, T)
		function DarkSCNNLanePostprocessor::Init(const LanePostprocessorInitOptions &)
		function DarkSCNNLanePostprocessor::Process2D(const LanePostprocessorOptions &, CameraFrame *)
		function DarkSCNNLanePostprocessor::Process3D(const LanePostprocessorOptions &, CameraFrame *)
		function DarkSCNNLanePostprocessor::ConvertImagePoint2Camera(CameraFrame *)
		function DarkSCNNLanePostprocessor::PolyFitCameraLaneline(CameraFrame *)
		function DarkSCNNLanePostprocessor::Name() const
		function REGISTER_LANE_POSTPROCESSOR(DarkSCNNLanePostprocessor)
namespace perception
	namespace camera
		function DenselineLanePostprocessor::Init(const LanePostprocessorInitOptions &)
		function DenselineLanePostprocessor::Process2D(const LanePostprocessorOptions &, CameraFrame *)
		function DenselineLanePostprocessor::Process3D(const LanePostprocessorOptions &, CameraFrame *)
		function DenselineLanePostprocessor::ConvertImagePoint2Camera(CameraFrame *)
		function DenselineLanePostprocessor::Name() const
		function DenselineLanePostprocessor::CalLaneMap(const float *, int, int, std::vector<unsigned char>*)
		function DenselineLanePostprocessor::InferPointSetFromLaneCenter(const std::vector<ConnectedComponent>&, const std::vector<LaneType>&, std::vector<std::vector<LanePointInfo>>*)
		function DenselineLanePostprocessor::InferPointSetFromOneCC(const ConnectedComponent &, int, int, std::vector<std::vector<LanePointInfo>>*)
		function DenselineLanePostprocessor::MaxScorePoint(const float *, const float *, const int *, int, LanePointInfo *)
		function DenselineLanePostprocessor::SelectLanecenterCCs(const std::vector<ConnectedComponent>&, std::vector<ConnectedComponent>*)
		function DenselineLanePostprocessor::LocateLanelinePointSet(const CameraFrame *)
		function DenselineLanePostprocessor::ClassifyLaneCCsPosTypeInImage(const std::vector<ConnectedComponent>&, std::vector<LaneType>*)
		function DenselineLanePostprocessor::ClassifyLanelinePosTypeInImage(const std::vector<std::vector<LanePointInfo>>&, std::vector<base::LaneLinePositionType>*, std::vector<bool>*)
		function DenselineLanePostprocessor::LocateNeighborLaneLine(const std::vector<float>&, int, bool, int *)
		function DenselineLanePostprocessor::Convert2OriginalCoord(const std::vector<std::vector<LanePointInfo>>&, std::vector<std::vector<LanePointInfo>>*)
		function DenselineLanePostprocessor::AddImageLaneline(const std::vector<LanePointInfo>&, const base::LaneLineType, const base::LaneLinePositionType, int, std::vector<base::LaneLine>*)
		function DenselineLanePostprocessor::PolyFitCameraLaneline(CameraFrame *)
		function DenselineLanePostprocessor::GetLanelinePointSet()
		function DenselineLanePostprocessor::GetAllInferLinePointSet()
		function DenselineLanePostprocessor::GetLaneCCs(std::vector<unsigned char>*, int *, int *, std::vector<ConnectedComponent>*, std::vector<ConnectedComponent>*)
		function REGISTER_LANE_POSTPROCESSOR(DenselineLanePostprocessor)
namespace perception
	namespace camera
		function PlaneMotion::PlaneMotion(int)
		function PlaneMotion::~PlaneMotion(void)
		function PlaneMotion::generate_motion_matrix(base::VehicleStatus *)
		function PlaneMotion::accumulate_motion(const double, const double)
		function PlaneMotion::update_motion_buffer(const base::VehicleStatus &, const double, const double)
		function PlaneMotion::find_motion_with_timestamp(double, base::VehicleStatus *)
		function PlaneMotion::get_buffer()
		function PlaneMotion::add_new_motion(double, double, int, base::VehicleStatus *)
namespace perception
	namespace camera
		function MotionService::Init()
		function MotionService::OnReceiveImage(const ImageMsgType &, const std::string &)
		function MotionService::OnLocalization(const LocalizationMsgType &)
		function MotionService::PublishEvent(const double)
		function MotionService::ConvertVehicleMotionToMsgOut(base::VehicleStatus, apollo::perception::VehicleStatus *)
		function MotionService::GetMotionBuffer()
		function MotionService::GetLatestTimestamp()
		function MotionService::GetMotionInformation(double, base::VehicleStatus *)
namespace perception
	namespace camera
		function SmokeObjectMaintainer::Add(int, base::ObjectPtr)
namespace perception
	namespace camera
		function filter_bbox(const SmokeMinDims &, std::vector<base::ObjectPtr>*)
		function recover_smoke_bbox(int, int, int, std::vector<base::ObjectPtr>*)
		function fill_smoke_base(base::ObjectPtr, const float *, int, int)
		function fill_smoke_bbox3d(bool, base::ObjectPtr, const float *)
		function get_smoke_object_subtype(int)
		function get_smoke_objects_cpu(const SmokeBlobs &, const std::vector<base::ObjectSubType>&, const smoke::ModelParam &, float, float, base::Blob<bool>*, base::Blob<int>*, std::vector<base::ObjectPtr>*, int, int)
namespace perception
	namespace camera
		function SmokeObstacleDetector::LoadInputShape(const smoke::ModelParam &)
		function SmokeObstacleDetector::LoadParam(const smoke::SmokeParam &)
		function SmokeObstacleDetector::InitNet(const smoke::SmokeParam &, const std::string &)
		function SmokeObstacleDetector::InitSmokeBlob(const smoke::NetworkParam &)
		function SmokeObstacleDetector::Init(const ObstacleDetectorInitOptions &)
		function SmokeObstacleDetector::InitFeatureExtractor(const std::string &)
		function SmokeObstacleDetector::Detect(const ObstacleDetectorOptions &, CameraFrame *)
		function REGISTER_OBSTACLE_DETECTOR(SmokeObstacleDetector)
namespace perception
	namespace camera
		function ObjectMaintainer::Add(int, base::ObjectPtr)
namespace perception
	namespace camera
		function get_intersect_bbox(const NormalizedBBox &, const NormalizedBBox &, NormalizedBBox *)
		function get_bbox_size(const NormalizedBBox &)
		function get_jaccard_overlap(const NormalizedBBox &, const NormalizedBBox &)
		function get_max_score_index(const std::vector<float>&, const float, const int, std::vector<std::pair<float,int>>*)
		function apply_softnms_fast(const std::vector<NormalizedBBox>&, std::vector<float>*, const float, const float, const int, std::vector<int>*, bool, const float)
		function apply_boxvoting_fast(std::vector<NormalizedBBox>*, std::vector<float>*, const float, const float, const float, std::vector<int>*)
		function apply_nms_fast(const std::vector<NormalizedBBox>&, const std::vector<float>&, const float, const float, const float, const int, std::vector<int>*)
		function filter_bbox(const MinDims &, std::vector<base::ObjectPtr>*)
		function recover_bbox(int, int, int, std::vector<base::ObjectPtr>*)
		function fill_base(base::ObjectPtr, const float *)
		function fill_bbox3d(bool, base::ObjectPtr, const float *)
		function fill_frbox(bool, base::ObjectPtr, const float *)
		function fill_lights(bool, base::ObjectPtr, const float *)
		function fill_ratios(bool, base::ObjectPtr, const float *)
		function fill_area_id(bool, base::ObjectPtr, const float *)
		function get_area_id(float [4])
		function get_cpu_data(bool, const base::Blob<float>&)
		function get_objects_cpu(const YoloBlobs &, const cudaStream_t &, const std::vector<base::ObjectSubType>&, const NMSParam &, const yolo::ModelParam &, float, float, base::Blob<bool>*, base::Blob<int>*, std::vector<base::ObjectPtr>*)
namespace perception
	namespace camera
		function YoloObstacleDetector::LoadInputShape(const yolo::ModelParam &)
		function YoloObstacleDetector::LoadParam(const yolo::YoloParam &)
		function YoloObstacleDetector::InitNet(const yolo::YoloParam &, const std::string &)
		function YoloObstacleDetector::InitYoloBlob(const yolo::NetworkParam &)
		function YoloObstacleDetector::Init(const ObstacleDetectorInitOptions &)
		function YoloObstacleDetector::InitFeatureExtractor(const std::string &)
		function YoloObstacleDetector::Detect(const ObstacleDetectorOptions &, CameraFrame *)
		function REGISTER_OBSTACLE_DETECTOR(YoloObstacleDetector)
namespace perception
	namespace camera
		function get_intersect_bbox(const NormalizedBBox &, const NormalizedBBox &, NormalizedBBox *)
		function get_bbox_size(const NormalizedBBox &)
		function get_jaccard_overlap(const NormalizedBBox &, const NormalizedBBox &)
		function get_max_score_index(const std::vector<float>&, const float, const int, std::vector<std::pair<float,int>>*)
		function apply_softnms_fast(const std::vector<NormalizedBBox>&, std::vector<float>*, const float, const float, const int, std::vector<int>*, bool, const float)
		function apply_boxvoting_fast(std::vector<NormalizedBBox>*, std::vector<float>*, const float, const float, const float, std::vector<int>*)
		function apply_nms_fast(const std::vector<NormalizedBBox>&, const std::vector<float>&, const float, const float, const float, const int, std::vector<int>*)
		function filter_bbox(const MinDims &, std::vector<base::ObjectPtr>*)
		function recover_bbox(int, int, int, std::vector<base::ObjectPtr>*)
		function fill_base(base::ObjectPtr, const float *)
		function fill_bbox3d(bool, base::ObjectPtr, const float *)
		function fill_frbox(bool, base::ObjectPtr, const float *)
		function fill_lights(bool, base::ObjectPtr, const float *)
		function fill_ratios(bool, base::ObjectPtr, const float *)
		function fill_area_id(bool, base::ObjectPtr, const float *)
		function get_area_id(float [4])
namespace perception
	namespace camera
		function Yolov4ObstacleDetector::LoadInputShape(const yolo::ModelParam &)
		function Yolov4ObstacleDetector::LoadParam(const yolo::YoloParam &)
		function Yolov4ObstacleDetector::InitNet(const yolo::YoloParam &, const std::string &)
		function Yolov4ObstacleDetector::InitYoloBlob(const yolo::NetworkParam &)
		function Yolov4ObstacleDetector::Init(const ObstacleDetectorInitOptions &)
		function Yolov4ObstacleDetector::InitFeatureExtractor(const std::string &)
		function Yolov4ObstacleDetector::Detect(const ObstacleDetectorOptions &, CameraFrame *)
		function REGISTER_OBSTACLE_DETECTOR(Yolov4ObstacleDetector)
namespace perception
	namespace camera
		function LocationRefinerObstaclePostprocessor::Init(const ObstaclePostprocessorInitOptions &)
		function LocationRefinerObstaclePostprocessor::Process(const ObstaclePostprocessorOptions &, CameraFrame *)
		function LocationRefinerObstaclePostprocessor::Name() const
		function REGISTER_OBSTACLE_POSTPROCESSOR(LocationRefinerObstaclePostprocessor)
namespace perception
	namespace camera
		function ObjPostProcessorParams::set_default()
		function ObjPostProcessor::PostProcessObjWithGround(const ObjPostProcessorOptions &, float [3], float [3], float *)
		function ObjPostProcessor::PostProcessObjWithDispmap(const ObjPostProcessorOptions &, float [3], float [3], float *)
		function ObjPostProcessor::AdjustCenterWithGround(const float *, const float *, float, const float *, float *) const
		function ObjPostProcessor::PostRefineCenterWithGroundBoundary(const float *, const float *, float, const float *, const std::vector<LineSegment2D<float>>&, float *, bool) const
		function ObjPostProcessor::GetDepthXPair(const float *, const float *, const float *, float, float *, int *, float *) const
namespace perception
	namespace camera
		function HalfCircleAngle::SetDirection(float)
		function HalfCircleAngle::operator=(const float &)
		function HalfCircleAngle::operator+(const float &) const
		function HalfCircleAngle::operator*(const float &) const
		function HalfCircleAngle::operator=(const HalfCircleAngle &)
		function HalfCircleAngle::operator==(const HalfCircleAngle &) const
		function HalfCircleAngle::operator==(const float &) const
		function HalfCircleAngle::value() const
namespace perception
	namespace camera
		function KalmanFilterConstVelocity::KalmanFilterConstVelocity()
		function KalmanFilterConstVelocity::Init(Eigen::VectorXd)
		function KalmanFilterConstVelocity::Predict(float)
		function KalmanFilterConstVelocity::MagicVelocity(const Eigen::VectorXd &)
		function KalmanFilterConstVelocity::Correct(const Eigen::VectorXd &)
		function KalmanFilterConstVelocity::get_state() const
		function KalmanFilterConstVelocity::MagicPosition(const Eigen::VectorXd &)
		function ExtendedKalmanFilter::Init()
		function ExtendedKalmanFilter::Init(Eigen::VectorXd)
		function ExtendedKalmanFilter::Predict(float)
		function ExtendedKalmanFilter::Correct(const Eigen::VectorXd &)
		function ExtendedKalmanFilter::get_state() const
		function MeanFilter::SetWindow(int)
		function MeanFilter::AddMeasure(const Eigen::VectorXd &)
		function MeanFilter::get_state() const
		function MeanFilter::get_variance() const
		function FirstOrderRCLowPassFilter::SetAlpha(float)
		function FirstOrderRCLowPassFilter::AddMeasure(const Eigen::VectorXd &)
		function FirstOrderRCLowPassFilter::get_state() const
		struct __unnamed_struct_3c9c_1
			operator operator()(Eigen::VectorXd, Eigen::VectorXd) const
		variable customLess
		function MaxNMeanFilter::SetWindow(int)
		function MaxNMeanFilter::AddMeasure(const Eigen::VectorXd &)
		function MaxNMeanFilter::get_state() const
		function MaxNMeanFilter::Clear()
namespace perception
	namespace camera
		function CosineSimilar::Calc(CameraFrame *, CameraFrame *, base::Blob<float>*)
namespace perception
	namespace camera
		function ObstacleReference::Init(const omt::ReferenceParam &, float, float)
		function ObstacleReference::UpdateReference(const CameraFrame *, const EigenVector<Target>&)
		function ObstacleReference::CorrectSize(CameraFrame *)
namespace perception
	namespace camera
		function OMTObstacleTracker::Init(const ObstacleTrackerInitOptions &)
		function OMTObstacleTracker::Name() const
		function OMTObstacleTracker::CombineDuplicateTargets()
		function OMTObstacleTracker::GenerateHypothesis(const TrackObjectPtrs &)
		function OMTObstacleTracker::ScoreMotion(const Target &, TrackObjectPtr)
		function OMTObstacleTracker::ScoreShape(const Target &, TrackObjectPtr)
		function OMTObstacleTracker::ScoreAppearance(const Target &, TrackObjectPtr)
		function OMTObstacleTracker::ScoreOverlap(const Target &, TrackObjectPtr)
		function OMTObstacleTracker::Predict(const ObstacleTrackerOptions &, CameraFrame *)
		function OMTObstacleTracker::CreateNewTarget(const TrackObjectPtrs &)
		function OMTObstacleTracker::Associate2D(const ObstacleTrackerOptions &, CameraFrame *)
		function OMTObstacleTracker::ClearTargets()
		function OMTObstacleTracker::Associate3D(const ObstacleTrackerOptions &, CameraFrame *)
		function OMTObstacleTracker::Track(const ObstacleTrackerOptions &, CameraFrame *)
		function ProjectBox(const base::BBox2DF &, const Eigen::Matrix3d &, base::BBox2DF *)
		function REGISTER_OBSTACLE_TRACKER(OMTObstacleTracker)
namespace perception
	namespace camera
		variable Target::global_track_id
		function Target::Size() const
		function Target::Clear()
		function Target::operator[](int) const
		function Target::get_object(int) const
		function Target::Add(TrackObjectPtr)
		function Target::RemoveOld(int)
		function Target::Init(const omt::TargetParam &)
		function Target::Target(const omt::TargetParam &)
		function Target::Predict(CameraFrame *)
		function Target::Update2D(CameraFrame *)
		function Target::Update3D(CameraFrame *)
		function Target::UpdateType(CameraFrame *)
		function Target::ClappingTrackVelocity(const base::ObjectPtr &)
		function Target::CheckStatic()
		function Target::isTracked() const
		function Target::isLost() const
namespace perception
	namespace camera
namespace perception
	namespace camera
		function MultiCueObstacleTransformer::Init(const ObstacleTransformerInitOptions &)
		function MultiCueObstacleTransformer::SetObjMapperOptions(base::ObjectPtr, Eigen::Matrix3f, int, int, ObjMapperOptions *, float *)
		function MultiCueObstacleTransformer::MatchTemplates(base::ObjectSubType, float *)
		function MultiCueObstacleTransformer::FillResults(float [3], float [3], float, Eigen::Affine3d, float, base::ObjectPtr)
		function MultiCueObstacleTransformer::Transform(const ObstacleTransformerOptions &, CameraFrame *)
		function MultiCueObstacleTransformer::Name() const
		function REGISTER_OBSTACLE_TRANSFORMER(MultiCueObstacleTransformer)
namespace perception
	namespace camera
		function ObjMapperParams::set_default()
		function ObjMapper::SolveCenterFromNearestVerticalEdge(const float *, const float *, float, float *, float *) const
		function ObjMapper::Solve3dBboxGivenOneFullBboxDimensionOrientation(const float *, const float *, float *, float *)
		function ObjMapper::Solve3dBbox(const ObjMapperOptions &, float [3], float [3], float *)
		function ObjMapper::PostRefineOrientation(const float *, const float *, const float *, float *)
		function ObjMapper::GetCenter(const float *, const float &, const float &, const float *, float *, float *) const
namespace perception
	namespace camera
		function TransformerParams::set_default()
		function SingleStageObstacleTransformer::Init(const ObstacleTransformerInitOptions &)
		function SingleStageObstacleTransformer::MatchTemplates(base::ObjectSubType, float *)
		function SingleStageObstacleTransformer::FillResults(float [3], float [3], float, Eigen::Affine3d, float, base::ObjectPtr)
		function SingleStageObstacleTransformer::Transform(const ObstacleTransformerOptions &, CameraFrame *)
		function SingleStageObstacleTransformer::CenterPointFromBbox(const float *, const float *, float, float *, float *, const float *, int, int)
		function SingleStageObstacleTransformer::ConstraintCenterPoint(const float *, const float &, const float &, const float *, const float *, float *, float *, int, int)
		function SingleStageObstacleTransformer::Name() const
		function REGISTER_OBSTACLE_TRANSFORMER(SingleStageObstacleTransformer)
namespace perception
	namespace camera
		function CropBox::getCropBox(const int, const int, const base::TrafficLightPtr &, base::RectI *)
		function CropBox::Init(float, int)
		function CropBox::CropBox(float, int)
		function CropBoxWholeImage::getCropBox(const int, const int, const base::TrafficLightPtr &, base::RectI *)
namespace perception
	namespace camera
		function TrafficLightDetection::Init(const camera::TrafficLightDetectorInitOptions &)
		function TrafficLightDetection::Inference(std::vector<base::TrafficLightPtr>*, DataProvider *)
		function TrafficLightDetection::Detect(const TrafficLightDetectorOptions &, CameraFrame *)
		function TrafficLightDetection::SelectOutputBoxes(const std::vector<base::RectI>&, const std::vector<float>&, const std::vector<float>&, std::vector<base::TrafficLightPtr>*)
		function TrafficLightDetection::ApplyNMS(std::vector<base::TrafficLightPtr>*, double)
		function TrafficLightDetection::Name() const
		function REGISTER_TRAFFIC_LIGHT_DETECTOR(TrafficLightDetection)
namespace perception
	namespace camera
		function Select::Init(int, int)
		function Select::Calc2dGaussianScore(base::Point2DI, base::Point2DI, float, float)
		function Select::SelectTrafficLights(const std::vector<base::TrafficLightPtr>&, std::vector<base::TrafficLightPtr>*)
namespace perception
	namespace camera
		function ClassifyBySimple::Init(const traffic_light::recognition::ClassifyParam &, const int, const std::string)
		function ClassifyBySimple::Perform(const CameraFrame *, std::vector<base::TrafficLightPtr>*)
		function ClassifyBySimple::Prob2Color(const float *, float, base::TrafficLightPtr)
namespace perception
	namespace camera
		function TrafficLightRecognition::Init(const TrafficLightDetectorInitOptions &)
		function TrafficLightRecognition::Detect(const TrafficLightDetectorOptions &, CameraFrame *)
		function TrafficLightRecognition::Name() const
		function REGISTER_TRAFFIC_LIGHT_DETECTOR(TrafficLightRecognition)
namespace perception
	namespace camera
		function MultiCamerasProjection::Init(const MultiCamerasInitOption &)
		function MultiCamerasProjection::Project(const CarPose &, const ProjectOption &, base::TrafficLight *) const
		function MultiCamerasProjection::HasCamera(const std::string &) const
		function MultiCamerasProjection::getImageWidth(const std::string &) const
		function MultiCamerasProjection::getImageHeight(const std::string &) const
		function MultiCamerasProjection::BoundaryBasedProject(const base::BrownCameraDistortionModelPtr, const Eigen::Matrix4d &, const std::vector<base::PointXYZID>&, base::TrafficLight *) const
namespace perception
	namespace camera
		function CarPose::Init(double, const Eigen::Matrix4d &)
		function CarPose::getCarPose() const
		function CarPose::getCarPosition() const
		function CarPose::SetCameraPose(const std::string &, const Eigen::Matrix4d &)
		function CarPose::GetCameraPose(const std::string &, Eigen::Matrix4d *) const
		function CarPose::ClearCameraPose(const std::string &)
		operator operator<<(std::ostream &, const CarPose &)
namespace perception
	namespace camera
		function TLPreprocessor::Init(const TrafficLightPreprocessorInitOptions &)
		function TLPreprocessor::UpdateCameraSelection(const CarPose &, const TLPreprocessorOption &, std::vector<base::TrafficLightPtr>*)
		function TLPreprocessor::SyncInformation(const double, const std::string &)
		function TLPreprocessor::UpdateLightsProjection(const CarPose &, const TLPreprocessorOption &, const std::string &, std::vector<base::TrafficLightPtr>*)
		function TLPreprocessor::SetCameraWorkingFlag(const std::string &, bool)
		function TLPreprocessor::GetCameraWorkingFlag(const std::string &, bool *) const
		function TLPreprocessor::SelectCamera(std::vector<base::TrafficLightPtrs>*, std::vector<base::TrafficLightPtrs>*, const TLPreprocessorOption &, std::string *)
		function TLPreprocessor::ProjectLights(const CarPose &, const std::string &, std::vector<base::TrafficLightPtr>*, base::TrafficLightPtrs *, base::TrafficLightPtrs *)
		function TLPreprocessor::ProjectLightsAndSelectCamera(const CarPose &, const TLPreprocessorOption &, std::string *, std::vector<base::TrafficLightPtr>*)
		function TLPreprocessor::GetAlllightsOutsideFlag() const
		function TLPreprocessor::Name() const
		function TLPreprocessor::GetMinFocalLenWorkingCameraName() const
		function TLPreprocessor::GetMaxFocalLenWorkingCameraName() const
namespace perception
	namespace camera
		variable s_color_strs
		function compare(const SemanticTable &, const SemanticTable &)
		function SemanticReviser::Init(const TrafficLightTrackerInitOptions &)
		function SemanticReviser::UpdateHistoryAndLights(const SemanticTable &, std::vector<base::TrafficLightPtr>*, std::vector<SemanticTable>::iterator *)
		function SemanticReviser::ReviseBySemantic(SemanticTable, std::vector<base::TrafficLightPtr>*)
		function SemanticReviser::ReviseLights(std::vector<base::TrafficLightPtr>*, const std::vector<int>&, base::TLColor)
		function SemanticReviser::ReviseByTimeSeries(double, SemanticTable, std::vector<base::TrafficLightPtr>*)
		function SemanticReviser::Track(const TrafficLightTrackerOptions &, CameraFrame *)
		function SemanticReviser::Name() const
		function REGISTER_TRAFFIC_LIGHT_TRACKER(SemanticReviser)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_string
namespace apollo
	namespace perception
		namespace camera
			function show_detect_point_set(const cv::Mat &, const std::vector<std::vector<LanePointInfo>>&, const std::string &)
			function show_all_infer_point_set(const cv::Mat &, const std::vector<LanePointInfo>&, const std::string &)
			function show_lane_lines(const cv::Mat &, const std::vector<base::LaneLine>&, const std::string &)
			function show_lane_ccs(const std::vector<unsigned char>&, const int, const int, const std::vector<ConnectedComponent>&, const std::vector<ConnectedComponent>&, const std::string &)
			function output_laneline_to_json(const std::vector<base::LaneLine>&, const std::string &)
			function output_laneline_to_txt(const std::vector<base::LaneLine>&, const std::string &)
			function show_detect_point_set(const cv::Mat &, const std::vector<base::Point2DF>&, const std::string &)
			function show_neighbor_point_set(const cv::Mat &, const std::vector<base::Point2DF>&, const std::vector<int>&, const std::string &)
			function show_detect_point_set(const cv::Mat &, const std::vector<base::Point2DF>&, const std::vector<float>&, const std::string &)
namespace perception
	namespace camera
		function lane_postprocessor_eval()
function main(int, char **)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
namespace apollo
	namespace perception
		namespace camera
			variable kBoxColorMap
			variable kFaceColorMap
			function GetObjectSubType(const std::string &)
			function LoadFromKitti(const std::string &, CameraFrame *)
			function main()
function main(int, char * [])
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_double
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_string
namespace apollo
	namespace perception
		namespace camera
			function REGISTER_OBSTACLE_DETECTOR(YoloObstacleDetector)
			function REGISTER_OBSTACLE_DETECTOR(SmokeObstacleDetector)
			function REGISTER_OBSTACLE_TRACKER(OMTObstacleTracker)
			function REGISTER_FEATURE_EXTRACTOR(TrackingFeatureExtractor)
			function REGISTER_OBSTACLE_TRANSFORMER(MultiCueObstacleTransformer)
			function REGISTER_OBSTACLE_POSTPROCESSOR(LocationRefinerObstaclePostprocessor)
			function REGISTER_FEATURE_EXTRACTOR(ProjectFeature)
			function REGISTER_FEATURE_EXTRACTOR(ExternalFeatureExtractor)
			function REGISTER_LANE_POSTPROCESSOR(DenselineLanePostprocessor)
			function REGISTER_LANE_DETECTOR(DenselineLaneDetector)
			function REGISTER_CALIBRATOR(LaneLineCalibrator)
			function REGISTER_CALIBRATION_SERVICE(OnlineCalibrationService)
			function REGISTER_LANE_DETECTOR(DarkSCNNLaneDetector)
			function REGISTER_LANE_POSTPROCESSOR(DarkSCNNLanePostprocessor)
			variable kDefaultPitchAngle
			variable kDefaultCameraHeight
			function save_image(const std::string &, base::Image8U &)
			function work()
function main(int, char * [])
namespace perception
	namespace camera
		function TransformServer::Init(const std::vector<std::string>&, const std::string &)
		function TransformServer::LoadFromFile(const std::string &, float)
		function TransformServer::QueryPos(double, Eigen::Affine3d *)
		function TransformServer::AddTransform(const std::string &, const std::string &, const Eigen::Affine3d &)
		function TransformServer::QueryTransform(const std::string &, const std::string &, Eigen::Affine3d *)
		function TransformServer::FindTransform(const std::string &, const std::string &, Eigen::Affine3d *, std::map<std::string,bool>*)
		function TransformServer::print()
namespace perception
	namespace camera
		variable colorlistobj
		variable colormapline
		function Camera2CarHomograph(Eigen::Matrix3d, Eigen::Matrix4d, Eigen::Matrix4d, double)
		function Visualizer::Init(const std::vector<std::string>&, TransformServer *)
		function Visualizer::Init_all_info_single_camera(const std::vector<std::string>&, const std::string &, const EigenMap<std::string,Eigen::Matrix3f>&, const EigenMap<std::string,Eigen::Matrix4d>&, const Eigen::Matrix4d &, const double, const double, const double, const int, const int)
		function Visualizer::adjust_angles(const std::string &, const double, const double, const double)
		function Visualizer::SetDirectory(const std::string &)
		function Visualizer::type_to_string(const base::ObjectType)
		function Visualizer::sub_type_to_string(const base::ObjectSubType)
		function Visualizer::reset_key()
		function Visualizer::regularize_angle(const double)
		function Visualizer::euler_to_quaternion(Eigen::Vector4d *, const double, const double, const double)
		function Visualizer::copy_backup_file(const std::string &)
		function Visualizer::save_extrinsic_in_yaml(const std::string &, const Eigen::Matrix4d &, const Eigen::Vector4d &, const double, const double, const double)
		function Visualizer::save_manual_calibration_parameter(const std::string &, const double, const double, const double)
		function Visualizer::key_handler(const std::string &, const int)
		function Visualizer::DrawTrajectories(const base::ObjectPtr &, const base::MotionBufferPtr)
		function Visualizer::Draw2Dand3D(const cv::Mat &, const CameraFrame &)
		function Visualizer::ShowResult(const cv::Mat &, const CameraFrame &)
		function Visualizer::Draw2Dand3D_all_info_single_camera(const std::string &, const cv::Mat &, const CameraFrame &, const Eigen::Matrix3d &, const Eigen::Matrix4d &, const Eigen::Affine3d &, const base::MotionBufferPtr)
		function Visualizer::ShowResult_all_info_single_camera(const cv::Mat &, const CameraFrame &, const base::MotionBufferPtr, const Eigen::Affine3d &)
		function Visualizer::draw_range_circle()
		function Visualizer::draw_selected_image_boundary(const int, int const, cv::Mat *)
		function Visualizer::world_point_to_bigimg(const Eigen::Vector2d &)
		function Visualizer::world_point_to_bigimg(const Eigen::Vector4f &)
		function Visualizer::image2ground(const std::string &, cv::Point)
		function Visualizer::ground2image(const std::string &, Eigen::Vector2d)
namespace perception
	namespace common
		function PointCamera1ToCamera2(const Eigen::Vector2d &, const Eigen::Matrix3d &, const Eigen::Matrix3d &, const Eigen::Matrix3d &, Eigen::Vector2d *)
		function IsCamerasFieldOverlap(const base::PinholeCameraModel &, const base::PinholeCameraModel &, const Eigen::Matrix4d &, Eigen::Vector2d *, Eigen::Vector2d *)
namespace perception
	namespace common
		interface HdmapStructConstPtr
		interface ObjectConstPtr
		interface ObjectPtr
		function IsPtInRoi(const HdmapStructConstPtr, const PointD)
		function IsObjectInRoi(const HdmapStructConstPtr, const ObjectConstPtr)
		function IsObjectBboxInRoi(const HdmapStructConstPtr, const ObjectConstPtr)
		function ObjectInRoiCheck(const HdmapStructConstPtr, const std::vector<ObjectPtr>&, std::vector<ObjectPtr>*)
namespace perception
	namespace common
		function ConnectedComponentAnalysis(const std::vector<std::vector<int>>&, std::vector<std::vector<int>>*)
namespace perception
	namespace common
		function Universe::Universe(const int)
		function Universe::Reset(const int)
		function Universe::Find(const int)
		function Universe::Join(const int, const int)
namespace perception
	namespace common
		namespace `anonymous-namespace'
			function GetThreshold(const size_t, const float)
		function GraphSegmentor::Init(const float)
		function GraphSegmentor::SegmentGraph(const int, const int, Edge *, bool)
namespace perception
	namespace common
		function PlaneFitGroundDetectorParam::SetDefault()
		function PlaneFitGroundDetectorParam::Validate() const
		function PlaneFitPointCandIndices::Prune(unsigned int, unsigned int)
		function PlaneFitGroundDetector::PlaneFitGroundDetector(const PlaneFitGroundDetectorParam &)
		function PlaneFitGroundDetector::~PlaneFitGroundDetector()
		function PlaneFitGroundDetector::InitOrderTable(const VoxelGridXY<float>*, std::pair<int,int>*)
		function PlaneFitGroundDetector::Init()
		function PlaneFitGroundDetector::CleanUp()
		function PlaneFitGroundDetector::CompareZ(const float *, const std::vector<int>&, const float *, PlaneFitPointCandIndices *, unsigned int, unsigned int, unsigned int)
		function PlaneFitGroundDetector::ComputeAdaptiveThreshold()
		function PlaneFitGroundDetector::ComputeSignedGroundHeight(const float *, float *, unsigned int, unsigned int)
		function PlaneFitGroundDetector::ComputeSignedGroundHeightLine(const float *, const GroundPlaneLiDAR *, const GroundPlaneLiDAR *, const GroundPlaneLiDAR *, float *, unsigned int, unsigned int, unsigned int)
		function PlaneFitGroundDetector::FilterGrid(const Voxel<float>&, const float *, PlaneFitPointCandIndices *, unsigned int, unsigned int)
		function PlaneFitGroundDetector::FilterLine(unsigned int)
		function PlaneFitGroundDetector::Filter()
		function PlaneFitGroundDetector::FitGrid(const float *, PlaneFitPointCandIndices *, GroundPlaneLiDAR *, unsigned int, unsigned int, float)
		function PlaneFitGroundDetector::FitLine(unsigned int)
		function PlaneFitGroundDetector::Fit()
		function PlaneFitGroundDetector::FilterCandidates(int, int, const float *, PlaneFitPointCandIndices *, std::vector<std::pair<int,int>>*, unsigned int)
		function PlaneFitGroundDetector::FitGridWithNeighbors(int, int, const float *, GroundPlaneLiDAR *, unsigned int, unsigned int, float)
		function PlaneFitGroundDetector::CalculateAngleDist(const GroundPlaneLiDAR &, const std::vector<std::pair<int,int>>&)
		function PlaneFitGroundDetector::FitInOrder()
		function PlaneFitGroundDetector::GetNeighbors(int, int, int, int, std::vector<std::pair<int,int>>*)
		function PlaneFitGroundDetector::SmoothLine(unsigned int, unsigned int, unsigned int)
		function PlaneFitGroundDetector::CompleteGrid(const GroundPlaneSpherical &, const GroundPlaneSpherical &, const GroundPlaneSpherical &, const GroundPlaneSpherical &, GroundPlaneSpherical *)
		function PlaneFitGroundDetector::SmoothGrid(const GroundPlaneSpherical &, const GroundPlaneSpherical &, const GroundPlaneSpherical &, const GroundPlaneSpherical &, const GroundPlaneSpherical &, GroundPlaneSpherical *)
		function PlaneFitGroundDetector::Smooth()
		function PlaneFitGroundDetector::Detect(const float *, float *, unsigned int, unsigned int)
		function PlaneFitGroundDetector::GetLabel() const
		function PlaneFitGroundDetector::GetGrid() const
		function PlaneFitGroundDetector::GetGroundPlane(int, int) const
		function PlaneFitGroundDetector::GetGridDimX() const
		function PlaneFitGroundDetector::GetGridDimY() const
		function PlaneFitGroundDetector::GetUnknownHeight()
		function PlaneFitGroundDetector::GetCandis() const
		function calculate_two_angles(const GroundPlaneLiDAR &, const GroundPlaneLiDAR &)
		function IPlaneEucliToSpher(const GroundPlaneLiDAR &, GroundPlaneSpherical *)
		function IPlaneSpherToEucli(const GroundPlaneSpherical &, GroundPlaneLiDAR *)
namespace perception
	namespace common
		function HoughTransfer::HoughTransfer()
		function HoughTransfer::Init(int, int, float, float)
		function HoughTransfer::ImageVote(const std::vector<int>&, bool)
		function HoughTransfer::PointVote(int, int, bool)
		function HoughTransfer::PointVote(int, bool)
		function HoughTransfer::GetLines(int, int, int, bool, std::vector<HoughLine>*) const
		function HoughTransfer::MemoryConsume() const
		function HoughTransfer::FreeCache()
		function HoughTransfer::ResetMaps(bool)
		function HoughTransfer::ClearWithShrink()
		function HoughTransfer::CheckPrepared() const
		function HoughTransfer::GetMaxVotes(int, int, int, int, int, std::set<int>*) const
		function HoughTransfer::VotePosToHoughLine(int, bool, HoughLine *) const
namespace perception
	namespace common
		function ReadPoseFile(const std::string &, Eigen::Affine3d *, int *, double *)
		function LoadBrownCameraIntrinsic(const std::string &, base::BrownCameraDistortionModel *)
		function LoadOmnidirectionalCameraIntrinsics(const std::string &, base::OmnidirectionalCameraDistortionModel *)
		function GetFileList(const std::string &, const std::string &, std::vector<std::string>*)
namespace perception
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_bool
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_int32
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_double
	variable DEFINE_int32
	variable DEFINE_bool
	variable DEFINE_double
	variable DEFINE_bool
	variable DEFINE_int32
	variable DEFINE_bool
	variable DEFINE_double
	variable DEFINE_double
	variable DEFINE_double
	variable DEFINE_bool
	variable DEFINE_int32
	variable DEFINE_double
	variable DEFINE_bool
	variable DEFINE_int32
	variable DEFINE_bool
	variable DEFINE_double
	variable DEFINE_double
	variable DEFINE_int32
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_string
	variable DEFINE_int32
	variable DEFINE_string
	variable DEFINE_string
namespace perception
	namespace common
		function SensorManager::SensorManager()
		function SensorManager::Init()
		function SensorManager::IsSensorExist(const std::string &) const
		function SensorManager::GetSensorInfo(const std::string &, SensorInfo *) const
		function SensorManager::GetDistortCameraModel(const std::string &) const
		function SensorManager::GetUndistortCameraModel(const std::string &) const
		function SensorManager::IsHdLidar(const std::string &) const
		function SensorManager::IsHdLidar(const SensorType &) const
		function SensorManager::IsLdLidar(const std::string &) const
		function SensorManager::IsLdLidar(const SensorType &) const
		function SensorManager::IsLidar(const std::string &) const
		function SensorManager::IsLidar(const SensorType &) const
		function SensorManager::IsRadar(const std::string &) const
		function SensorManager::IsRadar(const SensorType &) const
		function SensorManager::IsCamera(const std::string &) const
		function SensorManager::IsCamera(const SensorType &) const
		function SensorManager::IsUltrasonic(const std::string &) const
		function SensorManager::IsUltrasonic(const SensorType &) const
		function SensorManager::GetFrameId(const std::string &) const
namespace perception
	namespace fusion
		function ObstacleMultiSensorFusion::Init(const ObstacleMultiSensorFusionParam &)
		function ObstacleMultiSensorFusion::Process(const base::FrameConstPtr &, std::vector<base::ObjectPtr>*)
namespace perception
	namespace fusion
		function GetFusionInitOptions(const std::string &, BaseInitOptions *)
namespace perception
	namespace fusion
		function Scene::Scene()
		function Scene::~Scene()
		function Scene::AddForegroundTrack(TrackPtr)
		function Scene::AddBackgroundTrack(TrackPtr)
namespace perception
	namespace fusion
		variable Sensor::kMaxCachedFrameNum
		function Sensor::QueryLatestFrames(double, std::vector<SensorFramePtr>*)
		function Sensor::QueryLatestFrame(double)
		function Sensor::GetPose(double, Eigen::Affine3d *) const
		function Sensor::AddFrame(const base::FrameConstPtr &)
namespace perception
	namespace fusion
		function SensorDataManager::SensorDataManager()
		function SensorDataManager::Init()
		function SensorDataManager::Reset()
		function SensorDataManager::AddSensorMeasurements(const base::FrameConstPtr &)
		function SensorDataManager::IsLidar(const base::FrameConstPtr &)
		function SensorDataManager::IsRadar(const base::FrameConstPtr &)
		function SensorDataManager::IsCamera(const base::FrameConstPtr &)
		function SensorDataManager::GetLatestSensorFrames(double, const std::string &, std::vector<SensorFramePtr>*) const
		function SensorDataManager::GetLatestFrames(double, std::vector<SensorFramePtr>*) const
		function SensorDataManager::GetPose(const std::string &, double, Eigen::Affine3d *) const
		function SensorDataManager::GetCameraIntrinsic(const std::string &) const
namespace perception
	namespace fusion
		function SensorFrame::SensorFrame()
		function SensorFrame::SensorFrame(const base::FrameConstPtr &)
		function SensorFrame::Initialize(const base::FrameConstPtr &)
		function SensorFrame::Initialize(const base::FrameConstPtr &, const SensorPtr &)
		function SensorFrame::GetSensorId() const
		function SensorFrame::GetSensorType() const
namespace perception
	namespace fusion
		function SensorObject::SensorObject(const std::shared_ptr<const base::Object>&)
		function SensorObject::SensorObject(const std::shared_ptr<const base::Object>&, const std::shared_ptr<const SensorFrameHeader>&)
		function SensorObject::SensorObject(const std::shared_ptr<const base::Object>&, const std::shared_ptr<SensorFrame>&)
		function SensorObject::GetTimestamp() const
		function SensorObject::GetRelatedFramePose(Eigen::Affine3d *) const
		function SensorObject::GetSensorId() const
		function SensorObject::GetSensorType() const
		function FusedObject::FusedObject()
		function IsLidar(const SensorObjectConstPtr &)
		function IsRadar(const SensorObjectConstPtr &)
		function IsCamera(const SensorObjectConstPtr &)
namespace perception
	namespace fusion
		variable Track::s_track_idx_
		variable Track::s_max_lidar_invisible_period_
		variable Track::s_max_radar_invisible_period_
		variable Track::s_max_camera_invisible_period_
		function Track::Track()
		function Track::Initialize(SensorObjectPtr, bool)
		function Track::Reset()
		function Track::GetSensorObject(const std::string &) const
		function Track::GetLatestLidarObject() const
		function Track::GetLatestRadarObject() const
		function Track::GetLatestCameraObject() const
		function Track::GetLatestSensorObject(const SensorId2ObjectMap &) const
		function Track::GenerateNewTrackId()
		function Track::UpdateSensorObject(SensorId2ObjectMap *, const SensorObjectPtr &)
		function Track::UpdateWithSensorObject(const SensorObjectPtr &)
		function Track::UpdateWithoutSensorObject(const std::string &, double)
		function Track::UpdateSensorObjectWithoutMeasurement(SensorId2ObjectMap *, const std::string &, double, double)
		function Track::UpdateSensorObjectWithMeasurement(SensorId2ObjectMap *, const std::string &, double, double)
		function Track::UpdateSupplementState(const SensorObjectPtr &)
		function Track::UpdateUnfusedState(const SensorObjectPtr &)
		function Track::IsVisible(const std::string &) const
		function Track::IsLidarVisible() const
		function Track::IsRadarVisible() const
		function Track::IsCameraVisible() const
		function Track::UpdateWithSensorObjectForBackground(const SensorObjectPtr &)
		function Track::UpdateWithoutSensorObjectForBackground(const std::string &, double)
		function Track::DebugString() const
namespace perception
	namespace fusion
		function FusionPoolInitialize()
namespace perception
	namespace fusion
		function GetObjectEightVertices(std::shared_ptr<const base::Object>, std::vector<Eigen::Vector3d>*)
		function Pt3dToCamera2d(const Eigen::Vector3d &, const Eigen::Matrix4d &, base::BaseCameraModelPtr, Eigen::Vector2d *)
		function IsObjectEightVerticesAllBehindCamera(const std::shared_ptr<const base::Object>&, const Eigen::Matrix4d &, base::BaseCameraModelPtr)
		function ObjectInCameraView(SensorObjectConstPtr, base::BaseCameraModelPtr, const Eigen::Affine3d &, double, double, bool, bool)
namespace perception
	namespace fusion
		function DstManager::AddApp(const std::string &, const std::vector<uint64_t>&, const std::vector<std::string>&)
		function DstManager::IsAppAdded(const std::string &)
		function DstManager::GetAppDataPtr(const std::string &)
		function DstManager::FodSubsetToInd(const std::string &, const uint64_t &)
		function DstManager::IndToFodSubset(const std::string &, const size_t &)
		function DstManager::BuildSubsetsIndMap(DstCommonData *)
		function DstManager::FodCheck(DstCommonData *)
		function DstManager::ComputeCardinalities(DstCommonData *)
		function DstManager::ComputeRelations(DstCommonData *)
		function DstManager::BuildNamesMap(const std::vector<std::string>&, DstCommonData *)
		function Dst::Dst(const std::string &)
		function Dst::SelfCheck() const
		function Dst::GetSubsetBfmass(uint64_t) const
		function Dst::GetIndBfmass(size_t) const
		function Dst::SetBbaVec(const std::vector<double>&)
		function Dst::SetBba(const std::map<uint64_t,double>&)
		function Dst::PrintBba() const
		function Dst::ComputeSptPlsUct() const
		function Dst::ComputeProbability() const
		function Dst::Normalize()
		operator operator+(const Dst &, const Dst &)
		operator operator*(const Dst &, double)
namespace perception
	namespace fusion
		function InformationFilter::InformationFilter()
		function InformationFilter::Init(const Eigen::VectorXd &, const Eigen::MatrixXd &)
		function InformationFilter::SetLastObservation(const Eigen::VectorXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &, const Eigen::MatrixXd &)
		function InformationFilter::Predict(const Eigen::MatrixXd &, const Eigen::MatrixXd &)
		function InformationFilter::Correct(const Eigen::VectorXd &, const Eigen::MatrixXd &)
		function InformationFilter::SetControlMatrix(const Eigen::MatrixXd &)
namespace perception
	namespace fusion
		function KalmanFilter::KalmanFilter()
		function KalmanFilter::Init(const Eigen::VectorXd &, const Eigen::MatrixXd &)
		function KalmanFilter::Predict(const Eigen::MatrixXd &, const Eigen::MatrixXd &)
		function KalmanFilter::Correct(const Eigen::VectorXd &, const Eigen::MatrixXd &)
		function KalmanFilter::SetControlMatrix(const Eigen::MatrixXd &)
		function KalmanFilter::GetStates() const
		function KalmanFilter::GetUncertainty() const
		function KalmanFilter::SetGainBreakdownThresh(const std::vector<bool>&, const float)
		function KalmanFilter::SetValueBreakdownThresh(const std::vector<bool>&, const float)
		function KalmanFilter::CorrectionBreakdown()
		function KalmanFilter::DeCorrelation(int, int, int, int)
namespace perception
	namespace fusion
		variable HMTrackersObjectsAssociation::s_match_distance_thresh_
		variable HMTrackersObjectsAssociation::s_match_distance_bound_
		variable HMTrackersObjectsAssociation::s_association_center_dist_threshold_
		function HMTrackersObjectsAssociation::Associate(const AssociationOptions &, SensorFramePtr, ScenePtr, AssociationResult *)
		function HMTrackersObjectsAssociation::PostIdAssign(const std::vector<TrackPtr>&, const std::vector<SensorObjectPtr>&, const std::vector<size_t>&, const std::vector<size_t>&, std::vector<TrackMeasurmentPair>*)
		function HMTrackersObjectsAssociation::MinimizeAssignment(const std::vector<std::vector<double>>&, const std::vector<size_t>&, const std::vector<size_t>&, std::vector<TrackMeasurmentPair>*, std::vector<size_t>*, std::vector<size_t>*)
		function HMTrackersObjectsAssociation::ComputeDistance(const std::vector<TrackPtr>&, const std::vector<SensorObjectPtr>&, const std::vector<size_t>&, const std::vector<int>&, const std::vector<int>&, const std::vector<size_t>&, const std::vector<std::vector<double>>&, AssociationResult *)
		function HMTrackersObjectsAssociation::ComputeAssociationDistanceMat(const std::vector<TrackPtr>&, const std::vector<SensorObjectPtr>&, const Eigen::Vector3d &, const std::vector<size_t>&, const std::vector<size_t>&, std::vector<std::vector<double>>*)
		function HMTrackersObjectsAssociation::IdAssign(const std::vector<TrackPtr>&, const std::vector<SensorObjectPtr>&, std::vector<TrackMeasurmentPair>*, std::vector<size_t>*, std::vector<size_t>*, bool, bool)
		function HMTrackersObjectsAssociation::GenerateUnassignedData(size_t, size_t, const std::vector<TrackMeasurmentPair>&, std::vector<size_t>*, std::vector<size_t>*)
		function extract_vector<T>(const std::vector<T>&, const std::vector<size_t>&, std::vector<T>*)
namespace perception
	namespace fusion
		function BoundedScalePositiveProbability(double, double, double)
		function ScalePositiveProbability(double, double, double)
		function WelshVarLossFun(double, double, double)
		function FuseTwoProbabilities(double, double)
		function FuseMultipleProbabilities(const std::vector<double>&)
namespace perception
	namespace fusion
		variable TrackObjectDistance::s_lidar2lidar_association_center_dist_threshold_
		variable TrackObjectDistance::s_lidar2radar_association_center_dist_threshold_
		variable TrackObjectDistance::s_radar2radar_association_center_dist_threshold_
		variable TrackObjectDistance::s_lidar2camera_projection_downsample_target_pts_num_
		variable TrackObjectDistance::s_lidar2camera_projection_vertices_check_pts_num_
		function TrackObjectDistance::GetModified2DRadarBoxVertices(const std::vector<Eigen::Vector3d>&, const SensorObjectConstPtr &, const base::BaseCameraModelPtr &, const Eigen::Matrix4d &, std::vector<Eigen::Vector2d>*)
		function TrackObjectDistance::QueryCameraModel(const SensorObjectConstPtr &)
		function TrackObjectDistance::QueryWorld2CameraPose(const SensorObjectConstPtr &, Eigen::Matrix4d *)
		function TrackObjectDistance::QueryLidar2WorldPose(const SensorObjectConstPtr &, Eigen::Matrix4d *)
		function TrackObjectDistance::BuildProjectionCacheObject(const SensorObjectConstPtr &, const SensorObjectConstPtr &, const base::BaseCameraModelPtr &, const std::string &, double, const std::string &, double)
		function TrackObjectDistance::QueryProjectionCacheObject(const SensorObjectConstPtr &, const SensorObjectConstPtr &, const base::BaseCameraModelPtr &, const bool)
		function TrackObjectDistance::QueryProjectedVeloCtOnCamera(const SensorObjectConstPtr &, const SensorObjectConstPtr &, const Eigen::Matrix4d &, Eigen::Vector3d *)
		function TrackObjectDistance::QueryPolygonDCenter(const base::ObjectConstPtr &, const Eigen::Vector3d &, const int, Eigen::Vector3d *)
		function TrackObjectDistance::IsTrackIdConsistent(const SensorObjectConstPtr &, const SensorObjectConstPtr &)
		function TrackObjectDistance::LidarCameraCenterDistanceExceedDynamicThreshold(const SensorObjectConstPtr &, const SensorObjectConstPtr &)
		function TrackObjectDistance::Compute(const TrackPtr &, const SensorObjectPtr &, const TrackObjectDistanceOptions &)
		function TrackObjectDistance::ComputeLidarLidar(const SensorObjectConstPtr &, const SensorObjectPtr &, const Eigen::Vector3d &, int)
		function TrackObjectDistance::ComputeLidarRadar(const SensorObjectConstPtr &, const SensorObjectPtr &, const Eigen::Vector3d &, int)
		function TrackObjectDistance::ComputeRadarRadar(const SensorObjectPtr &, const SensorObjectPtr &, const Eigen::Vector3d &, int)
		function TrackObjectDistance::ComputeLidarCamera(const SensorObjectConstPtr &, const SensorObjectConstPtr &, const bool, const bool)
		function TrackObjectDistance::ComputeRadarCamera(const SensorObjectConstPtr &, const SensorObjectConstPtr &)
		function TrackObjectDistance::ComputeCameraCamera(const SensorObjectPtr &, const SensorObjectPtr &)
		function TrackObjectDistance::ComputeLidarCameraSimilarity(const SensorObjectConstPtr &, const SensorObjectConstPtr &, const bool)
		function TrackObjectDistance::ComputeRadarCameraSimilarity(const SensorObjectConstPtr &, const SensorObjectConstPtr &)
		function TrackObjectDistance::ComputePolygonDistance3d(const SensorObjectConstPtr &, const SensorObjectPtr &, const Eigen::Vector3d &, int)
		function TrackObjectDistance::ComputeEuclideanDistance(const Eigen::Vector3d &, const Eigen::Vector3d &)
		function TrackObjectDistance::ComputePolygonCenter(const base::PolygonDType &, Eigen::Vector3d *)
		function TrackObjectDistance::ComputePolygonCenter(const base::PolygonDType &, const Eigen::Vector3d &, int, Eigen::Vector3d *)
namespace apollo
	namespace perception
		namespace fusion
			function ComputePtsBoxLocationSimilarity(const ProjectionCachePtr &, const ProjectionCacheObject *, const base::BBox2DF &)
			function ComputePtsBoxShapeSimilarity(const ProjectionCachePtr &, const ProjectionCacheObject *, const base::BBox2DF &)
			function ComputePtsBoxSimilarity(const ProjectionCachePtr &, const ProjectionCacheObject *, const base::BBox2DF &)
			function ComputeRadarCameraXSimilarity(const double, const double, const double, const XSimilarityParams &)
			function ComputeRadarCameraYSimilarity(const double, const double, const double, const YSimilarityParams &)
			function ComputeRadarCameraHSimilarity(const SensorObjectConstPtr &, const SensorObjectConstPtr &, const double, const std::vector<Eigen::Vector2d>&, const HSimilarityParams &)
			function ComputeRadarCameraWSimilarity(const SensorObjectConstPtr &, const double, const double, const std::vector<Eigen::Vector2d>&, const WSimilarityParams &)
			function ComputeRadarCameraLocSimilarity(const Eigen::Vector3d &, const SensorObjectConstPtr &, const Eigen::Matrix4d &, const LocSimilarityParams &)
			function ComputeRadarCameraVelocitySimilarity(const SensorObjectConstPtr &, const SensorObjectConstPtr &)
namespace perception
	namespace fusion
		variable DstExistenceFusion::name_
		variable DstExistenceFusion::toic_name_
		variable DstExistenceFusion::existence_dst_maps_
		variable DstExistenceFusion::toic_dst_maps_
		variable DstExistenceFusion::options_
		function DstExistenceFusion::DstExistenceFusion(TrackPtr)
		function DstExistenceFusion::Init()
		function DstExistenceFusion::UpdateWithMeasurement(const SensorObjectPtr, double, double)
		function DstExistenceFusion::UpdateWithoutMeasurement(const std::string &, double, double, double)
		function DstExistenceFusion::ComputeDistDecay(base::ObjectConstPtr, const std::string &, double)
		function DstExistenceFusion::ComputeFeatureInfluence(const SensorObjectPtr)
		function DstExistenceFusion::GetExistReliability(const SensorObjectPtr)
		function DstExistenceFusion::GetUnexistReliability(const std::string &)
		function DstExistenceFusion::UpdateToicWithoutCameraMeasurement(const std::string &, double, double)
		function DstExistenceFusion::UpdateToicWithCameraMeasurement(const SensorObjectPtr &, double)
		function DstExistenceFusion::Name() const
		function DstExistenceFusion::GetExistenceProbability() const
		function DstExistenceFusion::GetToicProbability() const
		function DstExistenceFusion::UpdateExistenceState()
namespace apollo
	namespace perception
		namespace fusion
			variable KalmanMotionFusion::s_eval_window_
			variable KalmanMotionFusion::s_history_size_maximum_
			function KalmanMotionFusion::Init()
			function KalmanMotionFusion::InitFilter(const SensorObjectConstPtr &)
			function KalmanMotionFusion::GetStates(Eigen::Vector3d *, Eigen::Vector3d *)
			function KalmanMotionFusion::UpdateWithoutMeasurement(const std::string &, double, double)
			function KalmanMotionFusion::UpdateWithMeasurement(const SensorObjectConstPtr &, double)
			function KalmanMotionFusion::MotionFusionWithoutMeasurement(const double)
			function KalmanMotionFusion::MotionFusionWithMeasurement(const SensorObjectConstPtr &, double)
			function KalmanMotionFusion::UpdateMotionState()
			function KalmanMotionFusion::ComputeAccelerationMeasurement(const base::SensorType &, const Eigen::Vector3d &, const double &)
			function KalmanMotionFusion::RewardRMatrix(const base::SensorType &, const bool &, Eigen::MatrixXd *)
			function KalmanMotionFusion::ComputePseudoMeasurement(const Eigen::Vector4d &, const base::SensorType &)
			function KalmanMotionFusion::ComputePseudoLidarMeasurement(const Eigen::Vector4d &)
			function KalmanMotionFusion::ComputePseudoCameraMeasurement(const Eigen::Vector4d &)
			function KalmanMotionFusion::ComputePseudoRadarMeasurement(const Eigen::Vector4d &)
			function KalmanMotionFusion::UpdateSensorHistory(const base::SensorType &, const Eigen::Vector3d &, const double &)
			function KalmanMotionFusion::GetSensorHistoryLength(const base::SensorType &)
			function KalmanMotionFusion::GetSensorHistoryIndex(const base::SensorType &, const int &)
namespace perception
	namespace fusion
		variable PbfShapeFusion::s_use_camera_3d_
		variable PbfShapeFusion::s_camera_radar_time_diff_th_
		function PbfShapeFusion::Init()
		function PbfShapeFusion::UpdateWithMeasurement(const SensorObjectPtr, double)
		function PbfShapeFusion::UpdateWithoutMeasurement(const std::string &, double, double)
		function PbfShapeFusion::Name() const
		function PbfShapeFusion::UpdateState(const SensorObjectConstPtr &)
		function PbfShapeFusion::UpdateShape(const SensorObjectConstPtr &)
		function PbfShapeFusion::UpdateCenter(const SensorObjectConstPtr &)
namespace perception
	namespace fusion
		variable PbfTracker::s_type_fusion_method_
		variable PbfTracker::s_existence_fusion_method_
		variable PbfTracker::s_motion_fusion_method_
		variable PbfTracker::s_shape_fusion_method_
		function PbfTracker::PbfTracker()
		function PbfTracker::~PbfTracker()
		function PbfTracker::InitParams()
		function PbfTracker::InitMethods()
		function PbfTracker::Init(TrackPtr, SensorObjectPtr)
		function PbfTracker::UpdateWithMeasurement(const TrackerOptions &, const SensorObjectPtr, double)
		function PbfTracker::UpdateWithoutMeasurement(const TrackerOptions &, const std::string &, double, double)
		function PbfTracker::Name() const
namespace perception
	namespace fusion
		function vector2string<Type>(const std::vector<Type>&)
		variable DstTypeFusion::name_
		variable DstTypeFusion::dst_maps_
		variable DstTypeFusion::options_
		function DstTypeFusion::DstTypeFusion(TrackPtr)
		function DstTypeFusion::Init()
		function DstTypeFusion::UpdateWithMeasurement(const SensorObjectPtr, double)
		function DstTypeFusion::UpdateWithoutMeasurement(const std::string &, double, double, double)
		function DstTypeFusion::Name() const
		function DstTypeFusion::TypToHyp(size_t, uint64_t *) const
		function DstTypeFusion::HypToTyp(uint64_t, size_t *) const
		function DstTypeFusion::TypeProbsToDst(const std::vector<float>&)
		function DstTypeFusion::GetReliability(const std::string &) const
		function DstTypeFusion::GetReliabilityForUnKnown(const std::string &, double) const
		function DstTypeFusion::UpdateTypeState()
namespace perception
	namespace fusion
		function DummyFusionSystem::Init(const FusionInitOptions &)
		function DummyFusionSystem::Fuse(const FusionOptions &, const base::FrameConstPtr &, std::vector<base::ObjectPtr>*)
		function DummyDataAssociation::Init()
		function DummyDataAssociation::Associate(const AssociationOptions &, SensorFramePtr, ScenePtr, AssociationResult *)
		function DummyTracker::Init(TrackPtr, SensorObjectPtr)
		function DummyTracker::UpdateWithMeasurement(const TrackerOptions &, const SensorObjectPtr, double)
		function DummyTracker::UpdateWithoutMeasurement(const TrackerOptions &, const std::string &, double, double)
		function FUSION_REGISTER_FUSIONSYSTEM(DummyFusionSystem)
namespace perception
	namespace fusion
		function ProbabilisticFusion::ProbabilisticFusion()
		function ProbabilisticFusion::~ProbabilisticFusion()
		function ProbabilisticFusion::Init(const FusionInitOptions &)
		function ProbabilisticFusion::Fuse(const FusionOptions &, const base::FrameConstPtr &, std::vector<base::ObjectPtr>*)
		function ProbabilisticFusion::Name() const
		function ProbabilisticFusion::IsPublishSensor(const base::FrameConstPtr &) const
		function ProbabilisticFusion::FuseFrame(const SensorFramePtr &)
		function ProbabilisticFusion::FuseForegroundTrack(const SensorFramePtr &)
		function ProbabilisticFusion::UpdateAssignedTracks(const SensorFramePtr &, const std::vector<TrackMeasurmentPair>&)
		function ProbabilisticFusion::UpdateUnassignedTracks(const SensorFramePtr &, const std::vector<size_t>&)
		function ProbabilisticFusion::CreateNewTracks(const SensorFramePtr &, const std::vector<size_t>&)
		function ProbabilisticFusion::FusebackgroundTrack(const SensorFramePtr &)
		function ProbabilisticFusion::RemoveLostTrack()
		function ProbabilisticFusion::CollectFusedObjects(double, std::vector<base::ObjectPtr>*)
		function ProbabilisticFusion::CollectObjectsByTrack(double, const TrackPtr &, std::vector<base::ObjectPtr>*)
		function ProbabilisticFusion::CollectSensorMeasurementFromObject(const SensorObjectConstPtr &, base::SensorObjectMeasurement *)
		function FUSION_REGISTER_FUSIONSYSTEM(ProbabilisticFusion)
namespace perception
	namespace fusion
		function PbfGatekeeper::PbfGatekeeper()
		function PbfGatekeeper::~PbfGatekeeper()
		function PbfGatekeeper::Init()
		function PbfGatekeeper::Name() const
		function PbfGatekeeper::AbleToPublish(const TrackPtr &)
		function PbfGatekeeper::LidarAbleToPublish(const TrackPtr &)
		function PbfGatekeeper::RadarAbleToPublish(const TrackPtr &, bool)
		function PbfGatekeeper::CameraAbleToPublish(const TrackPtr &, bool)
namespace perception
	namespace inference
		function CaffeNet::CaffeNet(const std::string &, const std::string &, const std::vector<std::string>&)
		function CaffeNet::Init(const std::map<std::string,std::vector<int>>&)
		function CaffeNet::CaffeNet(const std::string &, const std::string &, const std::vector<std::string>&, const std::vector<std::string>&)
		function CaffeNet::get_blob(const std::string &)
		function CaffeNet::reshape()
		function CaffeNet::Infer()
		function CaffeNet::shape(const std::string &, std::vector<int>*)
namespace perception
	namespace inference
		function Inference::set_max_batch_size(const int &)
		function Inference::set_gpu_id(const int &)
namespace perception
	namespace inference
		function CreateInferenceByName(const std::string &, const std::string &, const std::string &, const std::vector<std::string>&, const std::vector<std::string>&, const std::string &)
namespace perception
	namespace inference
		class Layer<float>
namespace perception
	namespace inference
		function TorchDet::TorchDet(const std::string &, const std::string &, const std::vector<std::string>&)
		function TorchDet::Init(const std::map<std::string,std::vector<int>>&)
		function TorchDet::TorchDet(const std::string &, const std::string &, const std::vector<std::string>&, const std::vector<std::string>&)
		function TorchDet::get_blob(const std::string &)
		function TorchDet::Infer()
function c10::cuda::CUDACachingAllocator::emptyCache()
namespace perception
	namespace inference
		function TorchNet::TorchNet(const std::string &, const std::string &, const std::vector<std::string>&)
		function TorchNet::Init(const std::map<std::string,std::vector<int>>&)
		function TorchNet::TorchNet(const std::string &, const std::string &, const std::vector<std::string>&, const std::vector<std::string>&)
		function TorchNet::get_blob(const std::string &)
		function TorchNet::reshape()
		function TorchNet::Infer()
namespace perception
	namespace inference
		function ObstacleDetector::ObstacleDetector(const std::string &, const std::string &, const std::vector<std::string>&)
		function ObstacleDetector::Init(const std::map<std::string,std::vector<int>>&)
		function ObstacleDetector::ObstacleDetector(const std::string &, const std::string &, const std::vector<std::string>&, const std::vector<std::string>&)
		function ObstacleDetector::get_blob(const std::string &)
		function ObstacleDetector::Infer()
namespace perception
	namespace inference
		function GPUAssert(cudaError_t, const char *, int, bool)
		function OnnxObstacleDetector::OnnxObstacleDetector(const std::string &, const float, const std::vector<std::string>&, const std::vector<std::string>&)
		function OnnxObstacleDetector::OnnxObstacleDetector(const std::string &, const std::vector<std::string>&, const std::vector<std::string>&)
		function OnnxObstacleDetector::~OnnxObstacleDetector()
		function OnnxObstacleDetector::OnnxToTRTModel(const std::string &, nvinfer1::ICudaEngine **)
		function OnnxObstacleDetector::inference()
		function OnnxObstacleDetector::Init(const std::map<std::string,std::vector<int>>&)
		function OnnxObstacleDetector::Infer()
		function OnnxObstacleDetector::get_blob(const std::string &)
constant GPU_CHECK(ans)
namespace perception
	namespace inference
		function ROIPoolingLayer<Dtype>::ForwardCPU(const std::vector<std::shared_ptr<base::Blob<Dtype>>>&, const std::vector<std::shared_ptr<base::Blob<Dtype>>>&)
		class ROIPoolingLayer<float>
		class ROIPoolingLayer<double>
namespace perception
	namespace inference
		function BatchStream::BatchStream(int, int, std::string)
		function BatchStream::BatchStream()
		function BatchStream::reset(int)
		function BatchStream::next()
		function BatchStream::skip(int)
		function BatchStream::update()
function Int8EntropyCalibrator::Int8EntropyCalibrator(const apollo::perception::inference::BatchStream &, int, bool, std::string)
function Int8EntropyCalibrator::~Int8EntropyCalibrator()
function Int8EntropyCalibrator::getBatch(void * [], const char * [], int)
function Int8EntropyCalibrator::readCalibrationCache(size_t &)
function Int8EntropyCalibrator::writeCalibrationCache(const void *, size_t)
namespace perception
	namespace inference
		function ReshapeDims(const nvinfer1::DimsCHW &, const nvinfer1::DimsCHW &)
		function ParseNetParam(const NetParameter &, TensorDimsMap *, std::map<std::string,std::string>*, std::vector<LayerParameter>*)
		function ParserConvParam(const ConvolutionParameter &, ConvParam *)
		function modify_pool_param(PoolingParameter *)
function log(Severity, const char *)
constant LOAD_DEBUG
namespace apollo
	namespace perception
		namespace inference
			function RTNet::ConstructMap(const LayerParameter &, nvinfer1::ILayer *, TensorMap *, TensorModifyMap *)
			function RTNet::addConvLayer(const LayerParameter &, nvinfer1::ITensor * const *, WeightMap *, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addDeconvLayer(const LayerParameter &, nvinfer1::ITensor * const *, WeightMap *, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addActiveLayer(const LayerParameter &, nvinfer1::ITensor * const *, int, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addConcatLayer(const LayerParameter &, nvinfer1::ITensor * const *, int, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addPoolingLayer(const LayerParameter &, nvinfer1::ITensor * const *, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addSliceLayer(const LayerParameter &, nvinfer1::ITensor * const *, int, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addInnerproductLayer(const LayerParameter &, nvinfer1::ITensor * const *, WeightMap *, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addScaleLayer(const LayerParameter &, nvinfer1::ITensor * const *, WeightMap *, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addBatchnormLayer(const LayerParameter &, nvinfer1::ITensor * const *, WeightMap *, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addSoftmaxLayer(const LayerParameter &, nvinfer1::ITensor * const *, int, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addEltwiseLayer(const LayerParameter &, nvinfer1::ITensor * const *, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addArgmaxLayer(const LayerParameter &, nvinfer1::ITensor * const *, int, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addPermuteLayer(const LayerParameter &, nvinfer1::ITensor * const *, int, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addReshapeLayer(const LayerParameter &, nvinfer1::ITensor * const *, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addPaddingLayer(const LayerParameter &, nvinfer1::ITensor * const *, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addDFMBPSROIAlignLayer(const LayerParameter &, nvinfer1::ITensor * const *, int, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addRCNNProposalLayer(const LayerParameter &, nvinfer1::ITensor * const *, int, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addRPNProposalSSDLayer(const LayerParameter &, nvinfer1::ITensor * const *, int, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::addLayer(const LayerParameter &, nvinfer1::ITensor * const *, int, WeightMap *, nvinfer1::INetworkDefinition *, TensorMap *, TensorModifyMap *)
			function RTNet::loadWeights(const std::string &, WeightMap *)
			function RTNet::mergeBN(int, LayerParameter *)
			function RTNet::loadLayerWeights(const float *, int)
			function RTNet::loadLayerWeights(float, int)
			function RTNet::RTNet(const std::string &, const std::string &, const std::vector<std::string>&, const std::vector<std::string>&)
			function RTNet::RTNet(const std::string &, const std::string &, const std::vector<std::string>&, const std::vector<std::string>&, nvinfer1::Int8EntropyCalibrator *)
			function RTNet::RTNet(const std::string &, const std::string &, const std::vector<std::string>&, const std::vector<std::string>&, const std::string &)
			function RTNet::shape(const std::string &, std::vector<int>*)
			function RTNet::init_blob(std::vector<std::string>*)
			function RTNet::Init(const std::map<std::string,std::vector<int>>&)
			function RTNet::checkInt8(const std::string &, nvinfer1::IInt8Calibrator *)
			function RTNet::addInput(const TensorDimsMap &, const std::map<std::string,std::vector<int>>&, TensorMap *)
			function RTNet::parse_with_api(const std::map<std::string,std::vector<int>>&)
			function RTNet::~RTNet()
			function RTNet::Infer()
			function RTNet::get_blob(const std::string &)
namespace perception
	namespace inference
		function ReadProtoFromTextFile(const std::string &, google::protobuf::Message *)
		function ReadProtoFromBinaryFile(const std::string &, google::protobuf::Message *)
		function loadNetParams(const std::string &, NetParameter *)
		function locateFile(const std::string &, const std::string &)
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_string
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_string
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_bool
function evaluate_image_list()
function main(int, char **)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_bool
variable DEFINE_int32
variable DEFINE_int32
variable DEFINE_int32
function main(int, char **)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
function main(int, char **)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
variable DEFINE_string
function main(int, char **)
namespace perception
	namespace inference
		function get_dtype(const base::Blob<double>&)
		function get_dtype(const base::Blob<float>&)
		function BinaryReadString(FILE *, char *)
		function BinaryWriteString(FILE *, const std::string &)
		function BinaryReadBlob<Dtype>(FILE *)
		function BinaryWriteBlob<Dtype>(FILE *, const base::Blob<Dtype>&)
		function BinaryReadBlob(FILE *)
		function BinaryReadBlob(FILE *)
		function BinaryWriteBlob(FILE *, const base::Blob<float>&)
		function BinaryWriteBlob(FILE *, const base::Blob<double>&)
		function BinaryReadFile<Dtype>(const char *)
		function BinaryWriteFile<Btype>(const char *, const std::map<std::string,Btype>&)
		function BinaryReadFile(const char *)
		function BinaryReadFile(const char *)
		function BinaryWriteFile(const char *, const std::map<std::string,std::shared_ptr<base::Blob<float>>>&)
		function BinaryWriteFile(const char *, const std::map<std::string,std::shared_ptr<base::Blob<double>>>&)
		function BinaryWriteFile(const char *, const std::map<std::string,base::Blob<float>*>&)
		function BinaryWriteFile(const char *, const std::map<std::string,base::Blob<double>*>&)
namespace perception
	namespace inference
		function load_binary_data(const std::string &)
		function write_result(const std::string &, const std::vector<float>&)
namespace perception
	namespace lib
		function ConfigManager::ConfigManager()
		function ConfigManager::Init()
		function ConfigManager::InitInternal()
		function ConfigManager::Reset()
		function ConfigManager::GetModelConfig(const std::string &, const ModelConfig **)
		function ConfigManager::~ConfigManager()
		function ModelConfig::Reset(const ModelConfigProto &)
namespace perception
	namespace lib
		function GlobalFactoryMap()
		function GetRegisteredClasses(const std::string &, std::vector<std::string>*)
namespace perception
	namespace lib
		function Thread::Start()
		function Thread::Join()
		function Thread::IsAlive()
namespace perception
	namespace lib
		function ThreadPool::ThreadPool(int)
		function ThreadPool::~ThreadPool()
		function ThreadPool::Start()
		function ThreadPool::Add(Closure *)
		function ThreadPool::Add(const vector<Closure*>&)
		function ThreadPoolWorker::Run()
namespace perception
	namespace lib
		function ThreadWorker::Bind(const std::function<bool()>&)
		function ThreadWorker::Start()
		function ThreadWorker::WakeUp()
		function ThreadWorker::Join()
		function ThreadWorker::Release()
		function ThreadWorker::Core()
namespace perception
	namespace lidar
		function LidarObstacleDetection::Init(const LidarObstacleDetectionInitOptions &)
		function LidarObstacleDetection::Process(const LidarObstacleDetectionOptions &, LidarFrame *)
		function LidarObstacleDetection::Process(const LidarObstacleDetectionOptions &, const std::shared_ptr<apollo::drivers::PointCloud const>&, LidarFrame *)
		function LidarObstacleDetection::ProcessCommon(const LidarObstacleDetectionOptions &, LidarFrame *)
namespace perception
	namespace lidar
		function LidarObstacleSegmentation::Init(const LidarObstacleSegmentationInitOptions &)
		function LidarObstacleSegmentation::Process(const LidarObstacleSegmentationOptions &, LidarFrame *)
		function LidarObstacleSegmentation::Process(const LidarObstacleSegmentationOptions &, const std::shared_ptr<apollo::drivers::PointCloud const>&, LidarFrame *)
		function LidarObstacleSegmentation::ProcessCommon(const LidarObstacleSegmentationOptions &, LidarFrame *)
namespace perception
	namespace lidar
		function LidarObstacleTracking::Init(const LidarObstacleTrackingInitOptions &)
		function LidarObstacleTracking::Process(const LidarObstacleTrackingOptions &, LidarFrame *)
namespace perception
	namespace lidar
		function CloudMask::ValidIndicesCount() const
		function CloudMask::GetValidCloud(const AttributePointCloud<PointF>&, AttributePointCloud<PointF>*) const
		function CloudMask::GetValidIndices(base::PointIndices *)
		function CloudMask::Flip()
		function CloudMask::AddIndices(const base::PointIndices &, int)
		function CloudMask::AddIndicesOfIndices(const base::PointIndices &, const base::PointIndices &, int)
		function CloudMask::RemoveIndices(const base::PointIndices &)
		function CloudMask::RemoveIndicesOfIndices(const base::PointIndices &, const base::PointIndices &)
		function CloudMask::GetValidMask(CloudMask *) const
		function CloudMask::ResetValue(int, int)
namespace perception
	namespace lidar
		function LidarFramePoolInitialize()
namespace perception
	namespace lidar
		function GetBoundingBox2d(const std::shared_ptr<Object>&, PointCloud<PointD>*, double)
		function ComputeObjectShapeFromPolygon(std::shared_ptr<Object>, bool)
namespace perception
	namespace lidar
		interface ObjectPtr
		function ObjectSequence::AddTrackedFrameObjects(const std::vector<ObjectPtr>&, TimeStampKey)
		function ObjectSequence::GetTrackInTemporalWindow(TrackIdKey, TrackedObjects *, TimeStampKey)
		function ObjectSequence::RemoveStaleTracks(TimeStampKey)
namespace perception
	namespace lidar
		interface ObjectPtr
		function CCRFOneShotTypeFusion::Init(const TypeFusionInitOption &)
		function CCRFOneShotTypeFusion::TypeFusion(const TypeFusionOption &, ObjectPtr)
		function CCRFOneShotTypeFusion::FuseOneShotTypeProbs(const ObjectPtr &, Vectord *)
		function CCRFSequenceTypeFusion::Init(const TypeFusionInitOption &)
		function CCRFSequenceTypeFusion::TypeFusion(const TypeFusionOption &, TrackedObjects *)
		function CCRFSequenceTypeFusion::FuseWithConditionalProbabilityInference(TrackedObjects *)
		function CCRFSequenceTypeFusion::RecoverFromLogProbability(Vectord *, std::vector<float>*, ObjectType *)
		function PERCEPTION_REGISTER_ONESHOTTYPEFUSION(CCRFOneShotTypeFusion)
		function PERCEPTION_REGISTER_SEQUENCETYPEFUSION(CCRFSequenceTypeFusion)
namespace perception
	namespace lidar
		interface ObjectPtr
		function FusedClassifier::Init(const ClassifierInitOptions &)
		function FusedClassifier::Classify(const ClassifierOptions &, LidarFrame *)
		function PERCEPTION_REGISTER_CLASSIFIER(FusedClassifier)
namespace perception
	namespace lidar
		namespace util
			function FromStdToVector(const std::vector<float>&, Vectord *)
			function FromEigenToVector(const Vectord &, std::vector<float>*)
			function ToLog(Vectord *)
			function ToExp(Vectord *)
			function ToExpStable(Vectord *)
			function Normalize(Vectord *)
			function NormalizeRow(Matrixd *)
			function LoadSingleMatrix(std::ifstream &, Matrixd *)
			function LoadSingleMatrixFile(const std::string &, Matrixd *)
			function LoadMultipleMatricesFile(const std::string &, EigenMap<std::string,Matrixd>*)
namespace perception
	namespace lidar
		variable PointPillars::kPillarXSize
		variable PointPillars::kPillarYSize
		variable PointPillars::kPillarZSize
		variable PointPillars::kMinXRange
		variable PointPillars::kMinYRange
		variable PointPillars::kMinZRange
		variable PointPillars::kMaxXRange
		variable PointPillars::kMaxYRange
		variable PointPillars::kMaxZRange
		variable PointPillars::kNumClass
		variable PointPillars::kMaxNumPillars
		variable PointPillars::kMaxNumPointsPerPillar
		variable PointPillars::kNumPointFeature
		variable PointPillars::kGridXSize
		variable PointPillars::kGridYSize
		variable PointPillars::kGridZSize
		variable PointPillars::kRpnInputSize
		variable PointPillars::kNumAnchor
		variable PointPillars::kNumOutputBoxFeature
		variable PointPillars::kRpnBoxOutputSize
		variable PointPillars::kRpnClsOutputSize
		variable PointPillars::kRpnDirOutputSize
		variable PointPillars::kBatchSize
		variable PointPillars::kNumIndsForScan
		variable PointPillars::kNumThreads
		variable PointPillars::kNumBoxCorners
		variable PointPillars::kAnchorStrides
		variable PointPillars::kAnchorRanges
		variable PointPillars::kNumAnchorSets
		variable PointPillars::kAnchorDxSizes
		variable PointPillars::kAnchorDySizes
		variable PointPillars::kAnchorDzSizes
		variable PointPillars::kAnchorZCoors
		variable PointPillars::kNumAnchorRo
		variable PointPillars::kAnchorRo
		function PointPillars::PointPillars(const bool, const float, const float, const std::string &, const std::string &, const std::string &, const std::string &, const std::string &)
		function PointPillars::~PointPillars()
		function PointPillars::DeviceMemoryMalloc()
		function PointPillars::InitAnchors()
		function PointPillars::GenerateAnchors(float *, float *, float *, float *, float *, float *, float *)
		function PointPillars::PutAnchorsInDeviceMemory()
		function PointPillars::ConvertAnchors2BoxAnchors(float *, float *, float *, float *, float *, float *)
		function PointPillars::InitTorch()
		function PointPillars::InitTRT()
		function PointPillars::OnnxToTRTModel(const std::string &, nvinfer1::ICudaEngine **)
		function PointPillars::PreprocessCPU(const float *, const int)
		function PointPillars::PreprocessGPU(const float *, const int)
		function PointPillars::Preprocess(const float *, const int)
		function PointPillars::DoInference(const float *, const int, std::vector<float>*, std::vector<int>*)
namespace perception
	namespace lidar
		function PointPillarsDetection::PointPillarsDetection()
		function PointPillarsDetection::Init(const DetectionInitOptions &)
		function PointPillarsDetection::Detect(const DetectionOptions &, LidarFrame *)
		function PointPillarsDetection::CloudToArray(const base::PointFCloudPtr &, float *, const float)
		function PointPillarsDetection::FuseCloud(const base::PointFCloudPtr &, const std::deque<base::PointDCloudPtr>&)
		function PointPillarsDetection::GenerateIndices(int, int, bool)
		function PointPillarsDetection::GetObjects(std::vector<std::shared_ptr<Object>>*, const Eigen::Affine3d &, std::vector<float>*, std::vector<int>*)
		function PointPillarsDetection::GetObjectSubType(const int)
namespace perception
	namespace lidar
		function PreprocessPoints::PreprocessPoints(const int, const int, const int, const int, const int, const int, const float, const float, const float, const float, const float, const float, const int)
		function PreprocessPoints::InitializeVariables(int *, float *, float *, float *)
		function PreprocessPoints::Preprocess(const float *, int, int *, int *, float *, float *, float *, float *, int *)
namespace perception
	namespace lidar
		function DummyClassifier::Init(const ClassifierInitOptions &)
		function DummyClassifier::Classify(const ClassifierOptions &, LidarFrame *)
		function PERCEPTION_REGISTER_CLASSIFIER(DummyClassifier)
namespace perception
	namespace lidar
		function DummyGroundDetector::Init(const GroundDetectorInitOptions &)
		function DummyGroundDetector::Detect(const GroundDetectorOptions &, LidarFrame *)
		function PERCEPTION_REGISTER_GROUNDDETECTOR(DummyGroundDetector)
namespace perception
	namespace lidar
		function DummyMultiTargetTracker::Init(const MultiTargetTrackerInitOptions &)
		function DummyMultiTargetTracker::Track(const MultiTargetTrackerOptions &, LidarFrame *)
		function PERCEPTION_REGISTER_MULTITARGET_TRACKER(DummyMultiTargetTracker)
namespace perception
	namespace lidar
		function DummyObjectFilter::Init(const ObjectFilterInitOptions &)
		function DummyObjectFilter::Filter(const ObjectFilterOptions &, LidarFrame *)
		function PERCEPTION_REGISTER_OBJECTFILTER(DummyObjectFilter)
namespace perception
	namespace lidar
		function DummyROIFilter::Init(const ROIFilterInitOptions &)
		function DummyROIFilter::Filter(const ROIFilterOptions &, LidarFrame *)
		function PERCEPTION_REGISTER_ROIFILTER(DummyROIFilter)
namespace perception
	namespace lidar
		function DummySegmentation::Init(const SegmentationInitOptions &)
		function DummySegmentation::Segment(const SegmentationOptions &, LidarFrame *)
		function PERCEPTION_REGISTER_SEGMENTATION(DummySegmentation)
namespace perception
	namespace lidar
		function GroundServiceDetector::Init(const GroundDetectorInitOptions &)
		function GroundServiceDetector::Detect(const GroundDetectorOptions &, LidarFrame *)
		function PERCEPTION_REGISTER_GROUNDDETECTOR(GroundServiceDetector)
namespace perception
	namespace lidar
		function SpatioTemporalGroundDetector::Init(const GroundDetectorInitOptions &)
		function SpatioTemporalGroundDetector::Detect(const GroundDetectorOptions &, LidarFrame *)
		function PERCEPTION_REGISTER_GROUNDDETECTOR(SpatioTemporalGroundDetector)
namespace perception
	namespace lidar
		function MapManager::Init(const MapManagerInitOptions &)
		function MapManager::Update(const MapManagerOptions &, LidarFrame *)
		function MapManager::QueryPose(Eigen::Affine3d *) const
namespace perception
	namespace lidar
		variable kEpsilon
		variable kEpsilonForSize
		variable kEpsilonForLine
		interface ObjectPtr
		interface PointFCloud
		interface PolygonDType
		function ObjectBuilder::Init(const ObjectBuilderInitOptions &)
		function ObjectBuilder::Build(const ObjectBuilderOptions &, LidarFrame *)
		function ObjectBuilder::ComputePolygon2D(ObjectPtr)
		function ObjectBuilder::ComputeOtherObjectInformation(ObjectPtr)
		function ObjectBuilder::ComputePolygonSizeCenter(ObjectPtr)
		function ObjectBuilder::SetDefaultValue(const Eigen::Vector3f &, const Eigen::Vector3f &, ObjectPtr)
		function ObjectBuilder::LinePerturbation(PointFCloud *)
		function ObjectBuilder::GetMinMax3D(const PointFCloud &, Eigen::Vector3f *, Eigen::Vector3f *)
namespace perception
	namespace lidar
		function ObjectFilterBank::Init(const ObjectFilterInitOptions &)
		function ObjectFilterBank::Filter(const ObjectFilterOptions &, LidarFrame *)
namespace `anonymous-namespace'
	variable kDoubleMax
namespace apollo
	namespace perception
		namespace lidar
			function ROIBoundaryFilter::Init(const ObjectFilterInitOptions &)
			function ROIBoundaryFilter::Filter(const ObjectFilterOptions &, LidarFrame *)
			function ROIBoundaryFilter::BuildWorldPolygons(const ObjectFilterOptions &, const LidarFrame &)
			function ROIBoundaryFilter::FillObjectRoiFlag(const ObjectFilterOptions &, LidarFrame *)
			function ROIBoundaryFilter::FilterObjectsOutsideBoundary(const ObjectFilterOptions &, LidarFrame *, std::vector<bool>*)
			function ROIBoundaryFilter::FilterObjectsInsideBoundary(const ObjectFilterOptions &, LidarFrame *, std::vector<bool>*)
			function ROIBoundaryFilter::FilterObjectsByConfidence(const ObjectFilterOptions &, LidarFrame *, std::vector<bool>*)
			function PERCEPTION_REGISTER_OBJECTFILTER(ROIBoundaryFilter)
namespace perception
	namespace lidar
		variable PointCloudPreprocessor::kPointInfThreshold
		function PointCloudPreprocessor::Init(const PointCloudPreprocessorInitOptions &)
		function PointCloudPreprocessor::Preprocess(const PointCloudPreprocessorOptions &, const std::shared_ptr<apollo::drivers::PointCloud const>&, LidarFrame *) const
		function PointCloudPreprocessor::Preprocess(const PointCloudPreprocessorOptions &, LidarFrame *) const
		function PointCloudPreprocessor::TransformCloud(const base::PointFCloudPtr &, const Eigen::Affine3d &, base::PointDCloudPtr) const
namespace perception
	namespace lidar
		variable kZeroLast
		function Bitmap2D::OppositeDirection(const Bitmap2D::DirectionMajor)
		function Bitmap2D::CheckBit(const size_t, const uint64_t) const
		function Bitmap2D::SetBit(const size_t, uint64_t *)
		function Bitmap2D::ResetBit(const size_t, uint64_t *)
		function Bitmap2D::SetTailBits(const size_t, uint64_t *)
		function Bitmap2D::ResetTailBits(const size_t, uint64_t *)
		function Bitmap2D::SetHeadBits(const size_t, uint64_t *)
		function Bitmap2D::ResetHeadBits(const size_t, uint64_t *)
		function Bitmap2D::SetRangeBits(const size_t, const size_t, uint64_t *)
		function Bitmap2D::ResetRangeBits(const size_t, const size_t, uint64_t *)
		function Bitmap2D::Init(const Eigen::Vector2d &, const Eigen::Vector2d &, const Eigen::Vector2d &)
		function Bitmap2D::SetUp(const DirectionMajor)
		function Bitmap2D::RealToBitmap(const Eigen::Vector2d &) const
		function Bitmap2D::Index(const Bitmap2D::Vec3ui &) const
		function Bitmap2D::IsExists(const Eigen::Vector2d &) const
		function Bitmap2D::Check(const Eigen::Vector2d &) const
		function Bitmap2D::Set(const Eigen::Vector2d &)
		function Bitmap2D::Reset(const Eigen::Vector2d &)
		function Bitmap2D::Set(const double, const double, const double)
		function Bitmap2D::Reset(const double, const double, const double)
namespace perception
	namespace lidar
		interface DirectionMajor
		interface Polygon<T>
		function HdmapROIFilter::Init(const ROIFilterInitOptions &)
		function HdmapROIFilter::Filter(const ROIFilterOptions &, LidarFrame *)
		function HdmapROIFilter::FilterWithPolygonMask(const base::PointFCloudPtr &, const EigenVector<PolygonDType>&, base::PointIndices *)
		function HdmapROIFilter::TransformFrame(const base::PointFCloudPtr &, const Eigen::Affine3d &, const EigenVector<PolygonDType*>&, EigenVector<PolygonDType>*, base::PointFCloudPtr *)
		function HdmapROIFilter::Bitmap2dFilter(const base::PointFCloudPtr &, const Bitmap2D &, base::PointIndices *)
		function PERCEPTION_REGISTER_ROIFILTER(HdmapROIFilter)
namespace perception
	namespace lidar
		function ROIServiceFilter::Init(const ROIFilterInitOptions &)
		function ROIServiceFilter::Filter(const ROIFilterOptions &, LidarFrame *)
		function PERCEPTION_REGISTER_ROIFILTER(ROIServiceFilter)
namespace perception
	namespace lidar
		function GroundServiceContent::GetCopy(SceneServiceContent *) const
		function GroundServiceContent::SetContent(const SceneServiceContent &)
		function GroundServiceContent::PointToGrid(const Eigen::Vector3d &, uint32_t *) const
		function GroundServiceContent::PointToPlaneDistance(const Eigen::Vector3d &) const
		function GroundServiceContent::Init(double, double, uint32_t, uint32_t)
		function GetIndex(uint32_t, uint32_t, uint32_t)
		function GroundService::Init(const SceneServiceInitOptions &)
		function GroundService::QueryPointToGroundDistance(const Eigen::Vector3d &)
		function GroundService::QueryPointToGroundDistance(const Eigen::Vector3d &, const GroundServiceContent &)
		function PERCEPTION_REGISTER_SCENESERVICECONTENT(GroundServiceContent)
		function PERCEPTION_REGISTER_SCENESERVICE(GroundService)
namespace perception
	namespace lidar
		function ROIServiceContent::GetCopy(SceneServiceContent *) const
		function ROIServiceContent::SetContent(const SceneServiceContent &)
		function ROIServiceContent::CheckBit(const size_t, const uint64_t) const
		function ROIServiceContent::Check(const Eigen::Vector3d &) const
		function ROIService::Init(const SceneServiceInitOptions &)
		function ROIService::QueryIsPointInROI(const Eigen::Vector3d &)
		function ROIService::QueryIsPointInROI(const Eigen::Vector3d &, const ROIServiceContent &)
		function PERCEPTION_REGISTER_SCENESERVICECONTENT(ROIServiceContent)
		function PERCEPTION_REGISTER_SCENESERVICE(ROIService)
namespace perception
	namespace lidar
		function SceneManager::InitInternal(const SceneManagerInitOptions &)
		function SceneManager::Init(const SceneManagerInitOptions &)
		function SceneManager::Reset(const SceneManagerInitOptions &)
		function SceneManager::Service(const std::string &)
namespace perception
	namespace lidar
		function CNNSegmentation::Init(const SegmentationInitOptions &)
		function CNNSegmentation::InitClusterAndBackgroundSegmentation()
		function CNNSegmentation::MapPointToGrid(const std::shared_ptr<AttributePointCloud<PointF>>&)
		function CNNSegmentation::Segment(const SegmentationOptions &, LidarFrame *)
		function CNNSegmentation::GetObjectsFromSppEngine(std::vector<std::shared_ptr<Object>>*)
		function CNNSegmentation::GetConfigs(std::string *, std::string *, std::string *, std::string *)
		function PERCEPTION_REGISTER_SEGMENTATION(CNNSegmentation)
namespace perception
	namespace lidar
		function FeatureGenerator::Init(const FeatureParam &, base::Blob<float>*)
		function FeatureGenerator::GenerateCPU(const base::PointFCloudPtr &, const std::vector<int>&)
namespace perception
	namespace lidar
		function SppClusterList::Init(size_t, const std::string &)
		function SppClusterList::resize(size_t)
		function SppClusterList::AddPointSample(size_t, const base::PointF &, float, uint32_t)
		function SppClusterList::Merge(SppClusterList *)
		function SppClusterList::HeightCut(float, size_t)
		function SppClusterList::ComputeHeightAndSplitCluster(size_t, float)
		function SppClusterList::RemoveEmptyClusters()
		function SppClusterList::EraseCluster(size_t)
namespace perception
	namespace lidar
		function SppEngine::Init(size_t, size_t, float, const SppParams &, const std::string &)
		function SppEngine::ProcessConnectedComponentCluster(const base::PointFCloudConstPtr, const CloudMask &)
		function SppEngine::ProcessForegroundSegmentation(const base::PointFCloudConstPtr)
		function SppEngine::RemoveGroundPointsInForegroundCluster(const base::PointFCloudConstPtr, const base::PointIndices &, const base::PointIndices &)
namespace perception
	namespace lidar
		function SppLabelImage::Init(size_t, size_t, const std::string &)
		function SppLabelImage::InitRangeMask(float, float)
		function SppLabelImage::CollectClusterFromSppLabelImage()
		function SppLabelImage::ProjectClusterToSppLabelImage()
		function SppLabelImage::FilterClusters(const float *, float)
		function SppLabelImage::FilterClusters(const float *, const float *, float, float)
		function SppLabelImage::CalculateClusterClass(const float *, size_t)
		function SppLabelImage::CalculateClusterHeading(const float *)
		function SppLabelImage::CalculateClusterTopZ(const float *)
		function SppLabelImage::AddPixelSample(size_t, uint32_t)
		function SppLabelImage::ResizeClusters(size_t)
		function SppLabelImage::ResetClusters(size_t)
namespace perception
	namespace lidar
		function SppPoolInitialize()
namespace perception
	namespace lidar
		function SppCCDetector::SetData(const float * const *, const float *, float, float)
		function SppCCDetector::BuildNodes(int, int)
		function SppCCDetector::CleanNodes()
		function SppCCDetector::Detect(SppLabelImage *)
		function SppCCDetector::TraverseNodes()
		function SppCCDetector::UnionNodes()
		function SppCCDetector::ToLabelMap(SppLabelImage *)
		function SppCCDetector::Traverse(SppCCDetector::Node *)
		function SppCCDetector::DisjointSetFindLoop(Node *)
		function SppCCDetector::DisjointSetFind(Node *)
		function SppCCDetector::DisjointSetUnion(Node *, Node *)
namespace perception
	namespace lidar
		function SppData::MakeReference(size_t, size_t, float)
		function SppData::~SppData()
namespace perception
	namespace lidar
		namespace `anonymous-namespace'
			variable kNumDirections
			variable di
			variable dj
			variable kEmptyGridLabel
			variable kNonEmptyGridLabel
		function FloodFill::Pos(float, float) const
		function FloodFill::Pos2d(float, float, int *, int *) const
		function FloodFill::BuildGrid(base::PointFCloudConstPtr)
		function FloodFill::GetConnectedComponents()
		function FloodFill::DfsColoring(int, int, int)
		function FloodFill::GetSegments(base::PointFCloudConstPtr, std::vector<std::vector<int>>*, std::vector<int>*)
namespace perception
	namespace lidar
		namespace `anonymous-namespace'
			variable OBSTACLE_MINIMUM_NUM_POINTS
		function NCut::NCut()
		function NCut::~NCut()
		function NCut::Init(const NCutParam &)
		function NCut::Configure(const NCutParam &)
		function NCut::Segment(base::PointFCloudConstPtr)
		function NCut::SuperPixelsFloodFill(base::PointFCloudConstPtr, float, float, std::vector<std::vector<int>>*)
		function NCut::PrecomputeAllSkeletonAndBbox()
		function NCut::BuildAverageHeightMap(base::PointFCloudConstPtr, const FloodFill &, cv::Mat *, std::vector<gridIndex>*)
		function NCut::SampleByGrid(const std::vector<int>&, MatrixXf *, MatrixXf *)
		function NCut::GetPatchFeature(const MatrixXf &, MatrixXf *)
		function NCut::ComputeClusterBoundingBox(const std::vector<int>&)
		function NCut::GetPcLabel(const base::PointFCloudPtr &)
		function NCut::NormalizedCut(float, bool, std::vector<std::vector<int>>*, std::vector<std::string>*)
		function NCut::ComputeSkeletonWeights(Eigen::MatrixXf *)
		function NCut::GetMinNcuts(const Eigen::MatrixXf &, const std::vector<int>*, std::vector<int>*, std::vector<int>*)
		function NCut::LaplacianDecomposition(const Eigen::MatrixXf &, Eigen::MatrixXf *)
		function NCut::ComputeSquaredSkeletonDistance(const Eigen::MatrixXf &, const Eigen::MatrixXf &, const Eigen::MatrixXf &, const Eigen::MatrixXf &, float *, float *)
		function NCut::IsMovableObstacle(const std::vector<int>&, std::string *)
		function NCut::GetClustersLabel(const std::vector<int>&)
		function NCut::GetClustersPids(const std::vector<int>&, std::vector<int>*)
		function NCut::GetComponentBoundingBox(const std::vector<int>&, NcutBoundingBox *)
		function NCut::GetPcRoughLabel(const base::PointFCloudPtr &, bool)
		function NCut::GetSegmentRoughSize(const base::PointFCloudPtr &, float *, float *, float *)
namespace perception
	namespace lidar
		function NCutSegmentation::Init(const SegmentationInitOptions &)
		function NCutSegmentation::Configure(std::string)
		function NCutSegmentation::GetConfigs(std::string *)
		function NCutSegmentation::Segment(const SegmentationOptions &, LidarFrame *)
		function NCutSegmentation::Label2Type(const std::string &)
		function NCutSegmentation::PartitionConnectedComponents(const base::PointFCloudPtr &, float, std::vector<base::PointFCloudPtr>*)
		function NCutSegmentation::ObstacleFilter(const base::PointFCloudPtr &, float, bool, base::PointFCloudPtr *, std::vector<base::ObjectPtr>*)
		function NCutSegmentation::IsOutlier(const base::PointFCloudPtr &)
		function NCutSegmentation::VisualizePointCloud(const base::PointFCloudPtr &)
		function NCutSegmentation::VisualizeSegments(const std::vector<base::ObjectPtr>&)
		function NCutSegmentation::VisualizeComponents(const base::PointFCloudPtr &, const std::vector<std::vector<int>>&)
		function PERCEPTION_REGISTER_SEGMENTATION(NCutSegmentation)
namespace perception
	namespace lidar
		function LocationDistance(const TrackedObjectConstPtr &, const Eigen::VectorXf &, const TrackedObjectConstPtr &, const double)
		function DirectionDistance(const TrackedObjectConstPtr &, const Eigen::VectorXf &, const TrackedObjectConstPtr &, const double)
		function BboxSizeDistance(const TrackedObjectConstPtr &, const Eigen::VectorXf &, const TrackedObjectConstPtr &, const double)
		function PointNumDistance(const TrackedObjectConstPtr &, const Eigen::VectorXf &, const TrackedObjectConstPtr &, const double)
		function HistogramDistance(const TrackedObjectConstPtr &, const Eigen::VectorXf &, const TrackedObjectConstPtr &, const double)
		function CentroidShiftDistance(const TrackedObjectConstPtr &, const Eigen::VectorXf &, const TrackedObjectConstPtr &, const double)
		function BboxIouDistance(const TrackedObjectConstPtr &, const Eigen::VectorXf &, const TrackedObjectConstPtr &, const double, double)
namespace perception
	namespace lidar
		function MatchCost::MatchCost(size_t, size_t, double)
		function MatchCost::RowIdx() const
		function MatchCost::ColIdx() const
		function MatchCost::Cost() const
		operator operator<(const MatchCost &, const MatchCost &)
		operator operator<<(std::ostream &, const MatchCost &)
		function GnnBipartiteGraphMatcher::GnnBipartiteGraphMatcher(size_t)
		function GnnBipartiteGraphMatcher::~GnnBipartiteGraphMatcher()
		function GnnBipartiteGraphMatcher::Match(const BipartiteGraphMatcherOptions &, std::vector<NodeNodePair>*, std::vector<size_t>*, std::vector<size_t>*)
		function PERCEPTION_REGISTER_BIPARTITEGRAPHMATCHER(GnnBipartiteGraphMatcher)
namespace perception
	namespace lidar
		function MultiHmBipartiteGraphMatcher::MultiHmBipartiteGraphMatcher()
		function MultiHmBipartiteGraphMatcher::~MultiHmBipartiteGraphMatcher()
		function MultiHmBipartiteGraphMatcher::Match(const BipartiteGraphMatcherOptions &, std::vector<NodeNodePair>*, std::vector<size_t>*, std::vector<size_t>*)
		function PERCEPTION_REGISTER_BIPARTITEGRAPHMATCHER(MultiHmBipartiteGraphMatcher)
namespace perception
	namespace lidar
		variable MlfTrackData::kMaxHistoryTime
		function MlfTrackData::Reset()
		function MlfTrackData::Reset(TrackedObjectPtr, int)
		function MlfTrackData::PushTrackedObjectToTrack(TrackedObjectPtr)
		function MlfTrackData::PushTrackedObjectToCache(TrackedObjectPtr)
		function MlfTrackData::ToObject(const Eigen::Vector3d &, double, base::ObjectPtr) const
		function MlfTrackData::PredictState(double) const
		function MlfTrackData::GetAndCleanCachedObjectsInTimeInterval(std::vector<TrackedObjectPtr>*)
		function MlfTrackData::RemoveStaleHistory(double)
		function RemoveStaleDataFromMap(double, std::map<double,TrackedObjectPtr>*)
namespace perception
	namespace lidar
		variable TrackData::kMaxHistorySize
		function TrackData::TrackData()
		function TrackData::TrackData(TrackedObjectPtr, int)
		function TrackData::~TrackData()
		function TrackData::GetHistoryObject(int)
		function TrackData::GetHistoryObject(int) const
		function TrackData::Reset()
		function TrackData::Reset(TrackedObjectPtr, double, int)
		function TrackData::PushTrackedObjectToTrack(TrackedObjectPtr, double)
namespace perception
	namespace lidar
		function TrackPoolInitialize()
namespace perception
	namespace lidar
		interface PointFCloud
		function TrackedObject::TrackedObject(base::ObjectPtr, const Eigen::Affine3d &)
		function TrackedObject::AttachObject(base::ObjectPtr, const Eigen::Affine3d &, const Eigen::Vector3d &, const base::SensorInfo &)
		function TrackedObject::TransformObjectCloudToWorld()
		function TrackedObject::Reset()
		function TrackedObject::Reset(base::ObjectPtr, const Eigen::Affine3d &, const Eigen::Vector3d &, const base::SensorInfo &)
		function TrackedObject::CopyFrom(TrackedObjectPtr, bool)
		function TrackedObject::GetVelThreshold(base::ObjectPtr) const
		function TrackedObject::ToObject(base::ObjectPtr) const
		function TrackedObject::ToString() const
		function TrackedObject::ComputeShapeFeatures()
namespace perception
	namespace lidar
		function MeasureAnchorPointVelocity(TrackedObjectPtr, const TrackedObjectConstPtr &, const double &)
		function MeasureBboxCenterVelocity(TrackedObjectPtr, const TrackedObjectConstPtr &, const double &)
		function MeasureBboxCornerVelocity(TrackedObjectPtr, const TrackedObjectConstPtr &, const double &)
namespace perception
	namespace lidar
		function MlfEngine::Init(const MultiTargetTrackerInitOptions &)
		function MlfEngine::Track(const MultiTargetTrackerOptions &, LidarFrame *)
		function MlfEngine::SplitAndTransformToTrackedObjects(const std::vector<base::ObjectPtr>&, const base::SensorInfo &)
		function MlfEngine::TrackObjectMatchAndAssign(const MlfTrackObjectMatcherOptions &, const std::vector<TrackedObjectPtr>&, const std::string &, std::vector<MlfTrackDataPtr>*)
		function MlfEngine::TrackStateFilter(const std::vector<MlfTrackDataPtr>&, double)
		function MlfEngine::CollectTrackedResult(LidarFrame *)
		function MlfEngine::RemoveStaleTrackData(const std::string &, double, std::vector<MlfTrackDataPtr>*)
		function convertPoseToLoc(const Eigen::Affine3d &, localization::LocalizationEstimate *)
		function PERCEPTION_REGISTER_MULTITARGET_TRACKER(MlfEngine)
namespace perception
	namespace lidar
		function MlfMotionFilter::Init(const MlfFilterInitOptions &)
		function MlfMotionFilter::UpdateWithObject(const MlfFilterOptions &, const MlfTrackDataConstPtr &, TrackedObjectPtr)
		function MlfMotionFilter::UpdateWithoutObject(const MlfFilterOptions &, double, MlfTrackDataPtr)
		function MlfMotionFilter::InitializeTrackState(TrackedObjectPtr)
		function MlfMotionFilter::KalmanFilterUpdateWithPartialObservation(const MlfTrackDataConstPtr &, const TrackedObjectConstPtr &, TrackedObjectPtr)
		function MlfMotionFilter::StateGainAdjustment(const MlfTrackDataConstPtr &, const TrackedObjectConstPtr &, const TrackedObjectConstPtr &, Eigen::Vector4d *)
		function MlfMotionFilter::StateToBelief(TrackedObjectPtr)
		function MlfMotionFilter::BeliefToOutput(TrackedObjectPtr)
		function MlfMotionFilter::ClipingState(TrackedObjectPtr)
		function MlfMotionFilter::OnlineCovarianceEstimation(const MlfTrackDataConstPtr &, TrackedObjectPtr)
		function MlfMotionFilter::ConvergenceEstimationAndBoostUp(const MlfTrackDataConstPtr &, const TrackedObjectConstPtr &, TrackedObjectPtr)
		function MlfMotionFilter::ComputeConvergenceConfidence(const MlfTrackDataConstPtr &, TrackedObjectPtr, bool)
		function MlfMotionFilter::BoostupState(const MlfTrackDataConstPtr &, TrackedObjectPtr)
		function MlfMotionFilter::UpdateConverged(const MlfTrackDataConstPtr &, TrackedObjectPtr)
		function PERCEPTION_REGISTER_MLFFILTER(MlfMotionFilter)
namespace perception
	namespace lidar
		function MlfMotionMeasurement::ComputeMotionMeasurment(const MlfTrackDataConstPtr &, TrackedObjectPtr)
		function MlfMotionMeasurement::MeasurementSelection(const MlfTrackDataConstPtr &, const TrackedObjectConstPtr &, TrackedObjectPtr)
		function MlfMotionMeasurement::MeasurementQualityEstimation(const TrackedObjectConstPtr &, TrackedObjectPtr)
namespace perception
	namespace lidar
		function MlfMotionRefiner::Init(const MlfMotionRefinerInitOptions &)
		function MlfMotionRefiner::Refine(const MlfTrackDataConstPtr &, TrackedObjectPtr)
		function MlfMotionRefiner::CheckStaticHypothesisByState(const TrackedObjectConstPtr &, const TrackedObjectConstPtr &) const
		function MlfMotionRefiner::CheckStaticHypothesisByVelocityAngleChange(const TrackedObjectConstPtr &, const TrackedObjectConstPtr &, double) const
namespace perception
	namespace lidar
		function MlfShapeFilter::Init(const MlfFilterInitOptions &)
		function MlfShapeFilter::UpdateWithObject(const MlfFilterOptions &, const MlfTrackDataConstPtr &, TrackedObjectPtr)
		function MlfShapeFilter::UpdateWithoutObject(const MlfFilterOptions &, double, MlfTrackDataPtr)
		function PERCEPTION_REGISTER_MLFFILTER(MlfShapeFilter)
namespace perception
	namespace lidar
		variable MlfTrackObjectDistance::kForegroundDefaultWeight
		variable MlfTrackObjectDistance::kBackgroundDefaultWeight
		function MlfTrackObjectDistance::Init(const MlfTrackObjectDistanceInitOptions &)
		function MlfTrackObjectDistance::ComputeDistance(const TrackedObjectConstPtr &, const MlfTrackDataConstPtr &) const
namespace perception
	namespace lidar
		function MlfTrackObjectMatcher::Init(const MlfTrackObjectMatcherInitOptions &)
		function MlfTrackObjectMatcher::Match(const MlfTrackObjectMatcherOptions &, const std::vector<TrackedObjectPtr>&, const std::vector<MlfTrackDataPtr>&, std::vector<std::pair<size_t,size_t>>*, std::vector<size_t>*, std::vector<size_t>*)
		function MlfTrackObjectMatcher::ComputeAssociateMatrix(const std::vector<MlfTrackDataPtr>&, const std::vector<TrackedObjectPtr>&, common::SecureMat<float>*)
namespace perception
	namespace lidar
		function MlfTracker::Init(const MlfTrackerInitOptions)
		function MlfTracker::InitializeTrack(MlfTrackDataPtr, TrackedObjectPtr)
		function MlfTracker::UpdateTrackDataWithObject(MlfTrackDataPtr, TrackedObjectPtr)
		function MlfTracker::UpdateTrackDataWithoutObject(double, MlfTrackDataPtr)
namespace perception
	interface IdObstacleListMap
	function IsTrainable(const Feature &)
	function EvaluatorManager::Init()
	function EvaluatorManager::Run(ObstaclesContainer *)
	function EvaluatorManager::EvaluateObstacle(Obstacle *, ObstaclesContainer *, std::vector<Obstacle*>)
	function EvaluatorManager::EvaluateObstacle(Obstacle *, ObstaclesContainer *)
	function EvaluatorManager::BuildObstacleIdHistoryMap(ObstaclesContainer *)
namespace perception
	namespace lidar
		function MsgExporter::MsgExporter(std::shared_ptr<apollo::cyber::Node>, const std::vector<std::string>, const std::vector<std::string>)
		function MsgExporter::ImageMessageHandler(const std::shared_ptr<const ImgMsg>&, const std::string &, const std::string &, const std::string &)
		function MsgExporter::PointCloudMessageHandler(const std::shared_ptr<const PcMsg>&, const std::string &, const std::string &, const std::string &)
		function MsgExporter::SavePointCloud(const pcl::PointCloud<PCLPointXYZIT>&, double, const std::string &)
		function MsgExporter::SaveImage(const unsigned char *, const unsigned char *, std::size_t, std::size_t, double, const std::string &)
		function MsgExporter::QuerySensorToWorldPose(double, const std::string &, Eigen::Matrix4d *)
		function MsgExporter::QueryPose(double, const std::string &, const std::string &, Eigen::Matrix4d *)
		function MsgExporter::SavePose(const Eigen::Matrix4d &, double, const std::string &)
		function MsgExporter::IsStereoCamera(const std::string &)
		function MsgExporter::IsCamera(const std::string &)
		function MsgExporter::IsLidar(const std::string &)
		function MsgExporter::TransformChannelToFolder(const std::string &)
namespace perception
	namespace lidar
		function config_parser(const std::string &, std::vector<std::string>*, std::vector<std::string>*)
function main(int, char **)
variable DEFINE_string
variable DEFINE_string
variable DEFINE_bool
variable DEFINE_double
variable DEFINE_bool
variable DEFINE_bool
variable DEFINE_string
namespace apollo
	namespace perception
		namespace lidar
			class OfflineLidarObstaclePerception
				method OfflineLidarObstaclePerception()
				method ~OfflineLidarObstaclePerception()
				method setup()
				method run()
				method WriteObjectsForNewBenchmark(size_t, const std::vector<base::ObjectPtr>&, const std::string &)
				field output_dir_
				field frame_
				field segment_init_options_
				field segment_options_
				field tracking_init_options_
				field tracking_options_
				field lidar_segmentation_
				field lidar_tracking_
				field sensor_info_
function main(int, char **)
namespace perception
	namespace map
		function HDMapInput::HDMapInput()
		function HDMapInput::Init()
		function HDMapInput::InitInternal()
		function HDMapInput::Reset()
		function HDMapInput::InitHDMap()
		function HDMapInput::GetRoiHDMapStruct(const base::PointD &, const double, std::shared_ptr<base::HdmapStruct>)
		function HDMapInput::MergeBoundaryJunction(const std::vector<apollo::hdmap::RoadRoiPtr>&, const std::vector<apollo::hdmap::JunctionInfoConstPtr>&, EigenVector<base::RoadBoundary>*, EigenVector<base::PointCloud<base::PointD>>*, EigenVector<base::PointCloud<base::PointD>>*)
		function HDMapInput::GetRoadBoundaryFilteredByJunctions(const EigenVector<base::RoadBoundary>&, const EigenVector<base::PointCloud<base::PointD>>&, EigenVector<base::RoadBoundary>*)
		function HDMapInput::DownsamplePoints(const base::PointDCloudPtr &, base::PointCloud<base::PointD>*, size_t) const
		function HDMapInput::SplitBoundary(const base::PointCloud<base::PointD>&, const EigenVector<base::PointCloud<base::PointD>>&, EigenVector<base::PointCloud<base::PointD>>*)
		function HDMapInput::GetNearestLaneDirection(const base::PointD &, Eigen::Vector3d *)
		function HDMapInput::GetSignalsFromHDMap(const Eigen::Vector3d &, double, std::vector<apollo::hdmap::Signal>*)
		function HDMapInput::GetSignals(const Eigen::Vector3d &, double, std::vector<apollo::hdmap::Signal>*)
namespace perception
	namespace onboard
		variable DEFINE_bool
		variable DEFINE_bool
		variable DEFINE_string
		variable DEFINE_bool
		variable DEFINE_bool
		variable DEFINE_bool
namespace perception
	namespace onboard
		function CameraPerceptionVizMessage::CameraPerceptionVizMessage(const std::string &, const double, const Eigen::Matrix4d &, const std::shared_ptr<base::Blob<uint8_t>>&, const std::vector<base::ObjectPtr>&, const std::vector<base::LaneLine>&, const apollo::common::ErrorCode &)
namespace apollo
	namespace perception
		namespace onboard
			variable DetectionComponent::seq_num_
			function DetectionComponent::Init()
			function DetectionComponent::Proc(const std::shared_ptr<drivers::PointCloud>&)
			function DetectionComponent::InitAlgorithmPlugin()
			function DetectionComponent::InternalProc(const std::shared_ptr<const drivers::PointCloud>&, const std::shared_ptr<LidarFrameMessage>&)
namespace perception
	namespace onboard
		function fill_lane_msg(const base::LaneLineCubicCurve &, apollo::perception::LaneMarker *)
		function GetGpuId(const camera::CameraPerceptionInitOptions &)
		function SetCameraHeight(const std::string &, const std::string &, const std::string &, float, float *)
		function LoadExtrinsics(const std::string &, Eigen::Matrix4d *)
		function GetProjectMatrix(const std::vector<std::string>&, const EigenMap<std::string,Eigen::Matrix4d>&, const EigenMap<std::string,Eigen::Matrix3f>&, Eigen::Matrix3d *, double *)
		function FusionCameraDetectionComponent::~FusionCameraDetectionComponent()
		function FusionCameraDetectionComponent::Init()
		function FusionCameraDetectionComponent::OnReceiveImage(const std::shared_ptr<apollo::drivers::Image>&, const std::string &)
		function FusionCameraDetectionComponent::InitConfig()
		function FusionCameraDetectionComponent::InitSensorInfo()
		function FusionCameraDetectionComponent::InitAlgorithmPlugin()
		function FusionCameraDetectionComponent::InitCameraFrames()
		function FusionCameraDetectionComponent::InitProjectMatrix()
		function FusionCameraDetectionComponent::InitCameraListeners()
		function FusionCameraDetectionComponent::InitMotionService()
		function FusionCameraDetectionComponent::OnMotionService(const MotionServiceMsgType &)
		function FusionCameraDetectionComponent::SetCameraHeightAndPitch()
		function FusionCameraDetectionComponent::InternalProc(const std::shared_ptr<apollo::drivers::Image const>&, const std::string &, apollo::common::ErrorCode *, SensorFrameMessage *, apollo::perception::PerceptionObstacles *)
		function FusionCameraDetectionComponent::MakeProtobufMsg(double, int, const std::vector<base::ObjectPtr>&, const std::vector<base::LaneLine>&, const apollo::common::ErrorCode, apollo::perception::PerceptionObstacles *)
		function FusionCameraDetectionComponent::ConvertObjectToPb(const base::ObjectPtr &, apollo::perception::PerceptionObstacle *)
		function FusionCameraDetectionComponent::ConvertObjectToCameraObstacle(const base::ObjectPtr &, apollo::perception::camera::CameraObstacle *)
		function FusionCameraDetectionComponent::ConvertLaneToCameraLaneline(const base::LaneLine &, apollo::perception::camera::CameraLaneLine *)
		function FusionCameraDetectionComponent::MakeCameraDebugMsg(double, const std::string &, const camera::CameraFrame &, apollo::perception::camera::CameraDebug *)
namespace perception
	namespace onboard
		variable FusionComponent::s_seq_num_
		variable FusionComponent::s_mutex_
		function FusionComponent::Init()
		function FusionComponent::Proc(const std::shared_ptr<SensorFrameMessage>&)
		function FusionComponent::InitAlgorithmPlugin()
		function FusionComponent::InternalProc(const std::shared_ptr<SensorFrameMessage const>&, std::shared_ptr<PerceptionObstacles>, std::shared_ptr<SensorFrameMessage>)
namespace perception
	namespace onboard
		variable LaneDetectionComponent::init_func_arry_
		function LaneDetectionComponent::~LaneDetectionComponent()
		function LaneDetectionComponent::Init()
		function LaneDetectionComponent::OnMotionService(const MotionServiceMsgType &)
		function LaneDetectionComponent::OnReceiveImage(const std::shared_ptr<apollo::drivers::Image>&, const std::string &)
		function LaneDetectionComponent::InitConfig()
		function LaneDetectionComponent::InitSensorInfo()
		function LaneDetectionComponent::InitAlgorithmPlugin()
		function LaneDetectionComponent::InitCameraFrames()
		function LaneDetectionComponent::InitProjectMatrix()
		function LaneDetectionComponent::InitMotionService()
		function LaneDetectionComponent::InitCameraListeners()
		function LaneDetectionComponent::SetCameraHeightAndPitch()
		function LaneDetectionComponent::InternalProc(const std::shared_ptr<apollo::drivers::Image const>&, const std::string &, apollo::common::ErrorCode *, SensorFrameMessage *, apollo::perception::PerceptionLanes *)
		function LaneDetectionComponent::ConvertLaneToCameraLaneline(const base::LaneLine &, apollo::perception::camera::CameraLaneLine *)
		function LaneDetectionComponent::MakeProtobufMsg(double, const std::string &, const camera::CameraFrame &, apollo::perception::PerceptionLanes *)
		function GetGpuId(const camera::CameraPerceptionInitOptions &)
		function SetCameraHeight(const std::string &, const std::string &, const std::string &, float, float *)
		function LoadExtrinsics(const std::string &, Eigen::Matrix4d *)
		function GetProjectMatrix(const std::vector<std::string>&, const EigenMap<std::string,Eigen::Matrix4d>&, const EigenMap<std::string,Eigen::Matrix3f>&, Eigen::Matrix3d *, double *)
namespace perception
	namespace onboard
		function LidarOutputComponent::Init()
		function LidarOutputComponent::Proc(const std::shared_ptr<SensorFrameMessage>&)
namespace apollo
	namespace perception
		namespace onboard
			function RadarDetectionComponent::Init()
			function RadarDetectionComponent::Proc(const std::shared_ptr<ContiRadar>&)
			function RadarDetectionComponent::InitAlgorithmPlugin()
			function RadarDetectionComponent::InternalProc(const std::shared_ptr<ContiRadar>&, std::shared_ptr<SensorFrameMessage>)
			function RadarDetectionComponent::GetCarLocalizationSpeed(double, Eigen::Vector3f *, Eigen::Vector3f *)
namespace apollo
	namespace perception
		namespace onboard
			function RecognitionComponent::Init()
			function RecognitionComponent::Proc(const std::shared_ptr<LidarFrameMessage>&)
			function RecognitionComponent::InitAlgorithmPlugin()
			function RecognitionComponent::InternalProc(const std::shared_ptr<const LidarFrameMessage>&, const std::shared_ptr<SensorFrameMessage>&)
namespace apollo
	namespace perception
		namespace onboard
			variable SegmentationComponent::s_seq_num_
			variable SegmentationComponent::s_mutex_
			function SegmentationComponent::Init()
			function SegmentationComponent::Proc(const std::shared_ptr<drivers::PointCloud>&)
			function SegmentationComponent::InitAlgorithmPlugin()
			function SegmentationComponent::InternalProc(const std::shared_ptr<const drivers::PointCloud>&, const std::shared_ptr<LidarFrameMessage>&)
namespace perception
	namespace onboard
		interface TLCamID
		class TLInfo
			field tl_color_
			field tl_string_
			field tl_string_ex_
		variable s_tl_infos
		function GetGpuId(const apollo::perception::camera::CameraPerceptionInitOptions &)
		function TrafficLightsPerceptionComponent::Init()
		function TrafficLightsPerceptionComponent::InitConfig()
		function TrafficLightsPerceptionComponent::InitAlgorithmPlugin()
		function TrafficLightsPerceptionComponent::InitCameraListeners()
		function TrafficLightsPerceptionComponent::InitV2XListener()
		function TrafficLightsPerceptionComponent::InitCameraFrame()
		function TrafficLightsPerceptionComponent::OnReceiveImage(const std::shared_ptr<apollo::drivers::Image>, const std::string &)
		function TrafficLightsPerceptionComponent::OnReceiveV2XMsg(const std::shared_ptr<apollo::v2x::IntersectionTrafficLightData>)
		function TrafficLightsPerceptionComponent::GenerateTrafficLights(const std::vector<apollo::hdmap::Signal>&, std::vector<base::TrafficLightPtr>*)
		function TrafficLightsPerceptionComponent::QueryPoseAndSignals(const double, camera::CarPose *, std::vector<apollo::hdmap::Signal>*)
		function TrafficLightsPerceptionComponent::VerifyLightsProjection(const double &, const camera::TLPreprocessorOption &, const std::string &, camera::CameraFrame *)
		function TrafficLightsPerceptionComponent::UpdateCameraSelection(double, const camera::TLPreprocessorOption &, camera::CameraFrame *)
		function TrafficLightsPerceptionComponent::CheckCameraImageStatus(double, double, const std::string &)
		function TrafficLightsPerceptionComponent::GetCarPose(const double, camera::CarPose *)
		function TrafficLightsPerceptionComponent::GetPoseFromTF(const double, const std::string &, const std::string &, Eigen::Matrix4d *)
		function TrafficLightsPerceptionComponent::TransformOutputMessage(camera::CameraFrame *, const std::string &, std::shared_ptr<TrafficLightDetection>*)
		function TrafficLightsPerceptionComponent::TransRect2Box(const base::RectI &, apollo::perception::TrafficLightBox *)
		function TrafficLightsPerceptionComponent::stopline_distance(const Eigen::Matrix4d &)
		function TrafficLightsPerceptionComponent::TransformDebugMessage(const camera::CameraFrame *, std::shared_ptr<apollo::perception::TrafficLightDetection>*)
		function TrafficLightsPerceptionComponent::Visualize(const camera::CameraFrame &, const std::vector<base::TrafficLightPtr>&) const
		function TrafficLightsPerceptionComponent::SyncV2XTrafficLights(camera::CameraFrame *)
		function TrafficLightsPerceptionComponent::SendSimulationMsg()
namespace perception
	namespace onboard
		variable DEFINE_int32
		variable DEFINE_double
namespace `anonymous-namespace'
	variable kFloatMax
namespace apollo
	namespace perception
		namespace onboard
			function MsgSerializer::SerializeMsg(double, uint64_t, int, const std::vector<base::ObjectPtr>&, const apollo::common::ErrorCode &, PerceptionObstacles *)
			function MsgSerializer::ConvertObjectToPb(const base::ObjectPtr &, PerceptionObstacle *)
namespace perception
	namespace onboard
		variable DEFINE_string
		variable DEFINE_string
		variable DEFINE_string
		variable DEFINE_double
		variable DEFINE_double
		variable DEFINE_double
		variable DEFINE_bool
		function TransformCache::AddTransform(const StampedTransform &)
		function TransformCache::QueryTransform(double, StampedTransform *, double)
		function Slerp(const Eigen::Quaterniond &, const double &, const Eigen::Quaterniond &)
		function TransformWrapper::Init(const std::string &)
		function TransformWrapper::Init(const std::string &, const std::string &, const std::string &, const std::string &)
		function TransformWrapper::GetSensor2worldTrans(double, Eigen::Affine3d *, Eigen::Affine3d *)
		function TransformWrapper::GetExtrinsics(Eigen::Affine3d *)
		function TransformWrapper::GetTrans(double, Eigen::Affine3d *, const std::string &, const std::string &)
		function TransformWrapper::QueryTrans(double, StampedTransform *, const std::string &, const std::string &)
		function TransformWrapper::GetExtrinsicsBySensorId(const std::string &, const std::string &, Eigen::Affine3d *)
namespace apollo
	namespace perception
		namespace radar
			function RadarObstaclePerception::Init(const std::string &)
			function RadarObstaclePerception::Perceive(const drivers::ContiRadar &, const RadarPerceptionOptions &, std::vector<base::ObjectPtr>*)
			function RadarObstaclePerception::Name() const
			function PERCEPTION_REGISTER_RADAR_OBSTACLE_PERCEPTION(RadarObstaclePerception)
namespace perception
	namespace radar
		function MockRadarPolygon(base::ObjectPtr)
namespace perception
	namespace radar
		function ContiArsDetector::Init()
		function ContiArsDetector::Detect(const drivers::ContiRadar &, const DetectorOptions &, base::FramePtr)
		function ContiArsDetector::Name() const
		function ContiArsDetector::RawObs2Frame(const drivers::ContiRadar &, const DetectorOptions &, base::FramePtr)
		function PERCEPTION_REGISTER_DETECTOR(ContiArsDetector)
namespace perception
	namespace radar
		function DummyDetector::ContiObs2Frame(const drivers::ContiRadar &, base::FramePtr)
		function DummyDetector::Init()
		function DummyDetector::Detect(const drivers::ContiRadar &, const DetectorOptions &, base::FramePtr)
		function DummyDetector::Name() const
		function DummyPreprocessor::Init()
		function DummyPreprocessor::Preprocess(const drivers::ContiRadar &, const PreprocessorOptions &, drivers::ContiRadar *)
		function DummyPreprocessor::Name() const
		function DummyRoiFilter::Init()
		function DummyRoiFilter::RoiFilter(const RoiFilterOptions &, base::FramePtr)
		function DummyRoiFilter::Name() const
		function PERCEPTION_REGISTER_PREPROCESSOR(DummyPreprocessor)
		function PERCEPTION_REGISTER_ROI_FILTER(DummyRoiFilter)
		function PERCEPTION_REGISTER_DETECTOR(DummyDetector)
namespace perception
	namespace radar
		variable BaseMatcher::s_max_match_distance_
		variable BaseMatcher::s_bound_match_distance_
		function BaseMatcher::SetMaxMatchDistance(double)
		function BaseMatcher::GetMaxMatchDistance()
		function BaseMatcher::SetBoundMatchDistance(double)
		function BaseMatcher::GetBoundMatchDistance()
		function BaseMatcher::IDMatch(const std::vector<RadarTrackPtr>&, const base::Frame &, std::vector<TrackObjectPair>*, std::vector<size_t>*, std::vector<size_t>*)
		function BaseMatcher::RefinedTrack(const base::ObjectPtr &, double, const base::ObjectPtr &, double)
namespace perception
	namespace radar
		variable ContiArsPreprocessor::current_idx_
		variable ContiArsPreprocessor::local2global_
		function ContiArsPreprocessor::Init()
		function ContiArsPreprocessor::Preprocess(const drivers::ContiRadar &, const PreprocessorOptions &, drivers::ContiRadar *)
		function ContiArsPreprocessor::Name() const
		function ContiArsPreprocessor::SkipObjects(const drivers::ContiRadar &, drivers::ContiRadar *)
		function ContiArsPreprocessor::ExpandIds(drivers::ContiRadar *)
		function ContiArsPreprocessor::CorrectTime(drivers::ContiRadar *)
		function ContiArsPreprocessor::GetNextId()
		function PERCEPTION_REGISTER_PREPROCESSOR(ContiArsPreprocessor)
namespace perception
	namespace radar
		function HdmapRadarRoiFilter::RoiFilter(const RoiFilterOptions &, base::FramePtr)
		function HdmapRadarRoiFilter::Name() const
		function PERCEPTION_REGISTER_ROI_FILTER(HdmapRadarRoiFilter)
namespace perception
	namespace radar
		variable RadarTrack::s_current_idx_
		variable RadarTrack::s_tracked_times_threshold_
		variable RadarTrack::s_use_filter_
		variable RadarTrack::s_chosen_filter_
		function RadarTrack::RadarTrack(const base::ObjectPtr &, const double)
		function RadarTrack::UpdataObsRadar(const base::ObjectPtr &, const double)
		function RadarTrack::SetObsRadarNullptr()
		function RadarTrack::GetObsRadar()
		function RadarTrack::GetObs()
		function RadarTrack::GetObsId() const
		function RadarTrack::GetTimestamp()
		function RadarTrack::GetTrackingTime()
namespace perception
	namespace radar
		function RadarTrackManager::RemoveLostTracks()
		function RadarTrackManager::ClearTracks()
namespace perception
	namespace radar
		variable ContiArsTracker::s_tracking_time_win_
		function ContiArsTracker::ContiArsTracker()
		function ContiArsTracker::~ContiArsTracker()
		function ContiArsTracker::Init()
		function ContiArsTracker::Track(const base::Frame &, const TrackerOptions &, base::FramePtr)
		function ContiArsTracker::TrackObjects(const base::Frame &)
		function ContiArsTracker::UpdateAssignedTracks(const base::Frame &, std::vector<TrackObjectPair>)
		function ContiArsTracker::UpdateUnassignedTracks(const base::Frame &, const std::vector<size_t>&)
		function ContiArsTracker::DeleteLostTracks()
		function ContiArsTracker::CreateNewTracks(const base::Frame &, const std::vector<size_t>&)
		function ContiArsTracker::CollectTrackedFrame(base::FramePtr)
		function PERCEPTION_REGISTER_TRACKER(ContiArsTracker)
namespace perception
	namespace radar
		variable AdaptiveKalmanFilter::s_q_matrix_ratio_
		function AdaptiveKalmanFilter::AdaptiveKalmanFilter()
		function AdaptiveKalmanFilter::~AdaptiveKalmanFilter()
		function AdaptiveKalmanFilter::Init(const base::Object &)
		function AdaptiveKalmanFilter::Predict(const double)
		function AdaptiveKalmanFilter::UpdateWithObject(const base::Object &, double)
		function AdaptiveKalmanFilter::GetState(Eigen::Vector3d *, Eigen::Vector3d *)
namespace perception
	namespace radar
		function HMMatcher::HMMatcher()
		function HMMatcher::~HMMatcher()
		function HMMatcher::Init()
		function HMMatcher::Match(const std::vector<RadarTrackPtr>&, const base::Frame &, const TrackObjectMatcherOptions &, std::vector<TrackObjectPair>*, std::vector<size_t>*, std::vector<size_t>*)
		function HMMatcher::RefinedTrack(const base::ObjectPtr &, double, const base::ObjectPtr &, double)
		function HMMatcher::TrackObjectPropertyMatch(const std::vector<RadarTrackPtr>&, const base::Frame &, std::vector<TrackObjectPair>*, std::vector<size_t>*, std::vector<size_t>*)
		function HMMatcher::ComputeAssociationMat(const std::vector<RadarTrackPtr>&, const base::Frame &, const std::vector<size_t>&, const std::vector<size_t>&, std::vector<std::vector<double>>*)
		function HMMatcher::DistanceBetweenObs(const base::ObjectPtr &, double, const base::ObjectPtr &, double)
		function PERCEPTION_REGISTER_MATCHER(HMMatcher)
namespace perception
	namespace benchmark
		variable Frame::_s_black_list
		variable Frame::_s_is_for_visualization
		variable Frame::_s_distance_to_roi_boundary
		variable Frame::_s_visible_threshold
		variable Frame::_s_min_confidence
		function Frame::set_black_list(const std::set<std::string>&)
		function Frame::set_is_for_visualization(bool)
		function Frame::set_visible_threshold(float)
		function Frame::set_min_confidence(float)
		function Frame::load(const std::vector<std::string>&)
		function Frame::build_indices()
		function Frame::build_points()
		function Frame::build_objects_indices(const pcl::KdTreeFLANN<Point>&, std::vector<ObjectPtr>*)
		function Frame::build_objects_points(std::vector<ObjectPtr>*)
namespace perception
	namespace benchmark
		variable PointCloudFrame::_s_cloud_type
		function PointCloudFrame::set_cloud_type(const std::string &)
		function PointCloudFrame::load(const std::vector<std::string>&)
namespace perception
	namespace benchmark
		function DetectionEvaluation::init(const std::string &, const std::string &, const std::string &, bool, unsigned int, unsigned int, unsigned int, const std::string &)
		function DetectionEvaluation::run_evaluation()
		operator operator<<(std::ostream &, const DetectionEvaluation &)
namespace perception
	namespace benchmark
		variable FrameStatistics::_s_jaccard_index_threshold
		variable FrameStatistics::_s_jaccard_index_percentile
		variable FrameStatistics::_s_cover_rate
		variable FrameStatistics::_s_roi_is_main_lanes
		function FrameStatistics::set_jaccard_index_threshold(double)
		function FrameStatistics::set_jaccard_index_percentile(double)
		function FrameStatistics::set_roi_is_main_lanes(bool)
		function FrameStatistics::jaccard_index_percentile() const
		function FrameStatistics::find_association()
		function FrameStatistics::cal_meta_statistics()
		function cal_point_based_jaccard_index(unsigned int, unsigned int, unsigned int)
namespace perception
	namespace benchmark
		function LidarOption::set_options() const
namespace perception
	namespace benchmark
		variable OrientationSimilarityMetric::penalize_pi
		function OrientationSimilarityMetric::cal_orientation_similarity(const ObjectPtr &, const ObjectPtr &)
		variable MetaStatistics::_s_recall_dim
		function MetaStatistics::set_range_type(RangeType)
		function MetaStatistics::set_recall_dim(unsigned int)
		function MetaStatistics::get_type_index(const ObjectType &)
		function MetaStatistics::get_range_index(const PositionMetric &)
		function MetaStatistics::get_confidence_index(double)
		function MetaStatistics::get_type_dim()
		function MetaStatistics::get_range_dim()
		function MetaStatistics::get_confidence_dim()
		function MetaStatistics::get_type(unsigned int)
		function MetaStatistics::get_range(unsigned int)
		function MetaStatistics::get_confidence(unsigned int)
		function MetaStatistics::get_recall_dim()
		function MetaStatistics::MetaStatistics()
		function MetaStatistics::reset()
		function MetaStatistics::operator+=(const MetaStatistics &)
		function MetaStatistics::get_2017_detection_precision_and_recall(std::vector<double>*, std::vector<double>*) const
		function MetaStatistics::get_2017_detection_visible_recall(std::vector<double>*) const
		function MetaStatistics::get_2017_aad(std::vector<double>*) const
		function MetaStatistics::get_2016_detection_precision_and_recall(std::vector<double>*, std::vector<double>*) const
		function MetaStatistics::get_2017_detection_ap_per_type(std::vector<double>*, std::vector<std::vector<SPRCTuple>>*)
		function MetaStatistics::get_2017_detection_ap_aos(double *, double *, std::vector<SPRCTuple>*) const
		function MetaStatistics::get_2017_classification_accuracy(std::vector<std::vector<double>>*) const
		function MetaStatistics::get_2016_classification_accuracy(std::vector<std::vector<double>>*) const
		function MetaStatistics::get_classification_confusion_matrix(std::vector<std::vector<double>>*, std::vector<std::vector<double>>*, std::vector<std::vector<double>>*) const
		function vec_add1<T>(std::vector<T>*, const std::vector<T>&)
		function vec_add2<T>(std::vector<std::vector<T>>*, const std::vector<std::vector<T>>&)
		function vec_add3<T>(std::vector<std::vector<std::vector<T>>>*, const std::vector<std::vector<std::vector<T>>>&)
		function compute_ap_aos(const std::vector<unsigned int>&, const std::vector<unsigned int>&, const unsigned int, const unsigned int, double *, std::vector<SPRCTuple>*, const std::vector<double>&, double *)
		operator operator<<(std::ostream &, const MetaStatistics &)
namespace perception
	namespace benchmark
		function PositionMetric::cal_position_metric(const ObjectPtr &, const PositionMetricOption &)
		variable DistanceBasedRangeInterface::_s_distance
		variable DistanceBasedRangeInterface::_s_half_distance
		function DistanceBasedRangeInterface::set_distance(double)
		function DistanceBasedRangeInterface::get_index(const PositionMetric &) const
		function DistanceBasedRangeInterface::get_dim() const
		function DistanceBasedRangeInterface::get_element(unsigned int) const
		function DistanceBasedRangeRadarInterface::get_index(const PositionMetric &) const
		function DistanceBasedRangeRadarInterface::get_dim() const
		function DistanceBasedRangeRadarInterface::get_element(unsigned int) const
		variable ViewBasedRangeInterface::_s_front_view_angle
		variable ViewBasedRangeInterface::_s_rear_view_angle
		variable ViewBasedRangeInterface::_s_front_view_distance
		variable ViewBasedRangeInterface::_s_rear_view_distance
		function ViewBasedRangeInterface::set_front_view_angle(double)
		function ViewBasedRangeInterface::set_rear_view_angle(double)
		function ViewBasedRangeInterface::set_front_view_distance(double)
		function ViewBasedRangeInterface::set_rear_view_distance(double)
		function ViewBasedRangeInterface::get_index(const PositionMetric &) const
		function ViewBasedRangeInterface::get_dim() const
		function ViewBasedRangeInterface::get_element(unsigned int) const
		variable BoxBasedRangeInterface::_s_front_box_distance
		variable BoxBasedRangeInterface::_s_rear_box_distance
		variable BoxBasedRangeInterface::_s_side_box_distance
		function BoxBasedRangeInterface::set_front_box_distance(double)
		function BoxBasedRangeInterface::set_rear_box_distance(double)
		function BoxBasedRangeInterface::set_side_box_distance(double)
		function BoxBasedRangeInterface::get_index(const PositionMetric &) const
		function BoxBasedRangeInterface::get_dim() const
		function BoxBasedRangeInterface::get_element(unsigned int) const
		variable RoiDistanceBasedRangeInterface::_s_ignore_roi_outside
		function RoiDistanceBasedRangeInterface::set_ignore_roi_outside(bool)
		function RoiDistanceBasedRangeInterface::get_index(const PositionMetric &) const
		function RoiDistanceBasedRangeInterface::get_dim() const
		function RoiDistanceBasedRangeInterface::get_element(unsigned int) const
namespace perception
	namespace benchmark
		function SequenceSelfStatistics<KeyType>::SequenceSelfStatistics()
		function SequenceSelfStatistics<KeyType>::reset()
		function SequenceSelfStatistics<KeyType>::add_objects(const std::vector<ObjectPtr>&, KeyType)
		function SequenceSelfStatistics<KeyType>::add_statistics(SequenceType<KeyType>*)
		function SequenceSelfStatistics<KeyType>::get_classification_type_change_rates(std::vector<std::vector<double>>*, double *) const
		class SequenceSelfStatistics<double>
		class SequenceSelfStatistics<unsigned int>
namespace perception
	namespace benchmark
		function is_point_xy_in_polygon2d_xy(const Point &, const PointCloud &, float)
		function VisPoint::operator<(const VisPoint &) const
		function VisPoint::operator==(const VisPoint &) const
		function VisPoint::operator!=(const VisPoint &) const
		function Segment::operator<(const Segment &) const
		function Segment::operator==(const Segment &) const
		function Segment::operator!=(const Segment &) const
		function compute_orientation(const VisPoint &, const VisPoint &, const VisPoint &)
		function intersects(const VisPoint &, const Segment &, VisPoint *)
namespace perception
	namespace benchmark
		variable s_load_method
		function load_pcl_pcds(const std::string &, PointCloudPtr, const std::string &)
		function load_pcl_pcds_xyzit(const std::string &, PointCloudPtr)
		function load_pcl_pcds_xyzl(const std::string &, PointCloudPtr)
		function load_frame_objects(const std::string &, const std::set<std::string>&, std::vector<ObjectPtr>*, std::vector<PointCloud>*, std::vector<PointCloud>*, std::vector<PointCloud>*, std::vector<PointCloud>*, std::vector<PointCloud>*, PointCloud *)
		function load_sensor2world_pose(const std::string &, Eigen::Matrix4d *)
		function save_frame_objects(const std::string &, const std::vector<ObjectPtr>&, int)
namespace perception
	namespace benchmark
		function Object::Object()
		function Object::Object(const Object &)
		function Object::operator=(const Object &)
		function Object::clone(const Object &)
		function Object::to_string() const
		function get_object_name(ObjectType)
		function get_sensor_name(SensorType)
		function SensorObjects::to_string() const
		function translate_string_to_type(const std::string &)
		function translate_type_to_index(const ObjectType &)
		function translate_type_index_to_string(unsigned int)
		function translate_string_to_sensor_type(const std::string &)
		function translate_type_to_string(ObjectType)
		function translate_sensor_type_to_string(const SensorType &)
namespace perception
	namespace benchmark
		function LidarSupplement::LidarSupplement()
		function LidarSupplement::~LidarSupplement()
		function LidarSupplement::LidarSupplement(const LidarSupplement &)
		function LidarSupplement::operator=(const LidarSupplement &)
		function LidarSupplement::clone(const LidarSupplement &)
		function RadarSupplement::RadarSupplement()
		function RadarSupplement::~RadarSupplement()
		function RadarSupplement::RadarSupplement(const RadarSupplement &)
		function RadarSupplement::operator=(const RadarSupplement &)
		function RadarSupplement::clone(const RadarSupplement &)
		function CameraSupplement::CameraSupplement()
		function CameraSupplement::~CameraSupplement()
		function CameraSupplement::CameraSupplement(const CameraSupplement &)
		function CameraSupplement::operator=(const CameraSupplement &)
		function CameraSupplement::clone(const CameraSupplement &)
namespace perception
	namespace benchmark
		function get_bbox_vertices(const ObjectConstPtr, std::vector<Eigen::Vector3d>*)
		function fill_objects_with_point_cloud(std::vector<ObjectPtr>*, const PointCloudConstPtr)
		function fill_axis_align_box(ObjectPtr)
namespace perception
	namespace benchmark
		function OptionParser::parse_from_string(const std::string &)
		operator operator<<(std::ostream &, const OptionParser &)
namespace perception
	namespace benchmark
		variable Visibility::s_lut_
		function Visibility::set_car_pos(const Eigen::Vector3d &)
		function Visibility::fill_objects(std::vector<ObjectPtr>*, float)
		function Visibility::calculate(std::vector<ObjectPtr>*, float)
		function Visibility::reset_state()
		function Visibility::add_region()
		function Visibility::add_segment(const VisPoint &, const VisPoint &, int)
		function Visibility::query_segments(const VisPoint &)
		function Visibility::update_candidate_segment(const VisPoint &, UpdateOperation)
		function Visibility::calculate_area(const VisPoint &, const VisPoint &)
		function Visibility::calculate_visual_angle(const VisPoint &, const VisPoint &)
namespace planning
	function DecisionData::IsValidTrajectoryPoint(const common::TrajectoryPoint &)
	function DecisionData::IsValidTrajectory(const prediction::Trajectory &)
	function DecisionData::DecisionData(const prediction::PredictionObstacles &, const ReferenceLine &)
	function DecisionData::GetObstacleById(const std::string &)
	function DecisionData::GetObstacleByType(const VirtualObjectType &)
	function DecisionData::GetObstacleIdByType(const VirtualObjectType &)
	function DecisionData::GetStaticObstacle() const
	function DecisionData::GetDynamicObstacle() const
	function DecisionData::GetVirtualObstacle() const
	function DecisionData::GetPracticalObstacle() const
	function DecisionData::GetAllObstacle() const
	function DecisionData::CreateVirtualObstacle(const ReferencePoint &, const VirtualObjectType &, std::string * const)
	function DecisionData::CreateVirtualObstacle(const double, const VirtualObjectType &, std::string * const)
	function DecisionData::CreateVirtualObstacle(const common::math::Box2d &, const VirtualObjectType &, std::string * const)
namespace planning
	function EgoInfo::EgoInfo()
	function EgoInfo::Update(const common::TrajectoryPoint &, const common::VehicleState &)
	function EgoInfo::CalculateEgoBox(const common::VehicleState &)
	function EgoInfo::Clear()
	function EgoInfo::CalculateFrontObstacleClearDistance(const std::vector<const Obstacle*>&)
namespace planning
	variable FeatureOutput::learning_data_
	variable FeatureOutput::learning_data_file_index_
	function FeatureOutput::Close()
	function FeatureOutput::Clear()
	function FeatureOutput::Ready()
	function FeatureOutput::InsertLearningDataFrame(const std::string &, const LearningDataFrame &)
	function FeatureOutput::GetLatestLearningDataFrame()
	function FeatureOutput::InsertPlanningResult()
	function FeatureOutput::WriteLearningData(const std::string &)
	function FeatureOutput::WriteRemainderiLearningData(const std::string &)
namespace planning
	variable Frame::pad_msg_driving_action_
	function Frame::Frame(uint32_t)
	function Frame::Frame(uint32_t, const LocalView &, const common::TrajectoryPoint &, const common::VehicleState &, ReferenceLineProvider *)
	function Frame::Frame(uint32_t, const LocalView &, const common::TrajectoryPoint &, const common::VehicleState &)
	function Frame::PlanningStartPoint() const
	function Frame::vehicle_state() const
	function Frame::Rerouting(PlanningContext *)
	function Frame::reference_line_info() const
	function Frame::mutable_reference_line_info()
	function Frame::UpdateReferenceLinePriority(const std::map<std::string,uint32_t>&)
	function Frame::CreateReferenceLineInfo(const std::list<ReferenceLine>&, const std::list<hdmap::RouteSegments>&)
	function Frame::CreateStopObstacle(ReferenceLineInfo * const, const std::string &, const double)
	function Frame::CreateStopObstacle(const std::string &, const std::string &, const double)
	function Frame::CreateStaticObstacle(ReferenceLineInfo * const, const std::string &, const double, const double)
	function Frame::CreateStaticVirtualObstacle(const std::string &, const Box2d &)
